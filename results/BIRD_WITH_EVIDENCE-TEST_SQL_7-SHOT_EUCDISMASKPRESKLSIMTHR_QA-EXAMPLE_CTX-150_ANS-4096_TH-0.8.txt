SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS Highest_Eligible_Free_Rate_K_12 FROM frpm WHERE `County Name` = 'Alameda'
SELECT `School Name`, `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS FreeRate FROM frpm WHERE `School Type` = 'Continuation' ORDER BY FreeRate ASC LIMIT 3 /* Answer the following: What is the average SAT Math score for charter schools in Los Angeles County? */ SELECT AVG(AvgScrMath) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE Charter = 1 AND County = 'Los Angeles') /* Answer the following: Which school has the highest number of students taking the SAT in 2012? */ SELECT sname FROM satscores WHERE enroll12 = (SELECT MAX(enroll12) FROM satscores) /* Answer the following: What is the average percentage of students eligible for free meals in schools with a virtual program? */ SELECT AVG(`Percent (%) Eligible Free (K-12)`) FROM frpm WHERE CDSCode IN (SELECT CDSCode FROM schools WHERE Virtual = 'Yes') /* Answer the following: Which school has the highest number of students eligible for free meals in the age group 5-17? */ SELECT `School Name` FROM frpm WHERE `Free Meal Count (Ages 5-17)` = (SELECT MAX(`Free Meal Count (Ages 5-17)`) FROM frpm)
SELECT DISTINCT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 AND T2.District = 'Fresno County Office of Education'
SELECT MailStreet, MailCity, MailState, MailZip FROM schools WHERE CDSCode = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 )
SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01' AND T2.FundingType = 'Direct'
SELECT COUNT(DISTINCT T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath < 400 AND T1.Virtual = 'F'
SELECT T1.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr > 500 AND T2.Magnet = 1
SELECT Phone FROM schools WHERE CDSCode = ( SELECT cds FROM satscores ORDER BY NumGE1500 DESC LIMIT 1 )
SELECT SUM(T2.NumTstTakr) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1
SELECT COUNT(DISTINCT T1.CDSCode) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.FundingType = 'Directly funded'
SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead DESC LIMIT 1
SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500 /* Answer the following: Please list the names of the schools with an average SAT Math score of over 600. */ SELECT sname FROM satscores WHERE AvgScrMath > 600 /* Answer the following: Please list the names of the schools in 'Los Angeles' county. */ SELECT School FROM schools WHERE County = 'Los Angeles'
SELECT MAX(T1.`Percent (%) Eligible Free (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 / T2.NumTstTakr > 0.3
SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3
SELECT NCESSchool, `School Name`, `Enrollment (Ages 5-17)` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5
SELECT T2.`District Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`StatusType` = 'Active' GROUP BY T2.`District Name` ORDER BY AVG(T1.AvgScrRead) DESC LIMIT 1
SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Alameda' AND T2.NumTstTakr < 100
SELECT T2.CharterNum FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite = 499
SELECT COUNT(schools.CDSCode) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Contra Costa' AND schools.FundingType = 'Directly funded' AND satscores.NumTstTakr <= 250
SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1
SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12'
SELECT COUNT(schools.CDSCode) FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Los Angeles' AND frpm.`Free Meal Count (K-12)` > 500 AND frpm.`FRPM Count (K-12)` < 700
SELECT `School Name` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`County Name` = 'Contra Costa' ORDER BY T2.NumTstTakr DESC LIMIT 1
SELECT T1.`School Name`, T1.Street FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE ABS(T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30
SELECT T1.`School Name` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Percent (%) Eligible Free (K-12)` > 0.1 AND T2.NumGE1500 >= 1500
SELECT T1.School, T1.FundingType FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Riverside' GROUP BY T1.School, T1.FundingType HAVING AVG(T2.AvgScrMath) > 400
SELECT T1.`School Name`, T1.`Street`, T1.`City`, T1.`State`, T1.`Zip` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`County Name` = 'Monterey' AND T1.`FRPM Count (Ages 5-17)` > 800 AND T1.`High Grade` = '12'
SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.OpenDate > '1991-12-31' OR (T1.ClosedDate IS NOT NULL AND T1.ClosedDate < '2000-01-01')
SELECT S.School, S.DOCTYPE FROM schools AS S INNER JOIN frpm AS F ON S.CDSCode = F.CDSCode WHERE (F.`Enrollment (K-12)` - F.`Enrollment (Ages 5-17)`) > (SELECT AVG(F1.`Enrollment (K-12)` - F1.`Enrollment (Ages 5-17)`) FROM frpm AS F1 INNER JOIN schools AS S1 ON F1.CDSCode = S1.CDSCode WHERE S1.FundingType = 'Local') AND S.FundingType = 'Local'
SELECT OpenDate FROM schools WHERE CDSCode = ( SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` = ( SELECT MAX(`Enrollment (K-12)`) FROM frpm ) )
SELECT City FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T1.City ORDER BY SUM(T2.`Enrollment (K-12)`) ASC LIMIT 5
SELECT `School Name`, `Free Meal Count (K-12)` / `Enrollment (K-12)` AS `Eligible Free Rate` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2
SELECT T1.`School Name`, (T1.`FRPM Count (K-12)` / T1.`Enrollment (K-12)`) AS 'Eligible FRPM Rate' FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = '66' ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5
SELECT `School Name`, Website FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE `Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000
SELECT (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS FreeRate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Kacey' AND T2.AdmLName1 = 'Gibson'
SELECT T1.AdmEmail1 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 ORDER BY T2.`Enrollment (K-12)` ASC LIMIT 1 /* Answer the following: What is the name of the school with the highest average SAT score in reading? highest average SAT score in reading refers to MAX(AvgScrRead); */ SELECT sname FROM satscores ORDER BY AvgScrRead DESC LIMIT 1 /* Answer the following: What is the name of the district with the most number of schools? most number of schools refers to MAX(COUNT(School)); */ SELECT District FROM schools GROUP BY District ORDER BY COUNT(School) DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest percentage of students eligible for free meals in grades K-12? highest percentage of students eligible for free meals in grades K-12 refers to MAX(`Percent (%) Eligible Free (K-12)`); */ SELECT `School Name` FROM frpm ORDER BY `Percent (%) Eligible Free (K-12)` DESC LIMIT 1 /* Answer the following: What is the name of the county with the most number of students enrolled in grades K-12? most number of students enrolled in grades K-12 refers to MAX(`Enrollment (K-12)`); */ SELECT `County Name` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest number of students who scored 1500 or more on the SAT? highest number of students who scored 1500 or more on the SAT refers to MAX(NumGE1500); */ SELECT sname FROM satscores ORDER BY NumGE1500 DESC LIMIT 1 /* Answer the following: What is the name of the school with the lowest average SAT score in math? lowest average SAT score in math refers to MIN(AvgScrMath); */ SELECT sname FROM satscores ORDER BY AvgScrMath ASC LIMIT 1 /* Answer the following: What is the name of the school with the highest number of students who took the SAT? highest number of students who took the SAT refers to MAX(NumTstTakr); */ SELECT sname FROM satscores ORDER BY NumTstTakr DESC LIMIT 1 /* Answer the following: What is the name of the school with the lowest number of students who scored 1500 or more on the SAT? lowest number of students who scored 1500 or more on the SAT refers to MIN(NumGE1500); */ SELECT sname FROM satscores ORDER BY NumGE1500 ASC LIMIT 1 /* Answer the following: What is the name of the school with the highest average SAT score in writing? highest average SAT score in writing refers to MAX(AvgScrWrite); */ SELECT sname FROM satscores ORDER BY AvgScrWrite DESC LIMIT 1
SELECT T1.AdmFName1, T1.AdmLName1, T1.AdmFName2, T1.AdmLName2, T1.AdmFName3, T1.AdmLName3 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.NumGE1500 DESC LIMIT 1
SELECT T2.Street, T2.City, T2.Zip, T2.State FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY (T1.NumGE1500 / T1.NumTstTakr) ASC LIMIT 1
SELECT T1.Website FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Los Angeles' AND T2.NumTstTakr BETWEEN 2000 AND 3000
SELECT AVG(T2.NumTstTakr) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Fresno' AND STRFTIME('%Y', T1.OpenDate) = '1980'
SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'Fresno Unified' ORDER BY T2.AvgScrRead ASC LIMIT 1
SELECT T1.School, T2.AvgScrRead FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' ORDER BY T2.AvgScrRead DESC LIMIT 5 /* Answer the following: Which schools have the highest percentage of students eligible for free meals? highest percentage of students eligible for free meals refers to MAX(`Percent (%) Eligible Free (K-12)`) */ SELECT T1.`School Name`, T2.`Percent (%) Eligible Free (K-12)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Percent (%) Eligible Free (K-12)` DESC LIMIT 1 /* Answer the following: Which schools have the highest average math scores and are located in the county of 'Los Angeles'? highest average math scores refers to MAX(AvgScrMath); county of 'Los Angeles' refers to County = 'Los Angeles' */ SELECT T1.School, T2.AvgScrMath FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Los Angeles' ORDER BY T2.AvgScrMath DESC LIMIT 1 /* Answer the following: Which schools have the highest average writing scores and are not charter schools? highest average writing scores refers to MAX(AvgScrWrite); not charter schools refers to Charter = 0 */ SELECT T1.School, T2.AvgScrWrite FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Charter = 0 ORDER BY T2.AvgScrWrite DESC LIMIT 1 /* Answer the following: Which schools have the highest enrollment and are located in the city of 'San Francisco'? highest enrollment refers to MAX(enroll12); city of 'San Francisco' refers to City = 'San Francisco' */ SELECT T1.School, T2.enroll12 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.City = 'San Francisco' ORDER BY T2.enroll12 DESC LIMIT 1 /* Answer the following: Which schools have the highest number of test takers and are located in the state of 'CA'? highest number of test takers refers to MAX(NumTstTakr); state of 'CA' refers to State = 'CA' */ SELECT T1.School, T2.NumTstTakr FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.State = 'CA' ORDER BY T2.NumTstTakr DESC LIMIT 1
SELECT EILName FROM schools WHERE CDSCode = ( SELECT cds FROM satscores ORDER BY AvgScrMath DESC LIMIT 1 )
SELECT s.School, s.County, AVG(satscores.AvgScrMath) AS AvgMathScore FROM schools AS s INNER JOIN satscores ON s.CDSCode = satscores.cds GROUP BY s.School, s.County HAVING (AVG(satscores.AvgScrRead) + AVG(satscores.AvgScrMath) + AVG(satscores.AvgScrWrite)) = (SELECT MIN(AvgScrRead + AvgScrMath + AvgScrWrite) FROM satscores) LIMIT 1;
SELECT AvgScrWrite, City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = ( SELECT MAX(NumGE1500) FROM satscores )
SELECT T2.School, AVG(T1.AvgScrWrite) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich' GROUP BY T2.School
SELECT School, `Enrollment (K-12)` FROM frpm WHERE `District Type` = 'State Special Schools' ORDER BY `Enrollment (K-12)` DESC LIMIT 1 /* Answer the following: Which school has the highest average SAT score in reading? */ SELECT sname, AvgScrRead FROM satscores ORDER BY AvgScrRead DESC LIMIT 1 /* Answer the following: Which school has the highest number of students who scored 1500 or more on the SAT? */ SELECT sname, NumGE1500 FROM satscores ORDER BY NumGE1500 DESC LIMIT 1 /* Answer the following: Which school has the highest percentage of students eligible for free meals? */ SELECT `School Name`, `Percent (%) Eligible Free (K-12)` FROM frpm ORDER BY `Percent (%) Eligible Free (K-12)` DESC LIMIT 1 /* Answer the following: Which school has the highest enrollment of students aged 5-17? */ SELECT `School Name`, `Enrollment (Ages 5-17)` FROM frpm ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 1 /* Answer the following: Which school has the highest number of students who took the SAT? */ SELECT sname, NumTstTakr FROM satscores ORDER BY NumTstTakr DESC LIMIT 1 /* Answer the following: Which school has the highest average SAT score in math? */ SELECT sname, AvgScrMath FROM satscores ORDER BY AvgScrMath DESC LIMIT 1 /* Answer the following: Which school has the highest average SAT score in writing? */ SELECT sname, AvgScrWrite FROM satscores ORDER BY AvgScrWrite DESC LIMIT 1 /* Answer the following: Which school has the highest percentage of students eligible for free or reduced-price meals? */ SELECT `School Name`, `Percent (%) Eligible FRPM (K-12)` FROM frpm ORDER BY `Percent (%) Eligible FRPM (K-12)` DESC LIMIT 1 /* Answer the following: Which school has the highest number of students eligible for free or reduced-price meals? */ SELECT `School Name`, `FRPM Count (K-12)` FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1
SELECT COUNT(*)/12 AS Monthly_Average FROM schools WHERE strftime('%Y', OpenDate) = '1980' AND County = 'Alameda' AND DOC = '52'
SELECT (SELECT COUNT(*) FROM schools WHERE DOC = 54 AND County = 'Orange') / (SELECT COUNT(*) FROM schools WHERE DOC = 52 AND County = 'Orange') AS ratio FROM schools LIMIT 1
SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1
SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 5, 1
SELECT T1.MailStreet, T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead ASC LIMIT 1
SELECT COUNT(DISTINCT s.CDSCode) FROM satscores AS sat INNER JOIN schools AS s ON sat.cds = s.CDSCode WHERE (sat.AvgScrRead + sat.AvgScrMath + sat.AvgScrWrite) >= 1500 AND s.MailCity = 'Lakeport'
SELECT SUM(T2.NumTstTakr) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Fresno'
SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'
SELECT CAST(COUNT(CASE WHEN County = 'Colusa' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN County = 'Humboldt' THEN 1 ELSE NULL END) FROM schools WHERE MailState = 'California'
SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND StatusType = 'Active' AND County = 'San Joaquin'
SELECT Phone, Ext FROM schools WHERE CDSCode = ( SELECT cds FROM satscores ORDER BY AvgScrWrite DESC LIMIT 332, 1 )
SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704'
SELECT Website FROM schools WHERE AdmFName1 = 'Mike' AND AdmLName1 = 'Larson' OR AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez' OR AdmFName3 = 'Dante' AND AdmLName3 = 'Alvarez'
SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin'
SELECT COUNT(CDSCode) FROM schools WHERE City = 'Hickman' AND DOC = 52 AND Charter = 1
SELECT COUNT(DISTINCT s.CDSCode) FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.Charter = 0 AND s.County = 'Los Angeles' AND (f.`Free Meal Count (K-12)` * 100 / f.`Enrollment (K-12)`) < 0.18
SELECT AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'
SELECT CAST(SUM(CASE WHEN FundingType = 'Locally Funded' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(FundingType) FROM schools WHERE County = 'Santa Clara'
SELECT COUNT(*) FROM schools WHERE OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus' AND FundingType = 'Directly Funded'
SELECT COUNT(DISTINCT CDSCode) FROM schools WHERE DOCType = 'Community College District' AND ClosedDate LIKE '1989%' AND City = 'San Francisco'
SELECT County FROM schools WHERE STRFTIME('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND SOC = '11' GROUP BY County ORDER BY COUNT(CDSCode) DESC LIMIT 1
SELECT NCESSchool FROM schools WHERE SOC = '31'
SELECT COUNT(DISTINCT CDSCode) FROM schools WHERE County = 'Alpine' AND DOCType = 'District Community Day School' AND (StatusType = 'Active' OR StatusType = 'Closed')
SELECT `District Code` FROM frpm WHERE CDSCode IN ( SELECT CDSCode FROM schools WHERE City = 'Fresno' AND Magnet = 0 )
SELECT `Enrollment (Ages 5-17)` FROM frpm WHERE `Academic Year` = '2014-2015' AND `School Name` = 'State Special School' AND `City` = 'Fremont' AND `EdOpsCode` = 'SSS'
SELECT `FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.School = 'Youth Authority School' AND T2.MailStreet = 'PO Box 1040'
SELECT `Low Grade` FROM frpm WHERE `District Type` = 'SPECON' AND NCESDist = '613360'
SELECT T1.`School Name`, T1.`Educational Option Type` FROM frpm AS T1 WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = '37'
SELECT City FROM schools WHERE CDSCode IN ( SELECT CDSCode FROM frpm WHERE `Low Grade` = '9' AND `High Grade` = '12' AND `NSLP Provision Status` = '2' AND `County Name` = 'Merced' ) AND EILCode = 'HS'
SELECT T1.School, (T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) * 100 AS 'Percent (%) Eligible FRPM (Ages 5-17)' FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T1.GSoffered = 'K-9'
SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1
SELECT County, COUNT(*) as NumberOfSchools FROM schools WHERE Virtual = 'F' AND (County = 'San Diego' OR County = 'Santa Barbara') GROUP BY County ORDER BY NumberOfSchools DESC LIMIT 1
SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1
SELECT City, School, `Low Grade` FROM schools WHERE State = 'CA' ORDER BY Latitude ASC LIMIT 1
SELECT GSoffered FROM schools ORDER BY Longitude DESC LIMIT 1
SELECT City, COUNT(School) FROM schools WHERE Magnet = 1 AND GSoffered = 'K-8' GROUP BY City /* Answer the following: What is the average SAT score for reading, math, and writing for each district? */ SELECT dname, AVG(AvgScrRead), AVG(AvgScrMath), AVG(AvgScrWrite) FROM satscores GROUP BY dname /* Answer the following: How many students are eligible for free meals in each county? */ SELECT `County Name`, SUM(`Free Meal Count (K-12)`) FROM frpm GROUP BY `County Name` /* Answer the following: What is the total number of students enrolled in each school type? */ SELECT `School Type`, SUM(`Enrollment (K-12)`) FROM frpm GROUP BY `School Type` /* Answer the following: How many schools in each district have a charter school? */ SELECT `District Name`, COUNT(`Charter School (Y/N)`) FROM frpm WHERE `Charter School (Y/N)` = 1 GROUP BY `District Name` /* Answer the following: What is the average percentage of students eligible for free meals in each county? */ SELECT `County Name`, AVG(`Percent (%) Eligible Free (K-12)`) FROM frpm GROUP BY `County Name`
SELECT AdmFName1, District, COUNT(*) as count FROM schools GROUP BY AdmFName1, District ORDER BY count DESC LIMIT 2 /* Answer the following: What is the average SAT score for each district? */ SELECT dname, AVG((AvgScrRead + AvgScrMath + AvgScrWrite)/3) as AvgSATScore FROM satscores GROUP BY dname /* Answer the following: Which school has the highest percentage of students eligible for free meals? */ SELECT `School Name`, `Percent (%) Eligible Free (K-12)` FROM frpm ORDER BY `Percent (%) Eligible Free (K-12)` DESC LIMIT 1 /* Answer the following: What is the average number of students taking the SAT in each district? */ SELECT dname, AVG(NumTstTakr) as AvgNumTstTakr FROM satscores GROUP BY dname /* Answer the following: Which district has the highest average SAT score? */ SELECT dname, AVG((AvgScrRead + AvgScrMath + AvgScrWrite)/3) as AvgSATScore FROM satscores GROUP BY dname ORDER BY AvgSATScore DESC LIMIT 1 /* Answer the following: What is the average percentage of students eligible for free meals in each district? */ SELECT `District Name`, AVG(`Percent (%) Eligible Free (K-12)`) as AvgPercentEligibleFree FROM frpm GROUP BY `District Name`
SELECT `District Code`, (`Free Meal Count (K-12)` / `Enrollment (K-12)`) * 100 AS `Percent (%) Eligible Free (K-12)` FROM frpm WHERE CDSCode IN (SELECT CDSCode FROM schools WHERE AdmFName1 = 'Alusine')
SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '40'
SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = '62' OR DOC = '54')
SELECT T1.sname, T1.AdmEmail1 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1;
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN card AS T4 ON T3.disp_id = T4.disp_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.A3 = 'east Bohemia'
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'Prague'
SELECT IIF(AVG(A12) > AVG(A13), '1995', '1996') FROM district
SELECT COUNT(DISTINCT T1.district_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 > 6000 AND T2.A11 < 10000
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000 /* Answer the following: How many male customers have a credit card? Male means that gender = 'M'; */ SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'M' /* Answer the following: How many male customers have a loan? Male means that gender = 'M'; */ SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' /* Answer the following: How many male customers have made a withdrawal in cash? Male means that gender = 'M'; operation refers to withdrawal in cash. */ SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T3.operation = 'Withdrawal in cash' /* Answer the following: How many male customers have a loan and a credit card? Male means that gender = 'M'; */ SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'M' /* Answer the following: How many male customers have made a withdrawal in cash and have a loan? Male means that gender = 'M'; operation refers to withdrawal in cash. */ SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T1.gender = 'M' AND T3.operation = 'Withdrawal in cash'
SELECT T1.account_id, MIN(T3.A11) AS "Lowest Average Salary", (SELECT MAX(A11) FROM district) - MIN(T3.A11) AS "Salary Gap" FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T2.gender = 'F' GROUP BY T1.account_id ORDER BY T2.birth_date DESC LIMIT 1
SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.birth_date = ( SELECT MAX(birth_date) FROM client ) AND T4.A11 = ( SELECT MAX(A11) FROM district )
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'
SELECT T1.client_id, T1.gender, T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T2.type = 'Disponent' AND T3.frequency = 'POPLATEK PO OBRATU'
SELECT T1.account_id, T1.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount ASC LIMIT 1
SELECT T1.account_id, T1.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND STRFTIME('%Y', T2.date) = '1993' ORDER BY T1.amount DESC LIMIT 1
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T4.A2 = 'Sokolov'
SELECT account_id FROM account WHERE date = ( SELECT MIN(date) FROM account WHERE STRFTIME('%Y', date) = '1995' )
SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.amount > 3000
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'
SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'
SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'
SELECT MAX(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN trans AS T4 ON T2.account_id = T4.account_id WHERE T1.issued = '1996-10-21'
SELECT T3.gender FROM client AS T3 INNER JOIN disp AS T2 ON T3.client_id = T2.client_id INNER JOIN account AS T1 ON T2.account_id = T1.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T4.A11 = ( SELECT MAX(A11) FROM district ) ORDER BY T3.birth_date ASC LIMIT 1
SELECT T5.amount FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN account AS T4 ON T3.account_id = T4.account_id INNER JOIN trans AS T5 ON T4.account_id = T5.account_id WHERE T3.amount = ( SELECT MAX(amount) FROM loan ) ORDER BY T5.date ASC LIMIT 1
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A2 = 'Jesenik' AND T1.gender = 'F'
SELECT T1.disp_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 5100 AND STRFTIME('%Y-%m-%d', T2.date) = '1998-09-02'
SELECT COUNT(account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Litomerice' AND STRFTIME('%Y', account.date) = '1996'
SELECT DISTINCT T4.A2 FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'
SELECT T3.birth_date FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.amount = 98832 AND T1.date = '1996-01-03'
SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND T2.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia')
SELECT (CAST((SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1998-12-27') AS REAL) - (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1993-03-22')) / (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1993-03-22') * 100 AS increase_rate FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1)
SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan /* Answer the following: What is the percentage of transactions that are withdrawal in cash? withdrawal in cash refers to operation = 'withdrawal in cash'; percentage = divide(count(operation) where operation = 'withdrawal in cash', count(operation)) * 100% */ SELECT CAST(SUM(CASE WHEN operation = 'withdrawal in cash' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(operation) FROM trans /* Answer the following: What is the percentage of clients who have a credit card? have a credit card refers to type = 'credit'; percentage = divide(count(client_id) where type = 'credit', count(client_id)) * 100% */ SELECT CAST(SUM(CASE WHEN type = 'credit' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(client_id) FROM disp /* Answer the following: What is the percentage of accounts that have a loan? have a loan refers to account_id in loan table; percentage = divide(count(account_id) in loan table, count(account_id) in account table) * 100% */ SELECT CAST((SELECT COUNT(DISTINCT account_id) FROM loan) AS REAL) * 100 / COUNT(account_id) FROM account /* Answer the following: What is the percentage of orders that are household? household refers to k_symbol = 'household'; percentage = divide(count(order_id) where k_symbol = 'household', count(order_id)) * 100% */ SELECT CAST(SUM(CASE WHEN k_symbol = 'household' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(order_id) FROM `order`
SELECT CAST(SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM loan WHERE amount < 100000 /* Answer the following: Among all the clients who have a credit card, what is the percentage of clients who are female? Female refers to gender = 'F'; percentage = Divide (Count(gender = 'F'), Count(gender)) * 100 */ SELECT CAST(SUM(CASE WHEN gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card)) /* Answer the following: Among all the transactions made in 1996, what is the percentage of transactions that were withdrawal in cash? Withdrawal in cash refers to operation = 'VYBER'; in 1996 refers to Cast(date AS DATE) = 1996; percentage = Divide (Count(operation = 'VYBER'), Count(operation)) * 100 */ SELECT CAST(SUM(CASE WHEN operation = 'VYBER' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM trans WHERE STRFTIME('%Y', date) = '1996' /* Answer the following: Among all the orders placed by accounts in district 1, what is the percentage of orders that were for insurance payment? Insurance payment refers to k_symbol = 'POJISTNE'; in district 1 refers to district_id = 1; percentage = Divide (Count(k_symbol = 'POJISTNE'), Count(k_symbol)) * 100 */ SELECT CAST(SUM(CASE WHEN k_symbol = 'POJISTNE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `order` WHERE account_id IN (SELECT account_id FROM account WHERE district_id = 1) /* Answer the following: Among all the clients who were born in 1970, what is the percentage of clients who have a credit card? Born in 1970 refers to Cast(birth_date AS DATE) = 1970; percentage = Divide (Count(client_id in card), Count(client_id)) * 100 */ SELECT CAST(SUM(CASE WHEN client_id IN (SELECT client_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card)) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client WHERE STRFTIME('%Y', birth_date) = '1970'
SELECT DISTINCT T1.account_id, T4.A2 AS district_name, T4.A3 AS district_region FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE strftime('%Y', T1.date) = '1993' AND T1.frequency = 'POPLATEK PO OBRATU'
SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN 1995 AND 2000
SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'
SELECT T2.A2 AS District, T2.A3 AS Region FROM loan AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.loan_id = 4990 /* Answer the following: What is the gender and birth date of the client who has the card ID '1234'? */ SELECT T2.gender, T2.birth_date FROM card AS T1 INNER JOIN client AS T2 ON T1.disp_id = T2.client_id WHERE T1.card_id = 1234 /* Answer the following: What is the amount and date of the transaction with trans ID '5678'? */ SELECT T1.amount, T1.date FROM trans AS T1 WHERE T1.trans_id = 5678 /* Answer the following: What is the type and status of the loan with loan ID '7890'? */ SELECT T1.type, T1.status FROM loan AS T1 WHERE T1.loan_id = 7890 /* Answer the following: What is the frequency and date of the account with account ID '9012'? */ SELECT T1.frequency, T1.date FROM account AS T1 WHERE T1.account_id = 9012 /* Answer the following: What is the bank and amount of the order with order ID '3456'? */ SELECT T1.bank_to, T1.amount FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the type and operation of the transaction with trans ID '7890'? */ SELECT T1.type, T1.operation FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and district of the client with client ID '1234'? */ SELECT T1.gender, T2.A2 AS District FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the bank and k_symbol of the order with order ID '3456'? */ SELECT T1.bank_to, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and k_symbol of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.k_symbol FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the frequency and district of the account with account ID '1234'? */ SELECT T1.frequency, T2.A2 AS District FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 1234 /* Answer the following: What is the type and client of the disp with disp ID '5678'? */ SELECT T1.type, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.disp_id = 5678 /* Answer the following: What is the payments and status of the loan with loan ID '9012'? */ SELECT T1.payments, T1.status FROM loan AS T1 WHERE T1.loan_id = 9012 /* Answer the following: What is the amount and k_symbol of the order with order ID '3456'? */ SELECT T1.amount, T1.k_symbol FROM `order` AS T1 WHERE T1.order_id = 3456 /* Answer the following: What is the balance and bank of the transaction with trans ID '7890'? */ SELECT T1.balance, T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the gender and birth date of the client with client ID '1234'? */ SELECT T1.gender, T1.birth_date FROM client AS T1 WHERE T1.client_id = 1234 /* Answer the following: What is the type and issued date of the card with card ID '5678'? */ SELECT T1.type, T1.issued FROM card AS T1 WHERE T1.card_id = 5678 /* Answer the following: What is the amount and duration of the loan with loan ID '9012'? */ SELECT T1.amount, T1.duration
SELECT T1.account_id, T2.A2 AS district, T2.A3 AS region FROM loan AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.amount > 300000
SELECT T1.loan_id, T3.A3 AS district, T3.A11 AS average_salary FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 60
SELECT district.A2 AS district, district.A3 AS state, ((district.A13 - district.A12) / district.A12) * 100 AS unemployment_rate_increment FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'D'
SELECT CAST(SUM(CASE WHEN T2.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) = '1993'
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'
SELECT district.A2, COUNT(client.client_id) AS female_account_holders FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE client.gender = 'F' GROUP BY district.A2 ORDER BY female_account_holders DESC LIMIT 10
SELECT DISTRICT.A2, TRANS.amount FROM TRANS INNER JOIN ACCOUNT ON TRANS.account_id = ACCOUNT.account_id INNER JOIN DISTRICT ON ACCOUNT.district_id = DISTRICT.district_id WHERE TRANS.type = 'VYDAJ' AND STRFTIME('%Y-%m', TRANS.date) = '1996-01' ORDER BY TRANS.amount DESC LIMIT 10
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id LEFT JOIN disp AS T3 ON T1.account_id = T3.account_id LEFT JOIN card AS T4 ON T3.disp_id = T4.disp_id WHERE T2.A3 = 'South Bohemia' AND T4.card_id IS NULL
SELECT A3 FROM district WHERE district_id = ( SELECT district_id FROM account WHERE account_id = ( SELECT account_id FROM loan WHERE status IN ('C', 'D') GROUP BY account_id ORDER BY COUNT(loan_id) DESC LIMIT 1 ) )
SELECT AVG(T3.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'
SELECT A2 AS district_name, A3 AS branch_location FROM district WHERE A13 = ( SELECT MAX(A13) FROM district WHERE A13 IS NOT NULL )
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1 )
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN trans AS T4 ON T1.account_id = T4.account_id WHERE T1.frequency = 'POPLATEK MESICNE' AND T4.operation = 'VYBER KARTOU' AND T4.balance < 0
SELECT COUNT(T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.amount >= 250000 AND T2.frequency = 'POPLATEK MESICNE' AND T1.status = 'A'
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A2 = 'Branch location 1' AND (T2.status = 'C' OR T2.status = 'D')
SELECT COUNT(T3.gender) FROM district AS T1 INNER JOIN disp AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.A15 = (SELECT MAX(A15) FROM district WHERE A15 < (SELECT MAX(A15) FROM district)) AND T3.gender = 'M'
SELECT COUNT(DISTINCT T2.card_id) FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'disponent' AND T2.type = 'gold'
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A2 = 'Pisek' )
SELECT DISTINCT T4.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T4 ON T2.district_id = T4.district_id WHERE T1.amount > 10000 AND STRFTIME('%Y', T1.date) = '1997'
SELECT account_id FROM `order` WHERE k_symbol = 'SIPO' AND bank_to = 'Pisek'
SELECT T1.account_id FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T2.type IN ('gold', 'junior') GROUP BY T1.account_id HAVING COUNT(DISTINCT T2.type) = 2
SELECT AVG(T1.amount) FROM trans AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.disp_id WHERE T1.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T1.date) = '2021' AND STRFTIME('%m', T1.date) = '01'
SELECT T1.account_id FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T1.date) = '1998' GROUP BY T1.account_id HAVING AVG(T1.amount) < (SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND STRFTIME('%Y', date) = '1998')
SELECT T3.client_id, T3.gender FROM client AS T3 INNER JOIN disp AS T2 ON T3.client_id = T2.client_id INNER JOIN card AS T1 ON T2.disp_id = T1.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T3.gender = 'F'
SELECT COUNT(DISTINCT T2.account_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'F' AND T3.A3 = 'south Bohemia'
SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.A2 = 'Tabor' AND T3.type = 'OWNER'
SELECT DISTINCT T1.type FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id LEFT JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.account_id IS NULL AND T2.A11 > 8000 AND T2.A11 <= 9000
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'North Bohemia' AND T3.bank = 'AB'
SELECT DISTINCT T2.A2 FROM trans AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.type = 'VYDAJ'
SELECT T1.A3, AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A15 > 4000 AND YEAR(T2.date) >= 1997 GROUP BY T1.A3 /* Answer the following: List the clients who have a loan and a credit card. */ SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id /* Answer the following: What is the total amount of transactions made by clients who have a loan? */ SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id /* Answer the following: List the clients who have made a transaction with a bank that is not their own. */ SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank != T2.account_id /* Answer the following: What is the total amount of loans given to clients who have a credit card? */ SELECT SUM(T1.amount) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id /* Answer the following: List the clients who have a loan and have made a transaction of more than 5000. */ SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T3.amount > 5000 /* Answer the following: What is the total amount of transactions made by clients who have a loan and a credit card? */ SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id /* Answer the following: List the clients who have a loan and have made a transaction of more than 5000 in a bank that is not their own. */ SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T3.amount > 5000 AND T3.bank != T2.account_id
SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M'
SELECT CAST(SUM(CASE WHEN type = 'Gold' AND STRFTIME('%Y', issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM card;
SELECT T3.gender, T3.birth_date FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T2.type = 'OWNER' ORDER BY T1.amount DESC LIMIT 1
SELECT A15 FROM district WHERE district_id = ( SELECT district_id FROM account WHERE account_id = 532 )
SELECT T1.district_id FROM account AS T1 INNER JOIN `order` AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 33333
SELECT T1.trans_id, T1.date, T1.amount, T1.balance FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 3356 AND T1.operation = 'VYBER'
SELECT COUNT(*) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.amount < 200000
SELECT T2.type FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.client_id = 13539
SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541
SELECT T.A3 FROM ( SELECT T1.A3, COUNT(DISTINCT T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'A' GROUP BY T1.A3 ) T ORDER BY COUNT(DISTINCT T2.account_id) DESC LIMIT 1
SELECT T2.client_id FROM `order` AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 32423
SELECT * FROM trans WHERE account_id IN ( SELECT account_id FROM account WHERE district_id = 5 )
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A3 = 'Jesenik' )
SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T3.issued >= '1997-01-01'
SELECT CAST(SUM(IIF(T1.gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A11 > 10000
SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', T2.date) = '1997' THEN T2.amount ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.date) = '1996' THEN T2.amount ELSE 0 END)) / SUM(CASE WHEN strftime('%Y', T2.date) = '1996' THEN T2.amount ELSE 0 END) FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'M' AND strftime('%Y', T2.date) BETWEEN '1996' AND '1997'
SELECT COUNT(trans_id) FROM trans WHERE operation = 'VYBER KARTOU' AND STRFTIME('%Y', date) > '1995'
SELECT (SELECT A16 FROM district WHERE A3 = 'North Bohemia') - (SELECT A16 FROM district WHERE A3 = 'East Bohemia') AS difference_in_crimes FROM district WHERE A3 IN ('North Bohemia', 'East Bohemia') AND date LIKE '1996%'
SELECT type, COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 GROUP BY type
SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.amount = 3539
SELECT T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.account_id = 130
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'
SELECT T1.amount, T2.status FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 992 /* Answer the following: What is the total amount of transactions made by client number 123? */ SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 123 /* Answer the following: What is the total amount of loans taken by client number 456? */ SELECT SUM(T1.amount) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 456 /* Answer the following: What is the total amount of orders made by client number 789? */ SELECT SUM(T1.amount) FROM `order` AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 789 /* Answer the following: What is the gender and birth date of the client with the card number 321? */ SELECT T1.gender, T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.card_id = 321 /* Answer the following: What is the type of card and the date it was issued for the client with the client number 654? */ SELECT T1.type, T1.issued FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 654
SELECT T1.balance, T3.gender FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.trans_id = 851 AND T3.client_id = 4 /* Answer the following: What is the total amount of loan that account number 5 has? */ SELECT SUM(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id = 5 /* Answer the following: What is the type of card that client number 6 has? */ SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 6 /* Answer the following: What is the total amount of orders that account number 7 has made? */ SELECT SUM(T1.amount) FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id = 7 /* Answer the following: What is the total amount of transactions that account number 8 has made? */ SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id = 8 /* Answer the following: What is the status of the loan that account number 9 has? */ SELECT T1.status FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id = 9 /* Answer the following: What is the frequency of account number 10? */ SELECT T1.frequency FROM account AS T1 WHERE T1.account_id = 10
SELECT T2.type FROM client AS T1 INNER JOIN card AS T2 ON T1.client_id = T2.disp_id WHERE T1.client_id = 9
SELECT SUM(T2.amount) FROM client AS T1 INNER JOIN trans AS T2 ON T1.client_id = T2.account_id WHERE T1.client_id = 617 AND STRFTIME('%Y', T2.date) = '1998'
SELECT client.client_id, client.birth_date, district.A3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A3 = 'East Bohemia'
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3 /* Answer the following: Please provide the IDs of the 3 male clients with the smallest loans. Male refers to gender = 'M' */ SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' ORDER BY T3.amount ASC LIMIT 3 /* Answer the following: Please provide the IDs of the 3 clients with the most transactions. */ SELECT T1.client_id, COUNT(T3.trans_id) AS transaction_count FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id GROUP BY T1.client_id ORDER BY transaction_count DESC LIMIT 3 /* Answer the following: Please provide the IDs of the 3 clients with the least transactions. */ SELECT T1.client_id, COUNT(T3.trans_id) AS transaction_count FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id GROUP BY T1.client_id ORDER BY transaction_count ASC LIMIT 3 /* Answer the following: Please provide the IDs of the 3 clients with the highest balance. */ SELECT T1.client_id, MAX(T3.balance) AS max_balance FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id GROUP BY T1.client_id ORDER BY max_balance DESC LIMIT 3 /* Answer the following: Please provide the IDs of the 3 clients with the lowest balance. */ SELECT T1.client_id, MIN(T3.balance) AS min_balance FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id GROUP BY T1.client_id ORDER BY min_balance ASC LIMIT 3
SELECT COUNT(DISTINCT client.client_id) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN trans ON account.account_id = trans.account_id WHERE client.gender = 'M' AND STRFTIME('%Y', client.birth_date) BETWEEN '1974' AND '1976' AND trans.amount > 4000 AND trans.k_symbol = 'SIPO'
SELECT COUNT(account_id) FROM account AS a INNER JOIN district AS d ON a.district_id = d.district_id WHERE d.A3 = 'Beroun' AND STRFTIME('%Y', a.date) > '1996'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'
SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender) FROM account AS T1 INNER JOIN client AS T2 ON T1.account_id = T2.client_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'
SELECT CAST(SUM(CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.account_id) AS percentage FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK TYDNE'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE' AND T2.type = 'USER'
SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration > 24 AND T1.date < '1997-01-01' ORDER BY T2.amount ASC LIMIT 1
SELECT account_id FROM account WHERE client_id IN (SELECT client_id FROM client WHERE gender = 'F' AND birth_date = (SELECT MAX(birth_date) FROM client WHERE gender = 'F')) AND district_id IN (SELECT district_id FROM district WHERE A11 = (SELECT MIN(A11) FROM district))
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE strftime('%Y', T1.birth_date) LIKE '192%' AND T2.A3 = 'east Bohemia'
SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE'
SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.status IN ('C', 'D') AND T2.k_symbol = 'POPLATEK PO OBRATU'
SELECT T1.client_id, T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'OWNER'
SELECT T1.client_id, DATE_PART('year', AGE(T1.birth_date)) AS age FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T3.type = 'gold'
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'cl'
SELECT AVG(CASE WHEN T1.element = 'O' THEN 1 ELSE 0 END) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+'
SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element = 'na'
SELECT molecule_id FROM molecule WHERE label = '+' AND molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '#' )
SELECT CAST(SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '='
SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#'
SELECT COUNT(atom_id) FROM atom WHERE element != 'br'
SELECT COUNT(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'
SELECT molecule_id FROM atom WHERE element = 'si'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'
SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = 'double'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1
SELECT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'Te'
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.label = '-'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1
SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE (T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20') OR (T1.atom_id = 'TR004_20' AND T1.atom_id2 = 'TR004_8')
SELECT label FROM molecule WHERE molecule_id NOT IN ( SELECT molecule_id FROM atom WHERE element = 'sn' )
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element IN ('i', 's') AND b.bond_type = '-'
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'
SELECT T4.atom_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.atom_id = T3.atom_id INNER JOIN atom AS T4 ON T3.atom_id2 = T4.atom_id WHERE T1.molecule_id = 'TR181'
SELECT CAST(SUM(CASE WHEN T2.element != 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T1.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T2.molecule_id = T4.molecule_id WHERE T4.molecule_id = 'TR001' AND T3.bond_id = 'TR001_2_6'
SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS diff FROM molecule
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5'
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' ORDER BY T1.label ASC LIMIT 5
SELECT CAST(SUM(CASE WHEN T2.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR008'
SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) FROM molecule
SELECT CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom_id) AS percentage FROM atom WHERE molecule_id = 'TR206'
SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000'
SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'
SELECT T2.bond_type, T3.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T1.molecule_id = 'TR018' GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_type) DESC LIMIT 1
SELECT T4.label FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T1.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T2.molecule_id = T4.molecule_id WHERE T3.bond_type = 'single' AND T4.label != 'carcinogenic' GROUP BY T4.label ORDER BY T4.label ASC LIMIT 3
SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR006' ORDER BY T2.bond_type ASC LIMIT 2
SELECT COUNT(DISTINCT T1.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND (T2.atom_id = 'TR009_12' OR T2.atom_id2 = 'TR009_12')
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'br'
SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9'
SELECT T1.molecule_id, CASE WHEN T2.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS Carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'
SELECT COUNT(bond_id) FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19'
SELECT element FROM atom WHERE molecule_id = 'TR004'
SELECT COUNT(molecule_id) FROM molecule WHERE label = '-'
SELECT molecule_id FROM molecule WHERE label = '+' AND molecule_id IN (SELECT molecule_id FROM atom WHERE SUBSTRING(atom_id, 7, 2) BETWEEN 21 AND 25)
SELECT T3.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN atom AS T4 ON T2.atom_id2 = T4.atom_id WHERE (T1.element = 'P' AND T4.element = 'N') OR (T1.element = 'N' AND T4.element = 'P')
SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END AS IsCarcinogenic FROM molecule AS T1 INNER JOIN ( SELECT molecule_id, COUNT(bond_id) AS double_bond_count FROM bond WHERE bond_type = '=' GROUP BY molecule_id ORDER BY double_bond_count DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id
SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'I'
SELECT T2.bond_type, T2.bond_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45 AND T2.bond_type IN (' = ', '-', '#')
SELECT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id FROM connected )
SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T3.bond_type = '#' AND T4.label = 'TR447'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR144_8_19'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '=' GROUP BY T1.label ORDER BY COUNT(T2.bond_type) DESC LIMIT 1
SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1
SELECT atom_id2 FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE element = 'pb' )
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#'
SELECT CAST(COUNT(T2.bond_id) AS REAL) * 100 / (SELECT COUNT(T2.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id GROUP BY T1.element, T2.atom_id2 HAVING COUNT(T2.bond_id) = (SELECT MAX(counts) FROM (SELECT COUNT(T2.bond_id) AS counts FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id GROUP BY T1.element, T2.atom_id2))) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id GROUP BY T1.element, T2.atom_id2 HAVING COUNT(T2.bond_id) = (SELECT MAX(counts) FROM (SELECT COUNT(T2.bond_id) AS counts FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id GROUP BY T1.element, T2.atom_id2))
SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
SELECT COUNT(atom_id) FROM atom WHERE element IN ('c', 'h')
SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'
SELECT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'sn'
SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')
SELECT T2.bond_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT T3.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.bond_type = '-' AND T3.label = '-'
SELECT CAST(SUM(CASE WHEN atom.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom.atom_id) AS percentage FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-'
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')
SELECT molecule_id FROM molecule WHERE label = '-'
SELECT COUNT(molecule_id) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030'
SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_10_11'
SELECT COUNT(DISTINCT bond_id) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'i'
SELECT CASE WHEN SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.label = '-' THEN 1 ELSE 0 END) THEN 'Carcinogenic' ELSE 'Non Carcinogenic' END FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'Ca'
SELECT CASE WHEN COUNT(DISTINCT T1.element) = 2 THEN 'yes' ELSE 'no' END AS yn FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_8' AND T1.element IN ('cl', 'c')
SELECT molecule_id FROM ( SELECT molecule_id, COUNT(*) AS triple_bond_count FROM bond WHERE bond_type = '#' GROUP BY molecule_id ) AS T1 INNER JOIN atom ON T1.molecule_id = atom.molecule_id INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'c' AND molecule.label = '-' GROUP BY molecule_id HAVING COUNT(*) = 2 LIMIT 2
SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR001'
SELECT molecule_id FROM bond WHERE bond_type = '='
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR005_16_26' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.label = '-'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_10_11'
SELECT T1.bond_id, CASE WHEN T2.label = '+' THEN 'Carcinogenic' WHEN T2.label = '-' THEN 'Non-carcinogenic' END AS Carcinogenic FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
SELECT T1.element, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, 7, 1) = '4' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') GROUP BY T1.element
SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.element), T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'
SELECT m.label FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE a.element = 'Ca'
SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.element = 'Te'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_10_11'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id
SELECT CAST(SUM(CASE WHEN T2.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR047'
SELECT CASE WHEN T1.label = '+' THEN 'yes' ELSE 'no' END AS yn FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_1'
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS Carcinogenic FROM molecule WHERE molecule_id = 'TR151'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR151' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT COUNT(molecule_id) FROM molecule WHERE label = '+'
SELECT atom_id FROM atom WHERE element = 'C' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE CAST(SUBSTR(molecule_id, 3) AS INTEGER) BETWEEN 10 AND 50)
SELECT COUNT(atom_id) FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' )
SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.bond_id = T3.bond_id WHERE T2.label = '+' AND T1.bond_type = '='
SELECT COUNT(atom_id) FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) AND element = 'H'
SELECT T2.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.atom_id = 'TR00_1' AND T3.bond_id = 'TR00_1_2'
SELECT atom_id FROM atom WHERE element = 'c' AND molecule_id NOT IN ( SELECT molecule_id FROM molecule WHERE label != '-' )
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END FROM molecule WHERE molecule_id = 'TR124'
SELECT atom_id, element FROM atom WHERE molecule_id = 'TR186'
SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR007_4_19' OR T2.atom_id2 = 'TR007_4_19'
SELECT CASE WHEN T1.element = 'cl' THEN 'Chlorine' WHEN T1.element = 'c' THEN 'Carbon' WHEN T1.element = 'h' THEN 'Hydrogen' WHEN T1.element = 'o' THEN 'Oxygen' WHEN T1.element = 's' THEN 'Sulfur' WHEN T1.element = 'n' THEN 'Nitrogen' WHEN T1.element = 'p' THEN 'Phosphorus' WHEN T1.element = 'na' THEN 'Sodium' WHEN T1.element = 'br' THEN 'Bromine' WHEN T1.element = 'f' THEN 'Fluorine' WHEN T1.element = 'i' THEN 'Iodine' WHEN T1.element = 'sn' THEN 'Tin' WHEN T1.element = 'pb' THEN 'Lead' WHEN T1.element = 'te' THEN 'Tellurium' WHEN T1.element = 'ca' THEN 'Calcium' END AS 'Element' FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'
SELECT COUNT(T2.bond_id) AS DoubleBonds, T3.label AS Carcinogenic FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T1.molecule_id = 'TR006' AND T2.bond_type = ' = '
SELECT T1.molecule_id, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
SELECT T4.label, T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T3.bond_type = '#' GROUP BY T4.label, T1.element
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_2_3'
SELECT COUNT(bond_id) FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'cl' )
SELECT T1.atom_id, COUNT(DISTINCT T3.bond_type) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.label = 'TR346' GROUP BY T1.atom_id
SELECT COUNT(DISTINCT T1.molecule_id), COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 LEFT JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN connected c ON a.atom_id = c.atom_id LEFT JOIN bond b ON c.bond_id = b.bond_id WHERE a.element != 's' AND b.bond_type != '='
SELECT T4.label FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T1.bond_id = 'TR001_2_4' AND T4.label = '+'
SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR005'
SELECT COUNT(bond_id) FROM bond WHERE bond_type = '-'
SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '+'
SELECT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'Cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'
SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'
SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'
SELECT T3.label FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'
SELECT element FROM atom WHERE atom_id = 'TR000_1'
SELECT CASE WHEN label = '+' THEN 'Yes' WHEN label = '-' THEN 'No' END isCarcinogenic FROM molecule WHERE molecule_id = 'TR000'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'
SELECT T4.label FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 'S' AND T3.bond_type = '='
SELECT T1.molecule_id, T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '=' AND T1.molecule_id = 'TR024'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T4.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 'h' AND T3.bond_type = '#'
SELECT COUNT(molecule_id) FROM molecule WHERE label = '+'
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.molecule_id BETWEEN 'TR004' AND 'TR010'
SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'
SELECT COUNT(DISTINCT molecule_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE element = 'o' AND bond_type = ' = '
SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'
SELECT T1.element, T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.molecule_id = 'TR016'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'C' AND T3.bond_type = '=' AND T1.molecule_id = 'TR012'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'
SELECT name FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT name FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL)
SELECT name FROM cards WHERE faceConvertedManaCost = ( SELECT MAX(faceConvertedManaCost) FROM cards ) /* Answer the following: What is the name of the card with the highest edhrec rank? highest edhrec rank refers to MAX(edhrecRank); */ SELECT name FROM cards WHERE edhrecRank = ( SELECT MAX(edhrecRank) FROM cards ) /* Answer the following: List the card names that are only available in foil. only available in foil refers to isFoilOnly = 1; */ SELECT name FROM cards WHERE isFoilOnly = 1 /* Answer the following: What is the name of the card with the highest power? highest power refers to MAX(power); */ SELECT name FROM cards WHERE power = ( SELECT MAX(power) FROM cards ) /* Answer the following: List the card names that are part of the 'Zendikar' set. part of the 'Zendikar' set refers to setCode = 'ZEN'; */ SELECT name FROM cards WHERE setCode = 'ZEN' /* Answer the following: What is the name of the card with the longest text? longest text refers to MAX(LENGTH(text)); */ SELECT name FROM cards WHERE LENGTH(text) = ( SELECT MAX(LENGTH(text)) FROM cards )
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100
SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'
SELECT T1.name, T2.status AS vintage_status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.types = 'Artifact' AND T1.side IS NULL AND T2.format = 'vintage'
SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE (T1.power = '*' OR T1.power IS NULL) AND T2.format = 'commander' AND T2.status = 'Legal'
SELECT T1.name, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'
SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T2.uuid ORDER BY COUNT(T2.uuid) DESC LIMIT 1
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = '29'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'
SELECT CAST(SUM(CASE WHEN T1.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid
SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'
SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd'
SELECT keywords FROM cards WHERE name = 'Angel of Mercy'
SELECT COUNT(id) FROM cards WHERE power = '*'
SELECT promoTypes FROM cards WHERE name = 'Duress'
SELECT borderColor FROM cards WHERE name = 'Ancestor's Chosen' /* Answer the following: What is the status of card "Ancestor's Chosen" in the format "Commander"? "Ancestor's Chosen" is the name of card and "Commander" is the format; */ SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Ancestor's Chosen') AND format = 'Commander' /* Answer the following: What is the release date of the set that includes card "Ancestor's Chosen"? "Ancestor's Chosen" is the name of card; */ SELECT releaseDate FROM sets WHERE code = (SELECT setCode FROM cards WHERE name = 'Ancestor's Chosen') /* Answer the following: What is the text of the ruling for card "Ancestor's Chosen"? "Ancestor's Chosen" is the name of card; */ SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Ancestor's Chosen') /* Answer the following: What is the translation of the set that includes card "Ancestor's Chosen" in the language "French"? "Ancestor's Chosen" is the name of card and "French" is the language; */ SELECT translation FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Ancestor's Chosen') AND language = 'French'
SELECT originalType FROM cards WHERE name = 'Ancestor's Chosen' /* Answer the following: What are the legalities of the card with the UUID 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a'? UUID 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a' refers to uuid; legalities refers to format and status */ SELECT format, status FROM legalities WHERE uuid = 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a' /* Answer the following: What is the text of the ruling made on '2004-10-04' for the card with the UUID 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a'? '2004-10-04' refers to date; text of the ruling refers to text */ SELECT text FROM rulings WHERE date = '2004-10-04' AND uuid = 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a' /* Answer the following: What is the French translation of the set that the card with the UUID 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a' belongs to? French translation refers to language = 'French' and translation; UUID 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a' refers to uuid; set refers to setCode */ SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.uuid = 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a' AND T2.language = 'French' /* Answer the following: What is the name of the card with the UUID 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a' in German? German refers to language = 'German'; name of the card refers to name; UUID 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a' refers to uuid */ SELECT name FROM foreign_data WHERE uuid = 'a6b5ed85-9c9b-4b34-8b34-7b257f42885a' AND language = 'German'
SELECT T3.language FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T1.name = 'Angel of Mercy' GROUP BY T3.language
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'restricted' AND T1.isTextless = 0
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'
SELECT COUNT(cards.id) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1
SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'
SELECT type FROM cards WHERE name = 'Benalish Knight'
SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'
SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'
SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1 /* Answer the following: How many cards are legal in the "Commander" format? "Commander" is the format; legal refers to status = 'Legal' */ SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Commander' AND T2.status = 'Legal' /* Answer the following: How many cards from the set "Throne of Eldraine" are banned in any format? "Throne of Eldraine" is the set name; banned refers to status = 'Banned' */ SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T2.name = 'Throne of Eldraine' AND T3.status = 'Banned' /* Answer the following: How many cards have rulings made in 2020? 2020 refers to rulings date between '2020-01-01' and '2020-12-31' */ SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T2.date BETWEEN '2020-01-01' AND '2020-12-31'
SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'
SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1
SELECT COUNT(id) FROM cards WHERE toughness = '99'
SELECT name FROM cards WHERE artist = 'Aaron Boyd'
SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'
SELECT id FROM cards WHERE convertedManaCost = 0
SELECT layout FROM cards WHERE keywords LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL /* Answer the following: How many cards are there in each language? */ SELECT language, COUNT(*) FROM foreign_data GROUP BY language /* Answer the following: What are the cards that are legal in the 'Standard' format? */ SELECT uuid FROM legalities WHERE format = 'Standard' AND status = 'Legal' /* Answer the following: What are the sets that are only available online? */ SELECT code FROM sets WHERE isOnlineOnly = 1 /* Answer the following: What are the rulings for the card with uuid 'abcd1234'? */ SELECT text FROM rulings WHERE uuid = 'abcd1234' /* Answer the following: What are the translations for the set with code 'XYZ'? */ SELECT language, translation FROM set_translations WHERE setCode = 'XYZ'
SELECT id FROM cards WHERE duelDeck = 'a'
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'
SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'
SELECT T1.uuid, T2.language FROM legalities AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.format = 'legacy'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'
SELECT COUNT(T1.id), T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'legal'
SELECT T1.name, T1.colors FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.code = 'OGW'
SELECT T1.name, T2.language, T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.setCode = '10E' AND T1.convertedManaCost = 5
SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'
SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'
SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3;
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NULL /* Answer the following: How many cards are there in the set with code 'DOM'? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints and are not promo? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, and are not online only? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, and are not oversized? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, and are not reserved? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, and are not textless? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, and are not timeshifted? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, and are not full art? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, and are not alternative? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, and are not starter? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, and are not story spotlight? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, and do not have a content warning? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, and do not have an alternative deck limit? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, and do not have foil? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, and do not have non-foil? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, and do not have a hand? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, and do not have a life? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, and do not have a loyalty? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, and do not have a power? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, and do not have a toughness? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, do not have a toughness, and do not have a watermark? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL AND watermark IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, do not have a toughness, do not have a watermark, and do not have a side? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL AND watermark IS NULL AND side IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, do not have a toughness, do not have a watermark, do not have a side, and do not have a face name? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL AND watermark IS NULL AND side IS NULL AND faceName IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, do not have a toughness, do not have a watermark, do not have a side, do not have a face name, and do not have a flavor name? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL AND watermark IS NULL AND side IS NULL AND faceName IS NULL AND flavorName IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, do not have a toughness, do not have a watermark, do not have a side, do not have a face name, do not have a flavor name, and do not have a face converted mana cost? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL AND watermark IS NULL AND side IS NULL AND faceName IS NULL AND flavorName IS NULL AND faceConvertedManaCost IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, do not have a toughness, do not have a watermark, do not have a side, do not have a face name, do not have a flavor name, do not have a face converted mana cost, and do not have a duel deck? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL AND watermark IS NULL AND side IS NULL AND faceName IS NULL AND flavorName IS NULL AND faceConvertedManaCost IS NULL AND duelDeck IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, do not have a toughness, do not have a watermark, do not have a side, do not have a face name, do not have a flavor name, do not have a face converted mana cost, do not have a duel deck, and do not have a color indicator? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL AND watermark IS NULL AND side IS NULL AND faceName IS NULL AND flavorName IS NULL AND faceConvertedManaCost IS NULL AND duelDeck IS NULL AND colorIndicator IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, do not have a toughness, do not have a watermark, do not have a side, do not have a face name, do not have a flavor name, do not have a face converted mana cost, do not have a duel deck, do not have a color indicator, and do not have a color identity? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL AND watermark IS NULL AND side IS NULL AND faceName IS NULL AND flavorName IS NULL AND faceConvertedManaCost IS NULL AND duelDeck IS NULL AND colorIndicator IS NULL AND colorIdentity IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, do not have a toughness, do not have a watermark, do not have a side, do not have a face name, do not have a flavor name, do not have a face converted mana cost, do not have a duel deck, do not have a color indicator, do not have a color identity, and do not have a border color? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL AND watermark IS NULL AND side IS NULL AND faceName IS NULL AND flavorName IS NULL AND faceConvertedManaCost IS NULL AND duelDeck IS NULL AND colorIndicator IS NULL AND colorIdentity IS NULL AND borderColor IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted, are not full art, are not alternative, are not starter, are not story spotlight, do not have a content warning, do not have an alternative deck limit, do not have foil, do not have non-foil, do not have a hand, do not have a life, do not have a loyalty, do not have a power, do not have a toughness, do not have a watermark, do not have a side, do not have a face name, do not have a flavor name, do not have a face converted mana cost, do not have a duel deck, do not have a color indicator, do not have a color identity, do not have a border color, and do not have an availability? */ SELECT COUNT(*) FROM cards WHERE setCode = 'DOM' AND isReprint = 0 AND isPromo = 0 AND isOnlineOnly = 0 AND isOversized = 0 AND isReserved = 0 AND isTextless = 0 AND isTimeshifted = 0 AND isFullArt = 0 AND isAlternative = 0 AND isStarter = 0 AND isStorySpotlight = 0 AND hasContentWarning = 0 AND hasAlternativeDeckLimit = 0 AND hasFoil = 0 AND hasNonFoil = 0 AND hand IS NULL AND life IS NULL AND loyalty IS NULL AND power IS NULL AND toughness IS NULL AND watermark IS NULL AND side IS NULL AND faceName IS NULL AND flavorName IS NULL AND faceConvertedManaCost IS NULL AND duelDeck IS NULL AND colorIndicator IS NULL AND colorIdentity IS NULL AND borderColor IS NULL AND availability IS NULL /* Answer the following: How many cards are there in the set with code 'DOM' that are not reprints, are not promo, are not online only, are not oversized, are not reserved, are not textless, are not timeshifted
SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(id) FROM cards WHERE artist LIKE 'UDON' AND availability LIKE '%mtgo%' AND hand = '-1'
SELECT COUNT(id) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1
SELECT name, manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND (availability = 'paper' OR availability = 'mtgo')
SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander'
SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena'
SELECT setCode FROM set_translations WHERE language = 'Spanish'
SELECT CAST(COUNT(hand) AS REAL) * 100 / ( SELECT COUNT(hand) FROM cards WHERE frameEffects = 'legendary' ) FROM cards WHERE frameEffects = 'legendary' AND hand = '+3' /* Answer the following: How many cards have a converted mana cost of 5 and are part of the 'Ixalan' set? converted mana cost of 5 refers to convertedManaCost = 5; part of the 'Ixalan' set refers to setCode = 'XLN' */ SELECT COUNT(*) FROM cards WHERE convertedManaCost = 5 AND setCode = 'XLN' /* Answer the following: What is the average edhrecRank of cards that are not reprints? not reprints refers to isReprint = 0; average edhrecRank refers to AVG(edhrecRank) */ SELECT AVG(edhrecRank) FROM cards WHERE isReprint = 0 /* Answer the following: How many unique artists have contributed to the 'Throne of Eldraine' set? unique artists refers to DISTINCT(artist); 'Throne of Eldraine' set refers to setCode = 'ELD' */ SELECT COUNT(DISTINCT(artist)) FROM cards WHERE setCode = 'ELD' /* Answer the following: What is the most common color identity among cards in the 'Zendikar Rising' set? most common color identity refers to MAX(COUNT(colorIdentity)); 'Zendikar Rising' set refers to setCode = 'ZNR' */ SELECT colorIdentity FROM cards WHERE setCode = 'ZNR' GROUP BY colorIdentity ORDER BY COUNT(colorIdentity) DESC LIMIT 1 /* Answer the following: What is the total base set size of all sets that are not online only? not online only refers to isOnlineOnly = 0; total base set size refers to SUM(baseSetSize) */ SELECT SUM(baseSetSize) FROM sets WHERE isOnlineOnly = 0 /* Answer the following: How many rulings have been made for cards in the 'Core Set 2021' set? rulings for cards in the 'Core Set 2021' set refers to uuid from cards where setCode = 'M21' */ SELECT COUNT(*) FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE setCode = 'M21')
SELECT id, CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN isStorySpotlight = 1 THEN 1 ELSE 0 END) AS percentage FROM cards GROUP BY id /* Answer the following: What is the ratio of cards that are Full Art and also have a text box? Full Art cards that also have a text box refers to isFullArt = 1 and isTextless = 0; Ratio refer to DIVIDE(SUM(count(id) where isFullArt = 1 and isTextless = 0), SUM(count(id) where isFullArt = 1)) */ SELECT CAST(SUM(CASE WHEN isFullArt = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN isFullArt = 1 THEN 1 ELSE 0 END) AS ratio FROM cards /* Answer the following: What is the percentage of cards that are Reprint and also have a text box? Reprint cards that also have a text box refers to isReprint = 1 and isTextless = 0; Percentage refer to DIVIDE(SUM(count(id) where isReprint = 1 and isTextless = 0), SUM(count(id) where isReprint = 1)) * 100 */ SELECT CAST(SUM(CASE WHEN isReprint = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN isReprint = 1 THEN 1 ELSE 0 END) AS percentage FROM cards /* Answer the following: What is the ratio of cards that are Promo and also have a text box? Promo cards that also have a text box refers to isPromo = 1 and isTextless = 0; Ratio refer to DIVIDE(SUM(count(id) where isPromo = 1 and isTextless = 0), SUM(count(id) where isPromo = 1)) */ SELECT CAST(SUM(CASE WHEN isPromo = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN isPromo = 1 THEN 1 ELSE 0 END) AS ratio FROM cards /* Answer the following: What is the percentage of cards that are Reserved and also have a text box? Reserved cards that also have a text box refers to isReserved = 1 and isTextless = 0; Percentage refer to DIVIDE(SUM(count(id) where isReserved = 1 and isTextless = 0), SUM(count(id) where isReserved = 1)) * 100 */ SELECT CAST(SUM(CASE WHEN isReserved = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN isReserved = 1 THEN 1 ELSE 0 END) AS percentage FROM cards /* Answer the following: What is the ratio of cards that are Starter and also have a text box? Starter cards that also have a text box refers to isStarter = 1 and isTextless = 0; Ratio refer to DIVIDE(SUM(count(id) where isStarter = 1 and isTextless = 0), SUM(count(id) where isStarter = 1)) */ SELECT CAST(SUM(CASE WHEN isStarter = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN isStarter = 1 THEN 1 ELSE 0 END) AS ratio FROM cards
SELECT CAST(SUM(CASE WHEN T1.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage, T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309
SELECT COUNT(setCode) FROM set_translations WHERE language = 'Portuguese (Brasil)' AND setCode IN ( SELECT code FROM sets WHERE block = 'Commander' )
SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'legal' AND T1.types LIKE '%Creature%'
SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'pre-modern' AND T3.text = 'This is a triggered mana ability' AND T1.side IS NULL
SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper' AND uuid IN ( SELECT uuid FROM legalities WHERE format = 'pauper' )
SELECT artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.text = 'Das perfekte Gegenmittel zu einer dichten Formation'
SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist LIKE 'Matthew D. Wilson' AND T1.type LIKE 'Creature' AND T1.layout LIKE 'normal' AND T1.borderColor LIKE 'black' AND T2.language LIKE 'French'
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10'
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 180 AND T1.block = 'Ravnica'
SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal'
SELECT CAST(SUM(CASE WHEN T2.language = 'French' AND (T1.power IS NULL OR T1.power = '*') THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.power IS NULL OR T1.power = '*' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
SELECT CAST(SUM(CASE WHEN T1.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese'
SELECT availability FROM cards WHERE artist = 'Daren Bader'
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000 /* Answer the following: How many cards have a converted mana cost of 5 and are not reprints? converted mana cost of 5 refers to convertedManaCost = 5; not reprints refers to isReprint = 0 */ SELECT COUNT(*) FROM cards WHERE convertedManaCost = 5 AND isReprint = 0 /* Answer the following: How many cards have been released in sets that are online only? online only sets refers to isOnlineOnly = 1 */ SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.isOnlineOnly = 1 /* Answer the following: How many cards have a power greater than 5 and are not full art? power greater than 5 refers to power > 5; not full art refers to isFullArt = 0 */ SELECT COUNT(*) FROM cards WHERE power > 5 AND isFullArt = 0 /* Answer the following: How many cards have a toughness less than 3 and are not textless? toughness less than 3 refers to toughness < 3; not textless refers to isTextless = 0 */ SELECT COUNT(*) FROM cards WHERE toughness < 3 AND isTextless = 0 /* Answer the following: How many cards have been released in sets that are not foil only and have a base set size greater than 200? not foil only sets refers to isFoilOnly = 0; base set size greater than 200 refers to baseSetSize > 200 */ SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.isFoilOnly = 0 AND sets.baseSetSize > 200 /* Answer the following: How many cards have a converted mana cost of 3, are not reprints and have been released in sets that are not online only? converted mana cost of 3 refers to convertedManaCost = 3; not reprints refers to isReprint = 0; not online only sets refers to isOnlineOnly = 0 */ SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.convertedManaCost = 3 AND cards.isReprint = 0 AND sets.isOnlineOnly = 0 /* Answer the following: How many cards have a power greater than 4, are not full art and have been released in sets that are not foil only? power greater than 4 refers to power > 4; not full art refers to isFullArt = 0; not foil only sets refers to isFoilOnly = 0 */ SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.power > 4 AND cards.isFullArt = 0 AND sets.isFoilOnly = 0 /* Answer the following: How many cards have a toughness less than 2, are not textless and have been released in sets that are not online only? toughness less than 2 refers to toughness < 2; not textless refers to isTextless = 0; not online only sets refers to isOnlineOnly = 0 */ SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.toughness < 2 AND cards.isTextless = 0 AND sets.isOnlineOnly = 0 /* Answer the following: How many cards have a converted mana cost of 2, are not reprints, have a power greater than 3 and have been released in sets that are not foil only? converted mana cost of 2 refers to convertedManaCost = 2; not reprints refers to isReprint = 0; power greater than 3 refers to power > 3; not foil only sets refers to isFoilOnly = 0 */ SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.convertedManaCost = 2 AND cards.isReprint = 0 AND cards.power > 3 AND sets.isFoilOnly = 0
SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1 /* Answer the following: What are the names of the cards that are not available in foil? not available in foil refers to hasFoil = 0; names of the cards refers to name */ SELECT name FROM cards WHERE hasFoil = 0 /* Answer the following: What are the different formats and their status for card with uuid 'abcd'? different formats and their status refers to format and status */ SELECT format, status FROM legalities WHERE uuid = 'abcd' /* Answer the following: What are the translations for set with code 'xyz'? translations for set refers to translation */ SELECT translation FROM set_translations WHERE setCode = 'xyz' /* Answer the following: What are the rulings for card with uuid 'abcd'? rulings for card refers to text */ SELECT text FROM rulings WHERE uuid = 'abcd' /* Answer the following: What are the names of the cards that are part of the set with code 'xyz'? part of the set refers to setCode = 'xyz'; names of the cards refers to name */ SELECT name FROM cards WHERE setCode = 'xyz' /* Answer the following: How many cards are part of the set with code 'xyz'? part of the set refers to setCode = 'xyz' */ SELECT COUNT(id) FROM cards WHERE setCode = 'xyz' /* Answer the following: What are the names of the cards that are available in both foil and non-foil? available in both foil and non-foil refers to hasFoil = 1 and hasNonFoil = 1; names of the cards refers to name */ SELECT name FROM cards WHERE hasFoil = 1 AND hasNonFoil = 1 /* Answer the following: What are the names of the cards that are available only in foil? available only in foil refers to hasFoil = 1 and hasNonFoil = 0; names of the cards refers to name */ SELECT name FROM cards WHERE hasFoil = 1 AND hasNonFoil = 0 /* Answer the following: What are the names of the cards that are not available in foil but available in non-foil? not available in foil but available in non-foil refers to hasFoil = 0 and hasNonFoil = 1; names of the cards refers to name */ SELECT name FROM cards WHERE hasFoil = 0 AND hasNonFoil = 1
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3 /* Answer the following: List all the cards that are legal in the 'Commander' format. legal in the 'Commander' format refers to format = 'Commander' and status = 'Legal' */ SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Commander' AND T2.status = 'Legal' /* Answer the following: What are the names of the cards that have been ruled on the date '2020-07-03'? ruled on the date '2020-07-03' refers to date = '2020-07-03' */ SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T2.date = '2020-07-03' /* Answer the following: List all the cards that are part of the set with the code 'M21'. part of the set with the code 'M21' refers to setCode = 'M21' */ SELECT name FROM cards WHERE setCode = 'M21' /* Answer the following: What are the names of the cards that have the subtype 'Human' and 'Wizard'? subtype 'Human' and 'Wizard' refers to subtypes LIKE '%Human%' AND subtypes LIKE '%Wizard%' */ SELECT name FROM cards WHERE subtypes LIKE '%Human%' AND subtypes LIKE '%Wizard%'
SELECT language FROM foreign_data WHERE multiverseid = 149934 /* Answer the following: What is the status of the card with the uuid 'a0a5a3a9-9b42-41c0-9f7e-5e6132ed2ef9' in the format 'Modern'? uuid 'a0a5a3a9-9b42-41c0-9f7e-5e6132ed2ef9' refers to uuid = 'a0a5a3a9-9b42-41c0-9f7e-5e6132ed2ef9'; format 'Modern' refers to format = 'Modern' */ SELECT status FROM legalities WHERE uuid = 'a0a5a3a9-9b42-41c0-9f7e-5e6132ed2ef9' AND format = 'Modern' /* Answer the following: What is the release date of the set with the code 'DOM'? code 'DOM' refers to code = 'DOM' */ SELECT releaseDate FROM sets WHERE code = 'DOM' /* Answer the following: What is the translation of the set with the code 'DOM' in the language 'French'? code 'DOM' refers to setCode = 'DOM'; language 'French' refers to language = 'French' */ SELECT translation FROM set_translations WHERE setCode = 'DOM' AND language = 'French' /* Answer the following: What is the ruling text of the card with the uuid 'a0a5a3a9-9b42-41c0-9f7e-5e6132ed2ef9'? uuid 'a0a5a3a9-9b42-41c0-9f7e-5e6132ed2ef9' refers to uuid = 'a0a5a3a9-9b42-41c0-9f7e-5e6132ed2ef9' */ SELECT text FROM rulings WHERE uuid = 'a0a5a3a9-9b42-41c0-9f7e-5e6132ed2ef9'
SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3
SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(isTextless) FROM cards
SELECT T1.number FROM cards AS T1 WHERE T1.otherFaceIds IS NULL AND T1.subtypes LIKE '%Angel%' AND T1.subtypes LIKE '%Wizard%'
SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3 /* Answer the following: Please list all the cards that are not available in foil. not available in foil refers to hasFoil = 0 */ SELECT name FROM cards WHERE hasFoil = 0 /* Answer the following: Please list all the cards that are not legal in the 'Standard' format. not legal in the 'Standard' format refers to format = 'Standard' and status != 'Legal' */ SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'Standard' AND legalities.status != 'Legal' /* Answer the following: Please list all the cards that have no rulings. have no rulings refers to uuid not in rulings */ SELECT name FROM cards WHERE uuid NOT IN (SELECT uuid FROM rulings) /* Answer the following: Please list all the cards that have no foreign data. have no foreign data refers to uuid not in foreign_data */ SELECT name FROM cards WHERE uuid NOT IN (SELECT uuid FROM foreign_data)
SELECT language FROM set_translations WHERE setCode = ( SELECT code FROM sets WHERE mcmName = 'Archenemy' AND code = 'ARC' )
SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 5
SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 206
SELECT T1.id, T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.block = 'Shadowmoor' ORDER BY T1.code ASC LIMIT 2
SELECT T1.id FROM sets AS T1 INNER JOIN foreign_data AS T2 ON T1.code = T2.uuid WHERE T1.isForeignOnly = 1 AND T1.isFoilOnly = 1 AND T2.language = 'Japanese'
SELECT T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' ORDER BY T1.baseSetSize DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.isOnlineOnly = 1 AND T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.isOnlineOnly) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')
SELECT id FROM cards WHERE borderColor = 'black'
SELECT id FROM cards WHERE frameEffects = 'extendedart'
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.setCode WHERE T1.id = 174
SELECT name FROM sets WHERE code = 'ALL'
SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar' /* Answer the following: What is the status of the card with uuid 'a0a5a3a3-8f85-4c9b-9d8a-93b76fd8c20c' in the 'modern' format? uuid 'a0a5a3a3-8f85-4c9b-9d8a-93b76fd8c20c' refers to uuid = 'a0a5a3a3-8f85-4c9b-9d8a-93b76fd8c20c' and 'modern' format refers to format = 'modern' */ SELECT status FROM legalities WHERE uuid = 'a0a5a3a3-8f85-4c9b-9d8a-93b76fd8c20c' AND format = 'modern' /* Answer the following: What is the release date of the set with code 'DOM'? set with code 'DOM' refers to code = 'DOM' */ SELECT releaseDate FROM sets WHERE code = 'DOM' /* Answer the following: What is the Spanish translation of the set with code 'DOM'? Spanish translation refers to language = 'Spanish' and set with code 'DOM' refers to setCode = 'DOM' */ SELECT translation FROM set_translations WHERE language = 'Spanish' AND setCode = 'DOM' /* Answer the following: What is the ruling text for the card with uuid 'a0a5a3a3-8f85-4c9b-9d8a-93b76fd8c20c'? card with uuid 'a0a5a3a3-8f85-4c9b-9d8a-93b76fd8c20c' refers to uuid = 'a0a5a3a3-8f85-4c9b-9d8a-93b76fd8c20c' */ SELECT text FROM rulings WHERE uuid = 'a0a5a3a3-8f85-4c9b-9d8a-93b76fd8c20c'
SELECT setCode FROM sets WHERE releaseDate = '2007-07-13'
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage')
SELECT setCode FROM sets WHERE type = 'expansion'
SELECT T2.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'boros'
SELECT T2.language, T2.flavorText, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie'
SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Abyssal Horror'
SELECT setCode FROM sets WHERE type = 'expansion' AND name LIKE '%Commander%'
SELECT T2.name, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan'
SELECT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'azorius'
SELECT COUNT(id) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'
SELECT name FROM cards WHERE isTextless = 0
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen'
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL)
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle'
SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%'
SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3
SELECT T4.translation FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode INNER JOIN foreign_data AS T4 ON T1.uuid = T4.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T4.language = 'Italian'
SELECT COUNT(T3.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T1.name = 'Angel of Mercy'
SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T3.translation = 'Hauptset Zehnte Edition'
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor's Chosen' AND T2.language = 'Korean'
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T3.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'
SELECT baseSetSize FROM sets WHERE code = ( SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' )
SELECT translation FROM set_translations WHERE setCode = ( SELECT code FROM sets WHERE name = 'Eighth Edition' ) AND language = 'Simplified Chinese'
SELECT T2.mtgoCode FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Angel of Mercy' AND T2.mtgoCode IS NOT NULL
SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Ancestor''s Chosen'
SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian'
SELECT T2.isForeignOnly FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Adarkar Valkyrie'
SELECT COUNT(DISTINCT T1.setCode) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 10 AND T2.translation IS NOT NULL
SELECT COUNT(id) FROM cards WHERE setCode = ( SELECT code FROM sets WHERE name = 'Coldsnap' ) AND borderColor = 'black'
SELECT name FROM cards WHERE setCode = ( SELECT code FROM sets WHERE name = 'Coldsnap' ) ORDER BY convertedManaCost DESC LIMIT 1
SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy')
SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.number = '4'
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL)
SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Italian' AND T1.name = 'Ancestor''s Chosen'
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL
SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'
SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setCode = T3.code INNER JOIN set_translations AS T4 ON T3.code = T4.setCode WHERE T3.name = 'Coldsnap' AND T4.language = 'Italian'
SELECT T3.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.name = 'Coldsnap' AND T3.language = 'Italian' ORDER BY T1.convertedManaCost DESC
SELECT rulings.date FROM rulings INNER JOIN cards ON rulings.uuid = cards.uuid WHERE cards.name = 'Reminisce'
SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'
SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId = T1.cardKingdomId AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'
SELECT code FROM sets WHERE releaseDate = '2017-07-14'
SELECT keyruneCode FROM sets WHERE code = 'PKHC'
SELECT mcmId FROM sets WHERE code = 'SS2'
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'
SELECT type FROM sets WHERE name LIKE 'From the Vault: Lore'
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'
SELECT T1.text, T2.hasContentWarning FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Jim Pavelec'
SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Evacuation'
SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Rinascita di Alara'
SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Huitième édition'
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T3.name = 'Tendo Ice Bridge' AND T2.language = 'French'
SELECT COUNT(T1.translation) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Salvat 2011' AND T1.translation IS NOT NULL
SELECT T4.translation FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T4 ON T2.code = T4.setCode WHERE T1.name = 'Fellwar Stone' AND T4.language = 'Japanese'
SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1
SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Ola de frío'
SELECT T2.type FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Samite Pilgrim'
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'World Championship Decks 2004' AND T1.convertedManaCost = 3
SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Mirrodin' AND T2.language = 'Chinese Simplified'
SELECT CAST(SUM(CASE WHEN T1.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese'
SELECT CAST(SUM(CASE WHEN T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = 'Portuguese (Brazil)'
SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1
SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1 /* Answer the following: What is the name of the card with the highest edhrecRank? highest edhrecRank refers to MAX(edhrecRank); */ SELECT name FROM cards WHERE edhrecRank = ( SELECT MAX(edhrecRank) FROM cards ) /* Answer the following: What is the name of the set with the largest base set size? largest base set size refers to MAX(baseSetSize); */ SELECT name FROM sets WHERE baseSetSize = ( SELECT MAX(baseSetSize) FROM sets ) /* Answer the following: What is the text of the ruling with the most recent date? most recent date refers to MAX(date); */ SELECT text FROM rulings WHERE date = ( SELECT MAX(date) FROM rulings ) /* Answer the following: What is the name of the card with the highest power? highest power refers to MAX(power); */ SELECT name FROM cards WHERE power = ( SELECT MAX(power) FROM cards ) /* Answer the following: What is the name of the card with the highest toughness? highest toughness refers to MAX(toughness); */ SELECT name FROM cards WHERE toughness = ( SELECT MAX(toughness) FROM cards )
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(id) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a'
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1
SELECT T1.name, T1.convertedManaCost FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'duel' ORDER BY T1.convertedManaCost DESC LIMIT 10 /* Answer the following: What are the names of the cards that have been ruled on the most? ruled on the most refers to MAX(count(rulings)) */ SELECT T1.name, COUNT(T2.id) AS ruling_count FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name ORDER BY ruling_count DESC LIMIT 1 /* Answer the following: What are the names of the cards that have the most variations? the most variations refers to MAX(count(variations)) */ SELECT T1.name, COUNT(T1.variations) AS variation_count FROM cards AS T1 GROUP BY T1.name ORDER BY variation_count DESC LIMIT 1 /* Answer the following: What are the names of the cards that have the most printings? the most printings refers to MAX(count(printings)) */ SELECT T1.name, COUNT(T1.printings) AS printing_count FROM cards AS T1 GROUP BY T1.name ORDER BY printing_count DESC LIMIT 1 /* Answer the following: What are the names of the cards that have the most keywords? the most keywords refers to MAX(count(keywords)) */ SELECT T1.name, COUNT(T1.keywords) AS keyword_count FROM cards AS T1 GROUP BY T1.name ORDER BY keyword_count DESC LIMIT 1 /* Answer the following: What are the names of the cards that have the most types? the most types refers to MAX(count(types)) */ SELECT T1.name, COUNT(T1.types) AS type_count FROM cards AS T1 GROUP BY T1.name ORDER BY type_count DESC LIMIT 1 /* Answer the following: What are the names of the cards that have the most subtypes? the most subtypes refers to MAX(count(subtypes)) */ SELECT T1.name, COUNT(T1.subtypes) AS subtype_count FROM cards AS T1 GROUP BY T1.name ORDER BY subtype_count DESC LIMIT 1 /* Answer the following: What are the names of the cards that have the most supertypes? the most supertypes refers to MAX(count(supertypes)) */ SELECT T1.name, COUNT(T1.supertypes) AS supertype_count FROM cards AS T1 GROUP BY T1.name ORDER BY supertype_count DESC LIMIT 1 /* Answer the following: What are the names of the cards that have the most colors? the most colors refers to MAX(count(colors)) */ SELECT T1.name, COUNT(T1.colors) AS color_count FROM cards AS T1 GROUP BY T1.name ORDER BY color_count DESC LIMIT 1 /* Answer the following: What are the names of the cards that have the most color identities? the most color identities refers to MAX(count(colorIdentity)) */ SELECT T1.name, COUNT(T1.colorIdentity) AS color_identity_count FROM cards AS T1 GROUP BY T1.name ORDER BY color_identity_count DESC LIMIT 1
SELECT T1.originalReleaseDate, T3.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN formats AS T3 ON T2.format = T3.id WHERE T1.rarity = 'mythic' AND T2.status = 'legal' ORDER BY T1.originalReleaseDate ASC LIMIT 1
SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baga' AND T2.language = 'French'
SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'
SELECT T1.format, T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'banned' GROUP BY T1.format ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the card with the highest converted mana cost? highest converted mana cost refers to MAX(convertedManaCost) */ SELECT name FROM cards ORDER BY convertedManaCost DESC LIMIT 1 /* Answer the following: What is the name of the card with the highest edhrec rank? highest edhrec rank refers to MAX(edhrecRank) */ SELECT name FROM cards ORDER BY edhrecRank DESC LIMIT 1 /* Answer the following: What is the name of the card with the most printings? most printings refers to MAX(printings) */ SELECT name FROM cards ORDER BY LENGTH(printings) - LENGTH(REPLACE(printings, ',', '')) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most variations? most variations refers to MAX(variations) */ SELECT name FROM cards ORDER BY LENGTH(variations) - LENGTH(REPLACE(variations, ',', '')) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most keywords? most keywords refers to MAX(keywords) */ SELECT name FROM cards ORDER BY LENGTH(keywords) - LENGTH(REPLACE(keywords, ',', '')) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most rulings? most rulings refers to MAX(rulings) */ SELECT T2.name FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid GROUP BY T1.uuid ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most foreign data entries? most foreign data entries refers to MAX(foreign_data) */ SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid GROUP BY T1.uuid ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most legalities? most legalities refers to MAX(legalities) */ SELECT T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid GROUP BY T1.uuid ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most set translations? most set translations refers to MAX(set_translations) */ SELECT T2.name FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code GROUP BY T1.setCode ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most sets? most sets refers to MAX(sets) */ SELECT T2.name FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode GROUP BY T2.uuid ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Battlebond'
SELECT T1.artist, T3.format FROM cards AS T1 LEFT JOIN foreign_data AS T2 ON T1.uuid = T2.uuid LEFT JOIN legalities AS T3 ON T1.uuid = T3.uuid GROUP BY T1.artist ORDER BY COUNT(T1.artist) ASC LIMIT 1
SELECT T4.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T1.frameVersion = '1997' AND T1.artist = 'D. Alexander Gregory' AND T1.hasContentWarning = 1 AND T2.format = 'legacy'
SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'banned'
SELECT AVG(T1.id), T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE STRFTIME('%Y-%m-%d', T1.releaseDate) BETWEEN '2012-1-1' AND '2015-12-31' GROUP BY T2.language ORDER BY COUNT(T2.language) DESC LIMIT 1
SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'
SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'banned' OR status = 'restricted')
SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC
SELECT T1.name, T3.format FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T2.name = 'Hour of Devastation' AND T3.status = 'legal'
SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' ) AND code NOT IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )
SELECT T1.frameVersion, T1.name, T2.status FROM cards AS T1 LEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams' AND T2.status = 'banned'
SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1
SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014'
SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00'
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1
SELECT COUNT(*) FROM users WHERE Views > 10 AND STRFTIME('%Y', CreationDate) > '2013';
SELECT COUNT(Id) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' )
SELECT Title FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' )
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
SELECT T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie' ORDER BY T2.ViewCount DESC LIMIT 1 /* Answer the following: What is the name of the badge that was given to the user with the highest reputation? highest reputation refers to Max(Reputation) */ SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most comments? most comments refers to Max(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most votes? most votes refers to Max(Score) */ SELECT Title FROM posts ORDER BY Score DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most badges? most badges refers to COUNT(Id) in badges table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most links? most links refers to COUNT(Id) in postLinks table */ SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId GROUP BY T1.Title ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts? most posts refers to COUNT(Id) in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most comments? most comments refers to COUNT(Id) in comments table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most votes? most votes refers to COUNT(Id) in votes table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most upvotes? most upvotes refers to Max(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most downvotes? most downvotes refers to Max(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most views? most views refers to Max(Views) */ SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most favorite posts? most favorite posts refers to COUNT(FavoriteCount) in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.FavoriteCount) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most accepted answers? most accepted answers refers to COUNT(AcceptedAnswerId) in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.AcceptedAnswerId) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts with a score of 10 or more? posts with a score of 10 or more refers to Score >= 10 in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Score >= 10 GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts with a view count of 1000 or more? posts with a view count of 1000 or more refers to ViewCount >= 1000 in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ViewCount >= 1000 GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts with a comment count of 10 or more? posts with a comment count of 10 or more refers to CommentCount >= 10 in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.CommentCount >= 10 GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts with a favorite count of 10 or more? posts with a favorite count of 10 or more refers to FavoriteCount >= 10 in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount >= 10 GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts with an answer count of 10 or more? posts with an answer count of 10 or more refers to AnswerCount >= 10 in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.AnswerCount >= 10 GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts with a score of 10 or less? posts with a score of 10 or less refers to Score <= 10 in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Score <= 10 GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts with a view count of 1000 or less? posts with a view count of 1000 or less refers to ViewCount <= 1000 in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ViewCount <= 1000 GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts with a comment count of 10 or less? posts with a comment count of 10 or less refers to CommentCount <= 10 in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.CommentCount <= 10 GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts with a favorite count of 10 or less? posts with a favorite count of 10 or less refers to FavoriteCount <= 10 in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount <= 10 GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts with an answer count of 10 or less? posts with an answer count of 10 or less refers to AnswerCount <= 10 in posts table */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.AnswerCount <= 10 GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT T1.AnswerCount FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.AnswerCount DESC LIMIT 1
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL
SELECT DISTINCT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ClosedDate IS NOT NULL /* Answer the following: Please list the names of all the badges that were awarded to users who have made a comment on a post. */ SELECT DISTINCT T1.Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = T2.UserId /* Answer the following: Please list the display names of all the users who have voted on a post. */ SELECT DISTINCT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId /* Answer the following: Please list the display names of all the users who have edited a post. */ SELECT DISTINCT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId /* Answer the following: Please list the display names of all the users who have linked a post. */ SELECT DISTINCT T1.DisplayName FROM users AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId /* Answer the following: Please list the display names of all the users who have a post history. */ SELECT DISTINCT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId /* Answer the following: Please list the display names of all the users who have a tag. */ SELECT DISTINCT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN tags AS T3 ON T2.Id = T3.ExcerptPostId
SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score >= 20
SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'bayesian'
SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id ORDER BY T1.Count DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? Please give the display name of the user. most badges refers to MAX(count(Id)) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Which post has the most votes? Please give the title of the post. most votes refers to MAX(count(Id)) */ SELECT T2.Title FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most comments? Please give the display name of the user. most comments refers to MAX(count(Id)) */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Which post has the most links? Please give the title of the post. most links refers to MAX(count(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most posts? Please give the display name of the user. most posts refers to MAX(count(Id)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Which post has the most history? Please give the title of the post. most history refers to MAX(count(Id)) */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1
SELECT COUNT(Id) FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' )
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT COUNT(*) FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' ) AND STRFTIME('%Y', Date) = '2011'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the display name of the user who has made the most number of comments? who made the most number of comments refers to UserId with Max(Count(Id)) */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the display name of the user who has made the most number of posts? who made the most number of posts refers to OwnerUserId with Max(Count(Id)) */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most number of votes? who has the most number of votes refers to UserId with Max(Count(Id)) */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most reputation? who has the most reputation refers to Max(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most upvotes? who has the most upvotes refers to Max(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most downvotes? who has the most downvotes refers to Max(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1
SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200
SELECT CAST(SUM(CASE WHEN T2.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 20
SELECT COUNT(votes.Id) FROM votes WHERE UserId = 58 AND DATE(CreationDate) = '2010-07-19'
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1
SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'
SELECT T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId ORDER BY T2.Score DESC LIMIT 1;
SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910
SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 3025 AND T2.CreationDate = '2014-04-23 20:29:39'
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ParentId = 107829 AND T2.CommentCount = 1 /* Answer the following: List the names of the users who have written a post with a score of at least 100. score of at least 100 refers to Score >= 100 */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 100 /* Answer the following: Provide the names of the users who have received a badge named 'Great Answer'. badge named 'Great Answer' refers to Name = 'Great Answer' */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Great Answer' /* Answer the following: List the titles of the posts that have been linked to post id 12345. linked to post id 12345 refers to RelatedPostId = 12345 */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.RelatedPostId = 12345 /* Answer the following: Provide the names of the users who have voted for post id 67890. voted for post id 67890 refers to PostId = 67890 */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 67890 /* Answer the following: List the tags of the posts that have been edited by user id 34567. edited by user id 34567 refers to LastEditorUserId = 34567 */ SELECT T2.Tags FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.LastEditorUserId = 34567 /* Answer the following: Provide the text of the post history entries for post id 891011. post id 891011 refers to PostId = 891011 */ SELECT T1.Text FROM postHistory AS T1 WHERE T1.PostId = 891011 /* Answer the following: List the names of the users who have commented on post id 121314. commented on post id 121314 refers to PostId = 121314 */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 121314 /* Answer the following: Provide the names of the users who have received a badge on date '2020-01-01'. date '2020-01-01' refers to Date = '2020-01-01' */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2020-01-01'
SELECT CASE WHEN T1.ClosedDate IS NULL THEN 'No' ELSE 'Yes' END AS result FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 23853 AND T2.CreationDate = '2013-07-12 09:08:18.0'
SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041
SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Tiago Pasqualini'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347
SELECT COUNT(votes.Id) FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'DatEpicCoderGuyWhoPrograms'
SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(T2.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.OwnerUserId = T2.UserId WHERE T1.OwnerUserId = 24 AND T2.UserId = 24
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost'
SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'thank you user93!'
SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'
SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How does gentle boosting differ from AdaBoost?'
SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Necromancer' LIMIT 10
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data'
SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'
SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny'
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN postHistory AS T3 ON T1.Id = T3.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND T2.UserId = T3.UserId
SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'
SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T1.PostId = T3.Id WHERE T1.BountyAmount = 50 AND T3.Title LIKE '%variance%'
SELECT AVG(T1.ViewCount), T1.Title, T2.Text, T1.Score FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN postLinks AS T3 ON T1.Id = T3.PostId WHERE T1.Tags LIKE '%humor%'
SELECT COUNT(Id) FROM comments WHERE UserId = 13;
SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1
SELECT UserId FROM users ORDER BY Views ASC LIMIT 1
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND STRFTIME('%Y', Date) = '2011'
SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5 /* Answer the following: List the users who have posted more than 10 comments. more than 10 comments refers to COUNT(Text) > 10; users refers to UserId */ SELECT UserId FROM comments GROUP BY UserId HAVING COUNT(Text) > 10 /* Answer the following: Which posts have been edited more than 5 times? more than 5 times refers to COUNT(Text) > 5; posts refers to PostId */ SELECT PostId FROM postHistory GROUP BY PostId HAVING COUNT(Text) > 5 /* Answer the following: Which posts have more than 3 related posts? more than 3 related posts refers to COUNT(RelatedPostId) > 3; posts refers to PostId */ SELECT PostId FROM postLinks GROUP BY PostId HAVING COUNT(RelatedPostId) > 3 /* Answer the following: Which users have posted more than 20 posts? more than 20 posts refers to COUNT(Id) > 20; users refers to OwnerUserId */ SELECT OwnerUserId FROM posts GROUP BY OwnerUserId HAVING COUNT(Id) > 20 /* Answer the following: Which tags are used more than 50 times? more than 50 times refers to COUNT(TagName) > 50; tags refers to TagName */ SELECT TagName FROM tags GROUP BY TagName HAVING COUNT(TagName) > 50 /* Answer the following: Which users have received more than 100 votes? more than 100 votes refers to COUNT(UserId) > 100; users refers to UserId */ SELECT UserId FROM votes GROUP BY UserId HAVING COUNT(UserId) > 100
SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'
SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 1
SELECT UserId FROM postHistory GROUP BY UserId, PostId HAVING COUNT(PostId) = 1 AND Views >= 1000
SELECT T1.UserId, T2.Name FROM ( SELECT UserId, COUNT(Id) AS num FROM comments GROUP BY UserId ORDER BY num DESC LIMIT 1 ) AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId
SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location LIKE '%India%' AND T1.Name = 'Teacher'
SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', Date) = '2010' AND Name = 'Students' THEN 1 ELSE 0 END) / COUNT(Name) - SUM(CASE WHEN strftime('%Y', Date) = '2011' AND Name = 'Students' THEN 1 ELSE 0 END) / COUNT(Name)) FROM badges
SELECT T1.PostHistoryTypeId, COUNT(DISTINCT T2.UserId) FROM postHistory AS T1 LEFT JOIN comments AS T2 ON T1.PostId = T2.PostId WHERE T1.PostId = 3720 /* Answer the following: What are the names of the badges that user ID 1234 has? */ SELECT Name FROM badges WHERE UserId = 1234 /* Answer the following: How many votes has post ID 5678 received? */ SELECT COUNT(Id) FROM votes WHERE PostId = 5678 /* Answer the following: What is the display name of the user who last edited post ID 91011? */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Id = 91011 /* Answer the following: What are the tags for post ID 1213? */ SELECT Tags FROM posts WHERE Id = 1213 /* Answer the following: How many posts has user ID 1415 made? */ SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 1415 /* Answer the following: What is the total score of all posts made by user ID 1617? */ SELECT SUM(Score) FROM posts WHERE OwnerUserId = 1617 /* Answer the following: What is the reputation of user ID 1819? */ SELECT Reputation FROM users WHERE Id = 1819 /* Answer the following: How many upvotes has user ID 2021 received? */ SELECT UpVotes FROM users WHERE Id = 2021 /* Answer the following: How many downvotes has user ID 2223 received? */ SELECT DownVotes FROM users WHERE Id = 2223 /* Answer the following: What is the location of user ID 2425? */ SELECT Location FROM users WHERE Id = 2425 /* Answer the following: What is the about me text for user ID 2627? */ SELECT AboutMe FROM users WHERE Id = 2627 /* Answer the following: What is the website URL for user ID 2829? */ SELECT WebsiteUrl FROM users WHERE Id = 2829 /* Answer the following: What is the profile image URL for user ID 3031? */ SELECT ProfileImageUrl FROM users WHERE Id = 3031 /* Answer the following: What is the age of user ID 3233? */ SELECT Age FROM users WHERE Id = 3233 /* Answer the following: What is the creation date of user ID 3435? */ SELECT CreationDate FROM users WHERE Id = 3435 /* Answer the following: What is the last access date of user ID 3637? */ SELECT LastAccessDate FROM users WHERE Id = 3637 /* Answer the following: What is the display name of user ID 3839? */ SELECT DisplayName FROM users WHERE Id = 3839 /* Answer the following: What is the account ID of user ID 4041? */ SELECT AccountId FROM users WHERE Id = 4041 /* Answer the following: How many views has user ID 4243 received? */ SELECT Views FROM users WHERE Id = 4243 /* Answer the following: How many posts has user ID 4445 commented on? */ SELECT COUNT(DISTINCT PostId) FROM comments WHERE UserId = 4445 /* Answer the following: How many badges has user ID 4647 received? */ SELECT COUNT(Id) FROM badges WHERE UserId = 4647 /* Answer the following: How many posts has user ID 4849 linked to? */ SELECT COUNT(DISTINCT PostId) FROM postLinks WHERE RelatedPostId IN (SELECT Id FROM posts WHERE OwnerUserId = 4849) /* Answer the following: How many posts has user ID 5051 edited? */ SELECT COUNT(DISTINCT PostId) FROM postHistory WHERE UserId = 5051 /* Answer the following: How many votes has user ID 5253 cast? */ SELECT COUNT(Id) FROM votes WHERE UserId = 5253 /* Answer the following: How many tags has user ID 5455 created? */ SELECT COUNT(DISTINCT ExcerptPostId) FROM tags WHERE ExcerptPostId IN (SELECT Id FROM posts WHERE OwnerUserId = 5455)
SELECT T1.*, T2.ViewCount AS Popularity FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.RelatedPostId = 61217
SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Id = 395
SELECT Id, OwnerUserId FROM posts WHERE Score > 60
SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND YEAR(CreationDate) = 2011
SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId GROUP BY T1.Id HAVING COUNT(T2.Id) > 10
SELECT COUNT(UserId) FROM badges WHERE Name = 'Announcer'
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'
SELECT COUNT(Id) FROM comments WHERE Score > 60
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0'
SELECT COUNT(Id) FROM posts WHERE Score = 10
SELECT Name FROM badges WHERE UserId = ( SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1 )
SELECT T2.Reputation FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre'
SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'
SELECT CAST(COUNT(T1.UserId) AS REAL) * 100 / COUNT(T2.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Teacher'
SELECT CAST(SUM(CASE WHEN T2.Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'
SELECT T2.Score FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CreaionDate = '2010-07-19 19:19:56.0'
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CreationDate = '2010-07-19 19:37:33.0'
SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'
SELECT COUNT(T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' AND T2.Age BETWEEN 19 AND 65
SELECT SUM(T2.Views) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'
SELECT Name FROM badges WHERE UserId IN ( SELECT Id FROM users ORDER BY Reputation ASC LIMIT 1 )
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie'
SELECT COUNT(T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' AND T2.Age > 65 /* Answer the following: How many comments were made by users with a reputation of less than 100? reputation of less than 100 refers to Reputation < 100; */ SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation < 100 /* Answer the following: How many posts have been linked to the post with the title "SQL Examples"? "SQL Examples" is the Title of post; */ SELECT COUNT(T1.Id) FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'SQL Examples' /* Answer the following: How many users have voted for posts with a score of more than 100? score of more than 100 refers to Score > 100; */ SELECT COUNT(DISTINCT T1.UserId) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Score > 100 /* Answer the following: How many tags have been used more than 1000 times? used more than 1000 times refers to Count > 1000; */ SELECT COUNT(Id) FROM tags WHERE Count > 1000 /* Answer the following: How many posts have been edited by users who have more than 1000 upvotes? more than 1000 upvotes refers to UpVotes > 1000; */ SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.UpVotes > 1000 /* Answer the following: How many users have downvoted posts with a score of less than -10? score of less than -10 refers to Score < -10; */ SELECT COUNT(DISTINCT T1.UserId) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Score < -10 /* Answer the following: How many posts have been favorited by more than 100 users? favorited by more than 100 users refers to FavoriteCount > 100; */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 100 /* Answer the following: How many users have made a post with the tag "SQL"? "SQL" is the TagName of tag; */ SELECT COUNT(DISTINCT T1.OwnerUserId) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.TagName = 'SQL'
SELECT DisplayName FROM users WHERE Id = 30 /* Answer the following: How many posts have a score of 100 or more? score of 100 or more refers to Score >= 100; */ SELECT COUNT(Id) FROM posts WHERE Score >= 100 /* Answer the following: What are the IDs of the posts that user 20 has commented on? user 20 refers to UserId = 20; */ SELECT PostId FROM comments WHERE UserId = 20 /* Answer the following: What is the highest bounty amount given by user 10? highest bounty amount refers to MAX(BountyAmount); user 10 refers to UserId = 10; */ SELECT MAX(BountyAmount) FROM votes WHERE UserId = 10 /* Answer the following: How many badges does user 15 have? user 15 refers to UserId = 15; */ SELECT COUNT(Id) FROM badges WHERE UserId = 15 /* Answer the following: What are the names of the badges that user 5 has? user 5 refers to UserId = 5; */ SELECT Name FROM badges WHERE UserId = 5 /* Answer the following: How many comments has user 8 made? user 8 refers to UserId = 8; */ SELECT COUNT(Id) FROM comments WHERE UserId = 8 /* Answer the following: What is the total score of all posts made by user 3? total score refers to SUM(Score); user 3 refers to OwnerUserId = 3; */ SELECT SUM(Score) FROM posts WHERE OwnerUserId = 3 /* Answer the following: How many posts has user 7 made? user 7 refers to OwnerUserId = 7; */ SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 7 /* Answer the following: What is the name of the user who has the most badges? most badges refers to MAX(COUNT(Id)); */ SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1)
SELECT COUNT(Id) FROM users WHERE Location LIKE '%New York%'
SELECT COUNT(Id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'
SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1 /* Answer the following: Which post has the highest score? post has the highest score refers to Id where MAX(Score); */ SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 /* Answer the following: Which user has the most badges? the most badges refer to MAX(COUNT(Id)); */ SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which post has the most comments? the most comments refer to MAX(COUNT(Id)); */ SELECT PostId FROM comments GROUP BY PostId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which user has the most votes? the most votes refer to MAX(COUNT(Id)); */ SELECT UserId FROM votes GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which tag is the most used? the most used tag refers to TagName where MAX(Count); */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Which user has the most posts? the most posts refer to MAX(COUNT(Id)); */ SELECT OwnerUserId FROM posts GROUP BY OwnerUserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which post has the most links? the most links refer to MAX(COUNT(Id)); */ SELECT PostId FROM postLinks GROUP BY PostId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which user has the most post history? the most post history refer to MAX(COUNT(Id)); */ SELECT UserId FROM postHistory GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which user has the most comments? the most comments refer to MAX(COUNT(Id)); */ SELECT UserId FROM comments GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', CreationDate) = '2010' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN STRFTIME('%Y', CreationDate) = '2011' THEN 1 ELSE 0 END) FROM votes
SELECT T2.TagName FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId INNER JOIN users AS T3 ON T1.OwnerUserId = T3.Id WHERE T3.DisplayName = 'John Stauffer'
SELECT COUNT(Id) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo' )
SELECT COUNT(T2.VoteTypeId) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Harlan'
SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1 /* Answer the following: Which user has the most badges? State the user ID. most badges refers to MAX(COUNT(Id)); */ SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which post has the most comments? State the post ID. most comments refers to MAX(COUNT(Id)); */ SELECT PostId FROM comments GROUP BY PostId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which user has the most votes? State the user ID. most votes refers to MAX(COUNT(Id)); */ SELECT UserId FROM votes GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which tag is used the most? State the tag name. most used refers to MAX(Count); */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Which user has the most posts? State the user ID. most posts refers to MAX(COUNT(Id)); */ SELECT OwnerUserId FROM posts GROUP BY OwnerUserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which post has the most views? State the post ID. most views refers to MAX(ViewCount); */ SELECT Id FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Which user has the most reputation? State the user ID. most reputation refers to MAX(Reputation); */ SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: Which post has the most score? State the post ID. most score refers to MAX(Score); */ SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 /* Answer the following: Which user has the most upvotes? State the user ID. most upvotes refers to MAX(UpVotes); */ SELECT Id FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: Which user has the most downvotes? State the user ID. most downvotes refers to MAX(DownVotes); */ SELECT Id FROM users ORDER BY DownVotes DESC LIMIT 1
SELECT T2.DisplayName, SUM(T1.ViewCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T2.DisplayName ORDER BY SUM(T1.ViewCount) DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? most badges refers to MAX(count(badge_id)); */ SELECT T2.DisplayName, COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most popular tag? most popular tag refers to MAX(count(tag_id)); */ SELECT T2.TagName, COUNT(T1.Id) FROM postLinks AS T1 INNER JOIN tags AS T2 ON T1.PostId = T2.Id GROUP BY T2.TagName ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Which post has the most comments? most comments refers to MAX(count(comment_id)); */ SELECT T2.Title, COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T2.Title ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Which user has the most votes? most votes refers to MAX(count(vote_id)); */ SELECT T2.DisplayName, COUNT(T1.Id) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Which post has the most history? most history refers to MAX(count(history_id)); */ SELECT T2.Title, COUNT(T1.Id) FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T2.Title ORDER BY COUNT(T1.Id) DESC LIMIT 1
SELECT COUNT(T2.PostId) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN votes AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.Id HAVING COUNT(T3.Id) > 4
SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Neil McGuigan' AND T2.Score < 60
SELECT T3.TagName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN tags AS T3 ON T1.Id = T3.ExcerptPostId LEFT JOIN comments AS T4 ON T1.Id = T4.PostId WHERE T2.DisplayName = 'Mark Meckes' AND T4.Id IS NULL
SELECT DISTINCT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'
SELECT CAST(SUM(CASE WHEN T1.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Id) FROM tags AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T3.DisplayName = 'Community'
SELECT (SELECT SUM(T1.ViewCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Mornington') - (SELECT SUM(T3.ViewCount) FROM posts AS T3 INNER JOIN users AS T4 ON T3.OwnerUserId = T4.Id WHERE T4.DisplayName = 'Amos') AS DIFFERENCE
SELECT COUNT(UserId) FROM badges WHERE Name = 'Commentator' AND YEAR(Date) = 2014; /* Answer the following: How many comments were made by users with a reputation of more than 1000? reputation > 1000 */ SELECT COUNT(*) FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE users.Reputation > 1000; /* Answer the following: What is the most common tag used in posts? most common refers to MAX(Count) */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1; /* Answer the following: Who made the most votes? most votes refers to MAX(Count) */ SELECT UserId FROM votes GROUP BY UserId ORDER BY COUNT(*) DESC LIMIT 1; /* Answer the following: How many posts have a view count of more than 5000? view count > 5000 */ SELECT COUNT(*) FROM posts WHERE ViewCount > 5000; /* Answer the following: How many users have made more than 100 posts? more than 100 posts refers to COUNT(PostId) > 100 */ SELECT COUNT(UserId) FROM posts GROUP BY UserId HAVING COUNT(Id) > 100; /* Answer the following: What is the average score of posts? average score refers to AVG(Score) */ SELECT AVG(Score) FROM posts; /* Answer the following: How many posts were made in 2014? in 2014 refers to YEAR(CreaionDate) = 2014 */ SELECT COUNT(*) FROM posts WHERE YEAR(CreaionDate) = 2014; /* Answer the following: How many users have a reputation of more than 500 and have made more than 50 posts? reputation > 500 and more than 50 posts refers to COUNT(PostId) > 50 */ SELECT COUNT(DISTINCT users.Id) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.Reputation > 500 AND posts.OwnerUserId IN (SELECT OwnerUserId FROM posts GROUP BY OwnerUserId HAVING COUNT(Id) > 50); /* Answer the following: How many posts have been favorited more than 100 times? favorited more than 100 times refers to FavoriteCount > 100 */ SELECT COUNT(*) FROM posts WHERE FavoriteCount > 100;
SELECT COUNT(Id) FROM posts WHERE CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'
SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'
SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60 /* Answer the following: How many badges does user ID 13 have? */ SELECT COUNT(Id) FROM badges WHERE UserId = 13 /* Answer the following: How many posts has user ID 13 made? */ SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 13 /* Answer the following: How many votes has user ID 13 made? */ SELECT COUNT(Id) FROM votes WHERE UserId = 13 /* Answer the following: How many times has user ID 13's posts been linked to? */ SELECT COUNT(Id) FROM postLinks WHERE RelatedPostId IN (SELECT Id FROM posts WHERE OwnerUserId = 13) /* Answer the following: How many tags has user ID 13 used in their posts? */ SELECT COUNT(DISTINCT TagName) FROM tags WHERE ExcerptPostId IN (SELECT Id FROM posts WHERE OwnerUserId = 13) /* Answer the following: How many times has user ID 13 edited their posts? */ SELECT COUNT(Id) FROM postHistory WHERE UserId = 13 AND PostHistoryTypeId = 2 /* Assuming PostHistoryTypeId = 2 refers to edits */ /* Answer the following: How many comments has user ID 13 received on their posts? */ SELECT COUNT(Id) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE OwnerUserId = 13)
SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score > 60
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.Location = 'North Pole'
SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150
SELECT T1.PostHistoryTypeId, COUNT(T1.Id) AS PostHistoryCount, MAX(T1.CreationDate) AS LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?' GROUP BY T1.PostHistoryTypeId /* Answer the following: Who is the user with the most badges? */ SELECT T1.UserId, COUNT(T1.Id) AS BadgeCount FROM badges AS T1 GROUP BY T1.UserId ORDER BY BadgeCount DESC LIMIT 1 /* Answer the following: What is the most popular tag based on post count? */ SELECT T1.TagName, COUNT(T2.Id) AS PostCount FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Tags LIKE '%' || T1.TagName || '%' GROUP BY T1.TagName ORDER BY PostCount DESC LIMIT 1 /* Answer the following: Who is the user with the most upvotes? */ SELECT T1.Id, T1.DisplayName, T1.UpVotes FROM users AS T1 ORDER BY T1.UpVotes DESC LIMIT 1 /* Answer the following: What is the post with the most comments? */ SELECT T1.Id, T1.Title, T1.CommentCount FROM posts AS T1 ORDER BY T1.CommentCount DESC LIMIT 1 /* Answer the following: What is the most linked post? */ SELECT T1.PostId, COUNT(T1.Id) AS LinkCount FROM postLinks AS T1 GROUP BY T1.PostId ORDER BY LinkCount DESC LIMIT 1 /* Answer the following: What is the most voted post? */ SELECT T1.PostId, COUNT(T1.Id) AS VoteCount FROM votes AS T1 GROUP BY T1.PostId ORDER BY VoteCount DESC LIMIT 1 /* Answer the following: Who is the user with the most comments? */ SELECT T1.UserId, COUNT(T1.Id) AS CommentCount FROM comments AS T1 GROUP BY T1.UserId ORDER BY CommentCount DESC LIMIT 1
SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Outliers'
SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = ( SELECT Id FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time' )
SELECT T1.PostId, T2.Name FROM posts AS T1 INNER JOIN badges AS T2 ON T1.OwnerUserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND YEAR(T1.CreationDate) = 2013 AND YEAR(T2.Date) = 2013
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.ViewCount DESC LIMIT 1 /* Answer the following: What is the name of the badge that the user with the most reputation has? most reputation refers to MAX(Reputation); */ SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1 /* Answer the following: What is the most common tag? most common tag refers to MAX(Count); */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Who made the most comments? most comments refers to MAX(COUNT(Id)); */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most linked post? most linked post refers to MAX(COUNT(RelatedPostId)); */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id GROUP BY T2.Title ORDER BY COUNT(T1.RelatedPostId) DESC LIMIT 1 /* Answer the following: Who has the most upvotes? most upvotes refers to MAX(UpVotes); */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the most voted post? most voted post refers to MAX(COUNT(PostId)); */ SELECT T2.Title FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T2.Title ORDER BY COUNT(T1.PostId) DESC LIMIT 1 /* Answer the following: Who has the most downvotes? most downvotes refers to MAX(DownVotes); */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the most edited post? most edited post refers to MAX(COUNT(PostId)); */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T2.Title ORDER BY COUNT(T1.PostId) DESC LIMIT 1 /* Answer the following: Who has the most badges? most badges refers to MAX(COUNT(UserId)); */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.UserId) DESC LIMIT 1
SELECT T2.DisplayName, T2.Location FROM tags AS T1 INNER JOIN users AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'hypothesis-testing'
SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = ( SELECT Id FROM posts WHERE Title = 'What are principal component scores?' )
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ParentId IS NOT NULL ORDER BY T1.Score DESC LIMIT 1 /* Answer the following: Provide the name of the user with the most badges. most badges refers to COUNT(Id) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most comments? most comments refers to COUNT(Id) */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts? most posts refers to COUNT(Id) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most votes? most votes refers to COUNT(Id) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most upvotes? most upvotes refers to MAX(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most downvotes? most downvotes refers to MAX(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the name of the user who has the highest reputation? highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most views? most views refers to MAX(Views) */ SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most favorite posts? most favorite posts refers to COUNT(FavoriteCount) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.FavoriteCount) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most answered posts? most answered posts refers to COUNT(AcceptedAnswerId) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.AcceptedAnswerId IS NOT NULL GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.AcceptedAnswerId) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most edited posts? most edited posts refers to COUNT(LastEditDate) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.LastEditDate IS NOT NULL GROUP BY T1.LastEditorUserId ORDER BY COUNT(T1.LastEditDate) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most community owned posts? most community owned posts refers to COUNT(CommunityOwnedDate) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.CommunityOwnedDate IS NOT NULL GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.CommunityOwnedDate) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most closed posts? most closed posts refers to COUNT(ClosedDate) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.ClosedDate) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most linked posts? most linked posts refers to COUNT(PostId) */ SELECT T2.DisplayName FROM postLinks AS T1 INNER JOIN users AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.PostId) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most post history? most post history refers to COUNT(PostId) */ SELECT T2.DisplayName FROM postHistory AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.PostId) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most tags? most tags refers to COUNT(TagName) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Tags IS NOT NULL GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Tags) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most bounties? most bounties refers to COUNT(BountyAmount) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.BountyAmount IS NOT NULL GROUP BY T1.UserId ORDER BY COUNT(T1.BountyAmount) DESC LIMIT 1
SELECT T2.DisplayName, T2.WebsiteUrl FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.VoteTypeId = 8 ORDER BY T1.BountyAmount DESC LIMIT 1
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5 /* Answer the following: Who are the top 5 users with the highest reputation? the highest reputation refers to MAX(Reputation); */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 5 /* Answer the following: What are the top 5 most used tags? most used tags refers to MAX(Count); */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 5 /* Answer the following: What are the top 5 posts with the most comments? most comments refers to MAX(CommentCount); */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 5 /* Answer the following: What are the top 5 posts with the most votes? most votes refers to MAX(VoteTypeId); */ SELECT PostId FROM votes GROUP BY PostId ORDER BY COUNT(VoteTypeId) DESC LIMIT 5 /* Answer the following: What are the top 5 posts with the most favorite count? most favorite count refers to MAX(FavoriteCount); */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 5 /* Answer the following: What are the top 5 posts with the most answers? most answers refers to MAX(AnswerCount); */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 5 /* Answer the following: What are the top 5 posts with the highest score? highest score refers to MAX(Score); */ SELECT Title FROM posts ORDER BY Score DESC LIMIT 5 /* Answer the following: What are the top 5 users with the most upvotes? most upvotes refers to MAX(UpVotes); */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 5 /* Answer the following: What are the top 5 users with the most downvotes? most downvotes refers to MAX(DownVotes); */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 5
SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000
SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )
SELECT Age FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the most popular tag? the most popular refers to MAX(Count); */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Who made the most comments? Who refers to UserId; the most comments refers to MAX(Count(UserId)); */ SELECT UserId, COUNT(UserId) AS NumberOfComments FROM comments GROUP BY UserId ORDER BY NumberOfComments DESC LIMIT 1 /* Answer the following: What is the highest voted post? highest voted refers to MAX(Score); */ SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 /* Answer the following: Who has the most badges? Who refers to UserId; the most badges refers to MAX(Count(UserId)); */ SELECT UserId, COUNT(UserId) AS NumberOfBadges FROM badges GROUP BY UserId ORDER BY NumberOfBadges DESC LIMIT 1 /* Answer the following: Who has given the most votes? Who refers to UserId; the most votes refers to MAX(Count(UserId)); */ SELECT UserId, COUNT(UserId) AS NumberOfVotes FROM votes GROUP BY UserId ORDER BY NumberOfVotes DESC LIMIT 1 /* Answer the following: What is the most linked post? the most linked refers to MAX(Count(PostId)); */ SELECT PostId, COUNT(PostId) AS NumberOfLinks FROM postLinks GROUP BY PostId ORDER BY NumberOfLinks DESC LIMIT 1 /* Answer the following: Who has the most posts? Who refers to OwnerUserId; the most posts refers to MAX(Count(OwnerUserId)); */ SELECT OwnerUserId, COUNT(OwnerUserId) AS NumberOfPosts FROM posts GROUP BY OwnerUserId ORDER BY NumberOfPosts DESC LIMIT 1 /* Answer the following: What is the most edited post? the most edited refers to MAX(Count(PostId)); */ SELECT PostId, COUNT(PostId) AS NumberOfEdits FROM postHistory GROUP BY PostId ORDER BY NumberOfEdits DESC LIMIT 1 /* Answer the following: Who has the most favorite posts? Who refers to OwnerUserId; the most favorite posts refers to MAX(Count(FavoriteCount)); */ SELECT OwnerUserId, COUNT(FavoriteCount) AS NumberOfFavorites FROM posts WHERE FavoriteCount IS NOT NULL GROUP BY OwnerUserId ORDER BY NumberOfFavorites DESC LIMIT 1
SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE STRFTIME('%Y', T1.CreaionDate) = '2011' AND T2.BountyAmount = 50
SELECT Id FROM users ORDER BY Age DESC LIMIT 1
SELECT T1.Score FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.Count = ( SELECT MAX(Count) FROM tags )
SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2010' AND T2.AnswerCount <= 2
SELECT T1.Id FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 1465 ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id ORDER BY T1.CreationDate ASC LIMIT 1 /* Answer the following: Who is the user with the oldest badge? oldest badge refers to MIN(Date); */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id ORDER BY T1.Date ASC LIMIT 1 /* Answer the following: What is the text of the oldest comment? oldest comment refers to MIN(CreationDate); */ SELECT T1.Text FROM comments AS T1 ORDER BY T1.CreationDate ASC LIMIT 1 /* Answer the following: What is the text of the oldest post history? oldest post history refers to MIN(CreationDate); */ SELECT T1.Text FROM postHistory AS T1 ORDER BY T1.CreationDate ASC LIMIT 1 /* Answer the following: What is the name of the oldest tag? oldest tag refers to MIN(Count); */ SELECT T1.TagName FROM tags AS T1 ORDER BY T1.Count ASC LIMIT 1 /* Answer the following: What is the oldest vote? oldest vote refers to MIN(CreationDate); */ SELECT T1.Id FROM votes AS T1 ORDER BY T1.CreationDate ASC LIMIT 1 /* Answer the following: Who is the oldest user? oldest user refers to MAX(Age); */ SELECT T1.DisplayName FROM users AS T1 ORDER BY T1.Age DESC LIMIT 1
SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Name) DESC LIMIT 1 /* Answer the following: Who is the user with the highest score in comments? highest score refers to MAX(Score); */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id ORDER BY T1.Score DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most posts? most posts refers to MAX(COUNT(Id)); */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? highest reputation refers to MAX(Reputation); */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most votes? most votes refers to MAX(COUNT(Id)); */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most tags? most tags refers to MAX(COUNT(Id)); */ SELECT T2.DisplayName FROM tags AS T1 INNER JOIN users AS T2 ON T1.ExcerptPostId = T2.Id GROUP BY T1.ExcerptPostId ORDER BY COUNT(T1.Id) DESC LIMIT 1
SELECT MIN(T2.CreationDate) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl'
SELECT MIN(posts.CreaionDate) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId ORDER BY users.Age DESC LIMIT 1 /* Answer the following: Who is the youngest user and what is his or her reputation? youngest user refers to MIN(Age); reputation refers to Reputation */ SELECT DisplayName, Reputation FROM users ORDER BY Age DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has the highest reputation? youngest user refers to MIN(Age); highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Age DESC, Reputation DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has made the most posts? youngest user refers to MIN(Age); most posts refers to COUNT(posts.Id) */ SELECT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.Id ORDER BY users.Age DESC, COUNT(posts.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has received the most votes? youngest user refers to MIN(Age); most votes refers to COUNT(votes.Id) */ SELECT users.DisplayName FROM users INNER JOIN votes ON users.Id = votes.UserId GROUP BY users.Id ORDER BY users.Age DESC, COUNT(votes.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has given the most votes? youngest user refers to MIN(Age); most votes refers to COUNT(votes.Id) */ SELECT users.DisplayName FROM users INNER JOIN votes ON users.Id = votes.UserId GROUP BY users.Id ORDER BY users.Age DESC, COUNT(votes.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has the most badges? youngest user refers to MIN(Age); most badges refers to COUNT(badges.Id) */ SELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId GROUP BY users.Id ORDER BY users.Age DESC, COUNT(badges.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has made the most comments? youngest user refers to MIN(Age); most comments refers to COUNT(comments.Id) */ SELECT users.DisplayName FROM users INNER JOIN comments ON users.Id = comments.UserId GROUP BY users.Id ORDER BY users.Age DESC, COUNT(comments.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has the most post history? youngest user refers to MIN(Age); most post history refers to COUNT(postHistory.Id) */ SELECT users.DisplayName FROM users INNER JOIN postHistory ON users.Id = postHistory.UserId GROUP BY users.Id ORDER BY users.Age DESC, COUNT(postHistory.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has the most post links? youngest user refers to MIN(Age); most post links refers to COUNT(postLinks.Id) */ SELECT users.DisplayName FROM users INNER JOIN postLinks ON users.Id = postLinks.PostId GROUP BY users.Id ORDER BY users.Age DESC, COUNT(postLinks.Id) DESC LIMIT 1
SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Autobiographer' ORDER BY T1.Date ASC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? user refers to DisplayName; highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the title of the post with the most comments? title of the post refers to Title; the most comments refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: Who is the user who voted the most? user refers to DisplayName; voted the most refers to COUNT(UserId) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.UserId) DESC LIMIT 1 /* Answer the following: What is the name of the most popular tag? most popular tag refers to MAX(Count); name of the tag refers to TagName */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Who is the user who made the most posts? user refers to DisplayName; made the most posts refers to COUNT(OwnerUserId) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.OwnerUserId) DESC LIMIT 1 /* Answer the following: What is the title of the post with the highest score? title of the post refers to Title; highest score refers to MAX(Score) */ SELECT Title FROM posts ORDER BY Score DESC LIMIT 1 /* Answer the following: Who is the user who received the most upvotes? user refers to DisplayName; received the most upvotes refers to MAX(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: Who is the user who received the most downvotes? user refers to DisplayName; received the most downvotes refers to MAX(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the title of the post with the most views? title of the post refers to Title; the most views refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: What is the title of the post with the most answers? title of the post refers to Title; the most answers refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: What is the title of the post with the most favorites? title of the post refers to Title; the most favorites refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: Who is the user who edited the most posts? user refers to DisplayName; edited the most posts refers to COUNT(LastEditorUserId) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id GROUP BY T1.LastEditorUserId ORDER BY COUNT(T1.LastEditorUserId) DESC LIMIT 1 /* Answer the following: What is the title of the post that was edited the most? title of the post refers to Title; edited the most refers to COUNT(LastEditDate) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId GROUP BY T2.PostId ORDER BY COUNT(T2.CreationDate) DESC LIMIT 1 /* Answer the following: What is the title of the post that was linked the most? title of the post refers to Title; linked the most refers to COUNT(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId GROUP BY T2.PostId ORDER BY COUNT(T2.PostId) DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most? title of the post refers to Title; commented the most refers to COUNT(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T2.PostId ORDER BY COUNT(T2.PostId) DESC LIMIT 1 /* Answer the following: What is the title of the post that received the most votes? title of the post refers to Title; received the most votes refers to COUNT(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId GROUP BY T2.PostId ORDER BY COUNT(T2.PostId) DESC LIMIT 1 /* Answer the following: What is the title of the post that received the most bounties? title of the post refers to Title; received the most bounties refers to COUNT(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount IS NOT NULL GROUP BY T2.PostId ORDER BY COUNT(T2.PostId) DESC LIMIT 1 /* Answer the following: What is the title of the post that was closed the most recently? title of the post refers to Title; closed the most recently refers to MAX(ClosedDate) */ SELECT Title FROM posts ORDER BY ClosedDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was community owned the most recently? title of the post refers to Title; community owned the most recently refers to MAX(CommunityOwnedDate) */ SELECT Title FROM posts ORDER BY CommunityOwnedDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was accepted as an answer the most recently? title of the post refers to Title; accepted as an answer the most recently refers to MAX(CreaionDate) */ SELECT T1.Title FROM posts AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.AcceptedAnswerId ORDER BY T2.CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last edited? title of the post refers to Title; last edited refers to MAX(LastEditDate) */ SELECT Title FROM posts ORDER BY LastEditDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last active? title of the post refers to Title; last active refers to MAX(LasActivityDate) */ SELECT Title FROM posts ORDER BY LasActivityDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was created the most recently? title of the post refers to Title; created the most recently refers to MAX(CreaionDate) */ SELECT Title FROM posts ORDER BY CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was viewed the most recently? title of the post refers to Title; viewed the most recently refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was favorited the most recently? title of the post refers to Title; favorited the most recently refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was answered the most recently? title of the post refers to Title; answered the most recently refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was linked the most recently? title of the post refers to Title; linked the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was voted the most recently? title of the post refers to Title; voted the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was edited the most recently? title of the post refers to Title; edited the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that received the most bounties recently? title of the post refers to Title; received the most bounties recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount IS NOT NULL ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was accepted as an answer the most recently? title of the post refers to Title; accepted as an answer the most recently refers to MAX(CreaionDate) */ SELECT T1.Title FROM posts AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.AcceptedAnswerId ORDER BY T2.CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last edited? title of the post refers to Title; last edited refers to MAX(LastEditDate) */ SELECT Title FROM posts ORDER BY LastEditDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last active? title of the post refers to Title; last active refers to MAX(LasActivityDate) */ SELECT Title FROM posts ORDER BY LasActivityDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was created the most recently? title of the post refers to Title; created the most recently refers to MAX(CreaionDate) */ SELECT Title FROM posts ORDER BY CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was viewed the most recently? title of the post refers to Title; viewed the most recently refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was favorited the most recently? title of the post refers to Title; favorited the most recently refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was answered the most recently? title of the post refers to Title; answered the most recently refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was linked the most recently? title of the post refers to Title; linked the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was voted the most recently? title of the post refers to Title; voted the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was edited the most recently? title of the post refers to Title; edited the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that received the most bounties recently? title of the post refers to Title; received the most bounties recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount IS NOT NULL ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was accepted as an answer the most recently? title of the post refers to Title; accepted as an answer the most recently refers to MAX(CreaionDate) */ SELECT T1.Title FROM posts AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.AcceptedAnswerId ORDER BY T2.CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last edited? title of the post refers to Title; last edited refers to MAX(LastEditDate) */ SELECT Title FROM posts ORDER BY LastEditDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last active? title of the post refers to Title; last active refers to MAX(LasActivityDate) */ SELECT Title FROM posts ORDER BY LasActivityDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was created the most recently? title of the post refers to Title; created the most recently refers to MAX(CreaionDate) */ SELECT Title FROM posts ORDER BY CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was viewed the most recently? title of the post refers to Title; viewed the most recently refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was favorited the most recently? title of the post refers to Title; favorited the most recently refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was answered the most recently? title of the post refers to Title; answered the most recently refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was linked the most recently? title of the post refers to Title; linked the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was voted the most recently? title of the post refers to Title; voted the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was edited the most recently? title of the post refers to Title; edited the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that received the most bounties recently? title of the post refers to Title; received the most bounties recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount IS NOT NULL ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was accepted as an answer the most recently? title of the post refers to Title; accepted as an answer the most recently refers to MAX(CreaionDate) */ SELECT T1.Title FROM posts AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.AcceptedAnswerId ORDER BY T2.CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last edited? title of the post refers to Title; last edited refers to MAX(LastEditDate) */ SELECT Title FROM posts ORDER BY LastEditDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last active? title of the post refers to Title; last active refers to MAX(LasActivityDate) */ SELECT Title FROM posts ORDER BY LasActivityDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was created the most recently? title of the post refers to Title; created the most recently refers to MAX(CreaionDate) */ SELECT Title FROM posts ORDER BY CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was viewed the most recently? title of the post refers to Title; viewed the most recently refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was favorited the most recently? title of the post refers to Title; favorited the most recently refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was answered the most recently? title of the post refers to Title; answered the most recently refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was linked the most recently? title of the post refers to Title; linked the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was voted the most recently? title of the post refers to Title; voted the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was edited the most recently? title of the post refers to Title; edited the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that received the most bounties recently? title of the post refers to Title; received the most bounties recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount IS NOT NULL ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was accepted as an answer the most recently? title of the post refers to Title; accepted as an answer the most recently refers to MAX(CreaionDate) */ SELECT T1.Title FROM posts AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.AcceptedAnswerId ORDER BY T2.CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last edited? title of the post refers to Title; last edited refers to MAX(LastEditDate) */ SELECT Title FROM posts ORDER BY LastEditDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last active? title of the post refers to Title; last active refers to MAX(LasActivityDate) */ SELECT Title FROM posts ORDER BY LasActivityDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was created the most recently? title of the post refers to Title; created the most recently refers to MAX(CreaionDate) */ SELECT Title FROM posts ORDER BY CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was viewed the most recently? title of the post refers to Title; viewed the most recently refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was favorited the most recently? title of the post refers to Title; favorited the most recently refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was answered the most recently? title of the post refers to Title; answered the most recently refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was linked the most recently? title of the post refers to Title; linked the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was voted the most recently? title of the post refers to Title; voted the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was edited the most recently? title of the post refers to Title; edited the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that received the most bounties recently? title of the post refers to Title; received the most bounties recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount IS NOT NULL ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was accepted as an answer the most recently? title of the post refers to Title; accepted as an answer the most recently refers to MAX(CreaionDate) */ SELECT T1.Title FROM posts AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.AcceptedAnswerId ORDER BY T2.CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last edited? title of the post refers to Title; last edited refers to MAX(LastEditDate) */ SELECT Title FROM posts ORDER BY LastEditDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last active? title of the post refers to Title; last active refers to MAX(LasActivityDate) */ SELECT Title FROM posts ORDER BY LasActivityDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was created the most recently? title of the post refers to Title; created the most recently refers to MAX(CreaionDate) */ SELECT Title FROM posts ORDER BY CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was viewed the most recently? title of the post refers to Title; viewed the most recently refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was favorited the most recently? title of the post refers to Title; favorited the most recently refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was answered the most recently? title of the post refers to Title; answered the most recently refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was linked the most recently? title of the post refers to Title; linked the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was voted the most recently? title of the post refers to Title; voted the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was edited the most recently? title of the post refers to Title; edited the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that received the most bounties recently? title of the post refers to Title; received the most bounties recently refers to MAX(PostId) */ SELECT T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount IS NOT NULL ORDER BY T2.CreationDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was accepted as an answer the most recently? title of the post refers to Title; accepted as an answer the most recently refers to MAX(CreaionDate) */ SELECT T1.Title FROM posts AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.AcceptedAnswerId ORDER BY T2.CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last edited? title of the post refers to Title; last edited refers to MAX(LastEditDate) */ SELECT Title FROM posts ORDER BY LastEditDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was last active? title of the post refers to Title; last active refers to MAX(LasActivityDate) */ SELECT Title FROM posts ORDER BY LasActivityDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was created the most recently? title of the post refers to Title; created the most recently refers to MAX(CreaionDate) */ SELECT Title FROM posts ORDER BY CreaionDate DESC LIMIT 1 /* Answer the following: What is the title of the post that was viewed the most recently? title of the post refers to Title; viewed the most recently refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was favorited the most recently? title of the post refers to Title; favorited the most recently refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was answered the most recently? title of the post refers to Title; answered the most recently refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was commented the most recently? title of the post refers to Title; commented the most recently refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: What is the title of the post that was linked the most recently? title of the post refers to Title; linked the most recently refers to
SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location LIKE 'United Kingdom' AND T2.FavoriteCount >= 4 /* Answer the following: How many posts have been edited by users who have a reputation of 1000 or more? reputation of 1000 or more refers to Reputation >= 1000; */ SELECT COUNT(DISTINCT T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T1.Reputation >= 1000 /* Answer the following: How many users have made a comment on a post that has a score of 5 or more? score of 5 or more refers to Score >= 5; */ SELECT COUNT(DISTINCT T1.UserId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Score >= 5 /* Answer the following: How many users have received a badge for a post that has been viewed 10 times or more? viewed 10 times or more refers to ViewCount >= 10; */ SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T2.ViewCount >= 10 /* Answer the following: How many posts have been linked to a post that has a score of 3 or more? score of 3 or more refers to Score >= 3; */ SELECT COUNT(DISTINCT T1.PostId) FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T2.Score >= 3 /* Answer the following: How many users have voted on a post that has a score of 2 or less? score of 2 or less refers to Score <= 2; */ SELECT COUNT(DISTINCT T1.UserId) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Score <= 2 /* Answer the following: How many posts have a tag that has been used 50 times or more? used 50 times or more refers to Count >= 50; */ SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Tags LIKE '%' || T2.TagName || '%' WHERE T2.Count >= 50 /* Answer the following: How many users have a post history that includes a post with a score of 1 or less? score of 1 or less refers to Score <= 1; */ SELECT COUNT(DISTINCT T1.UserId) FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Score <= 1
SELECT AVG(T1.PostId) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Age = ( SELECT MAX(Age) FROM users )
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65
SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Jay Stevens' AND STRFTIME('%Y', T1.CreaionDate) = '2010'
SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' ORDER BY T1.ViewCount DESC LIMIT 1
SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.Score DESC LIMIT 1
SELECT AVG(Score) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Stephen Turner' )
SELECT DISTINCT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2011' AND T1.ViewCount > 20000
SELECT T1.Id, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T2.Reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2011'
SELECT CAST(COUNT(CASE WHEN Age BETWEEN 13 AND 19 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users /* Answer the following: What is the percentage of posts that have been viewed more than 1000 times? DIVIDE(COUNT(Id where ViewCount > 1000), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN ViewCount > 1000 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM posts /* Answer the following: What is the percentage of users who have a reputation of over 500? DIVIDE(COUNT(Id where Reputation > 500), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN Reputation > 500 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users /* Answer the following: What is the percentage of posts that have a score of over 10? DIVIDE(COUNT(Id where Score > 10), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN Score > 10 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM posts /* Answer the following: What is the percentage of users who have more than 100 upvotes? DIVIDE(COUNT(Id where UpVotes > 100), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN UpVotes > 100 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users /* Answer the following: What is the percentage of posts that have more than 5 comments? DIVIDE(COUNT(Id where CommentCount > 5), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN CommentCount > 5 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM posts /* Answer the following: What is the percentage of users who have more than 50 downvotes? DIVIDE(COUNT(Id where DownVotes > 50), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN DownVotes > 50 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users /* Answer the following: What is the percentage of posts that have been favorited more than 10 times? DIVIDE(COUNT(Id where FavoriteCount > 10), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN FavoriteCount > 10 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM posts /* Answer the following: What is the percentage of users who are over 30 years old? DIVIDE(COUNT(Id where Age > 30), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN Age > 30 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users /* Answer the following: What is the percentage of posts that have a score of less than 0? DIVIDE(COUNT(Id where Score < 0), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN Score < 0 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM posts
SELECT T1.ViewCount, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Computer Game Datasets'
SELECT COUNT(*) FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )
SELECT COUNT(Id) FROM comments WHERE PostId = ( SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 )
SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0
SELECT T1.DisplayName, T1.Location FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T2.Id = 183 ORDER BY T2.LastEditDate DESC LIMIT 1 /* Answer the following: What is the name of the badge that was most recently awarded? most recently awarded refers to MAX(Date); */ SELECT Name FROM badges ORDER BY Date DESC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? highest reputation refers to MAX(Reputation); */ SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users ) /* Answer the following: What is the most common tag used in posts? most common tag refers to MAX(Count); */ SELECT TagName FROM tags WHERE Count = ( SELECT MAX(Count) FROM tags ) /* Answer the following: Who is the user who has received the most upvotes? most upvotes refers to MAX(UpVotes); */ SELECT DisplayName FROM users WHERE UpVotes = ( SELECT MAX(UpVotes) FROM users ) /* Answer the following: What is the title of the post with the most comments? most comments refers to MAX(CommentCount); */ SELECT Title FROM posts WHERE CommentCount = ( SELECT MAX(CommentCount) FROM posts ) /* Answer the following: Who is the user who has cast the most votes? most votes refers to MAX(Count(UserId)); */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.UserId) DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most views? most views refers to MAX(ViewCount); */ SELECT Title FROM posts WHERE ViewCount = ( SELECT MAX(ViewCount) FROM posts ) /* Answer the following: What is the name of the badge that has been awarded the most times? most times refers to MAX(Count(Id)); */ SELECT Name FROM badges GROUP BY Name ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most answers? most answers refers to MAX(AnswerCount); */ SELECT Title FROM posts WHERE AnswerCount = ( SELECT MAX(AnswerCount) FROM posts )
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000; /* Answer the following: List the top 10 posts with the most comments. top 10 posts refer to ORDER BY CommentCount DESC LIMIT 10; most comments refer to MAX(CommentCount); */ SELECT Id, Title FROM posts ORDER BY CommentCount DESC LIMIT 10; /* Answer the following: How many users have a reputation of over 10000? reputation of over 10000 refers to Reputation > 10000; */ SELECT COUNT(Id) FROM users WHERE Reputation > 10000; /* Answer the following: Which user has the most badges? most badges refers to MAX(COUNT(Name)); */ SELECT UserId, COUNT(Name) AS badge_count FROM badges GROUP BY UserId ORDER BY badge_count DESC LIMIT 1; /* Answer the following: What is the average score of all posts? average score refers to AVG(Score); */ SELECT AVG(Score) FROM posts; /* Answer the following: How many posts have been viewed more than 10000 times? viewed more than 10000 times refers to ViewCount > 10000; */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 10000; /* Answer the following: Which post has the most upvotes? most upvotes refers to MAX(UpVotes); */ SELECT T1.PostId, T2.UpVotes FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id ORDER BY T2.UpVotes DESC LIMIT 1; /* Answer the following: How many users have cast more than 1000 votes? cast more than 1000 votes refers to COUNT(VoteTypeId) > 1000; */ SELECT COUNT(UserId) FROM votes GROUP BY UserId HAVING COUNT(VoteTypeId) > 1000; /* Answer the following: Which user has the most downvotes? most downvotes refers to MAX(DownVotes); */ SELECT Id, DownVotes FROM users ORDER BY DownVotes DESC LIMIT 1; /* Answer the following: How many posts have a score of over 100? score of over 100 refers to Score > 100; */ SELECT COUNT(Id) FROM posts WHERE Score > 100;
SELECT strftime('%J', T2.Date) - strftime('%J', T1.CreationDate) AS days FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Zolomon'
SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY CreationDate DESC LIMIT 1)) AS PostCount, (SELECT COUNT(*) FROM comments WHERE UserId = (SELECT Id FROM users ORDER BY CreationDate DESC LIMIT 1)) AS CommentCount
SELECT T1.Text, T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T1.PostId = T3.Id WHERE T3.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol'
SELECT COUNT(*) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.TagName = 'careers'
SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'
SELECT (SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) AS CommentCount, (SELECT COUNT(*) FROM posts WHERE PostTypeId = 2 AND ParentId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) AS AnswerCount
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'
SELECT COUNT(PostId) FROM votes WHERE BountyAmount >= 30
SELECT CAST(COUNT(CASE WHEN T2.Score >= 50 THEN 1 END) AS REAL) * 100 / COUNT(T2.Id) FROM ( SELECT UserId, MAX(Reputation) FROM users ) AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId /* Answer the following: What is the average number of comments per post for the top 5 users with the most posts? DIVIDE(COUNT(comments.Id), COUNT(posts.Id)) where users.Id = posts.OwnerUserId and users.Id = comments.UserId; */ SELECT AVG(T.num_comments) FROM ( SELECT T1.UserId, COUNT(T2.Id) AS num_posts, COUNT(T3.Id) AS num_comments FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T1.Id = T3.UserId GROUP BY T1.UserId ORDER BY num_posts DESC LIMIT 5 ) AS T /* Answer the following: What is the percentage of posts that have been viewed more than 1000 times? DIVIDE(COUNT(posts.Id where ViewCount > 1000), COUNT(posts.Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN ViewCount > 1000 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM posts /* Answer the following: What is the average score of the posts made by users who have received the 'Teacher' badge? AVG(posts.Score) where badges.Name = 'Teacher' and badges.UserId = posts.OwnerUserId; */ SELECT AVG(T2.Score) FROM badges AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.Name = 'Teacher' /* Answer the following: What is the average number of votes per post for the top 5 users with the most votes? DIVIDE(COUNT(votes.Id), COUNT(posts.Id)) where users.Id = posts.OwnerUserId and users.Id = votes.UserId; */ SELECT AVG(T.num_votes) FROM ( SELECT T1.Id, COUNT(T2.Id) AS num_posts, COUNT(T3.Id) AS num_votes FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN votes AS T3 ON T1.Id = T3.UserId GROUP BY T1.Id ORDER BY num_votes DESC LIMIT 5 ) AS T
SELECT COUNT(Id) FROM posts WHERE Score < 20;
SELECT COUNT(Id) FROM tags WHERE Id < 15 AND Count <= 20
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'
SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)';
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How can I adapt ANOVA for binary data?' /* Answer the following: Provide the names of users who have the badge 'Teacher'. Name = 'Teacher'; */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher' /* Answer the following: Give the number of votes on the post titled 'What is the best statistical software?'. Title = 'What is the best statistical software?'; */ SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What is the best statistical software?' /* Answer the following: Provide the number of posts tagged with 'regression'. TagName = 'regression'; */ SELECT COUNT(T2.Id) FROM tags AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.Id WHERE T1.TagName = 'regression' /* Answer the following: Give the number of users who have more than 1000 reputation. Reputation > 1000; */ SELECT COUNT(Id) FROM users WHERE Reputation > 1000 /* Answer the following: Provide the number of posts that have more than 10 comments. CommentCount > 10; */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 /* Answer the following: Give the number of users who have more than 100 upvotes. UpVotes > 100; */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 /* Answer the following: Provide the number of posts that have a score of more than 50. Score > 50; */ SELECT COUNT(Id) FROM posts WHERE Score > 50 /* Answer the following: Give the number of users who have more than 50 downvotes. DownVotes > 50; */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 /* Answer the following: Provide the number of posts that have been viewed more than 1000 times. ViewCount > 1000; */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 1000 /* Answer the following: Give the number of users who have more than 10 badges. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have been favorited more than 10 times. FavoriteCount > 10; */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 10 badges. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation > 500 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have a score of more than 50 and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE Score > 50 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 100 upvotes and more than 50 downvotes. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 50 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have more than 10 comments. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND CommentCount > 10 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 100 upvotes. */ SELECT COUNT(Id) FROM users WHERE Reputation > 500 AND UpVotes > 100 /* Answer the following: Provide the number of posts that have a score of more than 50 and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE Score > 50 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 50 downvotes and have more than 10 badges. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DownVotes > 50 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have been viewed more than 1000 times and have more than 10 comments. */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 1000 AND CommentCount > 10 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 50 downvotes. */ SELECT COUNT(Id) FROM users WHERE Reputation > 500 AND DownVotes > 50 /* Answer the following: Provide the number of posts that have a score of more than 50 and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE Score > 50 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 100 upvotes and have more than 10 badges. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.UpVotes > 100 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND Score > 50 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 100 upvotes. */ SELECT COUNT(Id) FROM users WHERE Reputation > 500 AND UpVotes > 100 /* Answer the following: Provide the number of posts that have been viewed more than 1000 times and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 1000 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 50 downvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND Reputation > 500 /* Answer the following: Provide the number of posts that have more than 10 comments and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND Score > 50 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 10 badges and have a reputation of more than 500. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation > 500 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have more than 10 comments and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have more than 100 upvotes. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND UpVotes > 100 /* Answer the following: Provide the number of posts that have a score of more than 50 and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE Score > 50 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 10 badges and have more than 100 upvotes. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.UpVotes > 100 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have been viewed more than 1000 times and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 1000 AND Score > 50 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 50 downvotes. */ SELECT COUNT(Id) FROM users WHERE Reputation > 500 AND DownVotes > 50 /* Answer the following: Provide the number of posts that have more than 10 comments and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 100 upvotes and have more than 50 downvotes. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 50 /* Answer the following: Provide the number of posts that have a score of more than 50 and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE Score > 50 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 10 badges and have more than 50 downvotes. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DownVotes > 50 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have more than 10 comments. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND CommentCount > 10 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 100 upvotes. */ SELECT COUNT(Id) FROM users WHERE Reputation > 500 AND UpVotes > 100 /* Answer the following: Provide the number of posts that have been viewed more than 1000 times and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 1000 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 50 downvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND Reputation > 500 /* Answer the following: Provide the number of posts that have more than 10 comments and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND Score > 50 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 10 badges and have a reputation of more than 500. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation > 500 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have more than 10 comments and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have more than 100 upvotes. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND UpVotes > 100 /* Answer the following: Provide the number of posts that have a score of more than 50 and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE Score > 50 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 10 badges and have more than 100 upvotes. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.UpVotes > 100 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have been viewed more than 1000 times and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 1000 AND Score > 50 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 50 downvotes. */ SELECT COUNT(Id) FROM users WHERE Reputation > 500 AND DownVotes > 50 /* Answer the following: Provide the number of posts that have more than 10 comments and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND Reputation > 500 /* Answer the following: Provide the number of posts that have more than 10 comments and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND Score > 50 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 10 badges and have a reputation of more than 500. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation > 500 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have more than 10 comments and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have more than 100 upvotes. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND UpVotes > 100 /* Answer the following: Provide the number of posts that have a score of more than 50 and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE Score > 50 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 10 badges and have more than 100 upvotes. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.UpVotes > 100 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have been viewed more than 1000 times and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 1000 AND Score > 50 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 50 downvotes. */ SELECT COUNT(Id) FROM users WHERE Reputation > 500 AND DownVotes > 50 /* Answer the following: Provide the number of posts that have more than 10 comments and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND Reputation > 500 /* Answer the following: Provide the number of posts that have more than 10 comments and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND Score > 50 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 10 badges and have a reputation of more than 500. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation > 500 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have more than 10 comments and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have more than 100 upvotes. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND UpVotes > 100 /* Answer the following: Provide the number of posts that have a score of more than 50 and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE Score > 50 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 10 badges and have more than 100 upvotes. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.UpVotes > 100 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have been viewed more than 1000 times and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 1000 AND Score > 50 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 50 downvotes. */ SELECT COUNT(Id) FROM users WHERE Reputation > 500 AND DownVotes > 50 /* Answer the following: Provide the number of posts that have more than 10 comments and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND Reputation > 500 /* Answer the following: Provide the number of posts that have more than 10 comments and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND Score > 50 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 10 badges and have a reputation of more than 500. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation > 500 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have more than 10 comments and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have more than 100 upvotes. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND UpVotes > 100 /* Answer the following: Provide the number of posts that have a score of more than 50 and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE Score > 50 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 10 badges and have more than 100 upvotes. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.UpVotes > 100 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have been viewed more than 1000 times and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 1000 AND Score > 50 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 50 downvotes. */ SELECT COUNT(Id) FROM users WHERE Reputation > 500 AND DownVotes > 50 /* Answer the following: Provide the number of posts that have more than 10 comments and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND Reputation > 500 /* Answer the following: Provide the number of posts that have more than 10 comments and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND Score > 50 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 10 badges and have a reputation of more than 500. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation > 500 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have more than 10 comments and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have more than 100 upvotes. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND UpVotes > 100 /* Answer the following: Provide the number of posts that have a score of more than 50 and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE Score > 50 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 10 badges and have more than 100 upvotes. */ SELECT T1.Id, COUNT(T2.Id) AS BadgeCount FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.UpVotes > 100 GROUP BY T1.Id HAVING BadgeCount > 10 /* Answer the following: Provide the number of posts that have been viewed more than 1000 times and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE ViewCount > 1000 AND Score > 50 /* Answer the following: Give the number of users who have a reputation of more than 500 and have more than 50 downvotes. */ SELECT COUNT(Id) FROM users WHERE Reputation > 500 AND DownVotes > 50 /* Answer the following: Provide the number of posts that have more than 10 comments and have been favorited more than 10 times. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND FavoriteCount > 10 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND Reputation > 500 /* Answer the following: Provide the number of posts that have been favorited more than 10 times and have been viewed more than 1000 times. */ SELECT COUNT(Id) FROM posts WHERE FavoriteCount > 10 AND ViewCount > 1000 /* Answer the following: Give the number of users who have more than 50 downvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM users WHERE DownVotes > 50 AND Reputation > 500 /* Answer the following: Provide the number of posts that have more than 10 comments and have a score of more than 50. */ SELECT COUNT(Id) FROM posts WHERE CommentCount > 10 AND Score > 50 /* Answer the following: Give the number of users who have more than 100 upvotes and have a reputation of more than 500. */ SELECT COUNT(Id) FROM
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount BETWEEN 100 AND 150 ORDER BY T2.Score DESC LIMIT 1
SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text LIKE '%http://%'
SELECT COUNT(DISTINCT T1.PostId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5
SELECT COUNT(T2.Score) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CommentCount = 1 AND T2.Score = 0
SELECT COUNT(DISTINCT T1.UserId) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40
SELECT T1.PostId, T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Group differences on a five point Likert item'
SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = "R is also lazy evaluated."
SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'
SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0
SELECT CAST(SUM(CASE WHEN T2.UpVotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserId) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = '3-D Man'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200
SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15
SELECT COUNT(*) FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE C.colour = 'Blue' /* Answer the following: What is the average height of superheroes who have the superpower of 'Super Strength'? 'Super Strength' refers to power_name = 'Super Strength' and power_id = superpower.id; */ SELECT AVG(S.height_cm) FROM superhero AS S INNER JOIN hero_power AS HP ON S.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE SP.power_name = 'Super Strength' /* Answer the following: Which superhero has the most attributes? most attributes refers to max(count(attribute_id)); */ SELECT S.superhero_name FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id GROUP BY S.id ORDER BY COUNT(HA.attribute_id) DESC LIMIT 1 /* Answer the following: How many superheroes are aligned with 'good'? 'good' refers to alignment = 'good' and alignment_id = alignment.id; */ SELECT COUNT(*) FROM superhero AS S INNER JOIN alignment AS A ON S.alignment_id = A.id WHERE A.alignment = 'good' /* Answer the following: What is the most common race among superheroes? most common race refers to max(count(race_id)); */ SELECT R.race FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id GROUP BY R.id ORDER BY COUNT(S.race_id) DESC LIMIT 1 /* Answer the following: How many superheroes have the attribute of 'Intelligence' with a value greater than 80? 'Intelligence' refers to attribute_name = 'Intelligence' and attribute_id = attribute.id; value greater than 80 refers to attribute_value > 80; */ SELECT COUNT(*) FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE A.attribute_name = 'Intelligence' AND HA.attribute_value > 80 /* Answer the following: Which publisher has the most superheroes? most superheroes refers to max(count(publisher_id)); */ SELECT P.publisher_name FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id GROUP BY P.id ORDER BY COUNT(S.publisher_id) DESC LIMIT 1 /* Answer the following: How many superheroes have the superpower of 'Flight' and are aligned with 'good'? 'Flight' refers to power_name = 'Flight' and power_id = superpower.id; 'good' refers to alignment = 'good' and alignment_id = alignment.id; */ SELECT COUNT(*) FROM superhero AS S INNER JOIN hero_power AS HP ON S.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id INNER JOIN alignment AS A ON S.alignment_id = A.id WHERE SP.power_name = 'Flight' AND A.alignment = 'good'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'
SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Blond'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Blue' AND T3.publisher_name = 'Marvel Comics'
SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT CAST(SUM(CASE WHEN T4.power_name = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'
SELECT T5.publisher_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T5 ON T1.publisher_id = T5.id WHERE T3.attribute_name = 'Speed' AND T2.attribute_value = ( SELECT MIN(T2.attribute_value) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' )
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'
SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value ASC LIMIT 1 /* Answer the following: What is the most common superpower? the most common superpower refers to MAX(power_id) */ SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T1.power_id ORDER BY COUNT(T1.hero_id) DESC LIMIT 1 /* Answer the following: Which superhero has the most superpowers? superhero with the most superpowers refers to MAX(hero_id) */ SELECT T2.superhero_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id GROUP BY T1.hero_id ORDER BY COUNT(T1.power_id) DESC LIMIT 1 /* Answer the following: What is the most common race among superheroes? the most common race refers to MAX(race_id) */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id GROUP BY T1.race_id ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which superhero is the tallest? the tallest superhero refers to MAX(height_cm) */ SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1 /* Answer the following: Which superhero is the heaviest? the heaviest superhero refers to MAX(weight_kg) */ SELECT superhero_name FROM superhero ORDER BY weight_kg DESC LIMIT 1 /* Answer the following: Which superhero has the most attributes? superhero with the most attributes refers to MAX(hero_id) */ SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id GROUP BY T1.hero_id ORDER BY COUNT(T1.attribute_id) DESC LIMIT 1 /* Answer the following: What is the most common attribute among superheroes? the most common attribute refers to MAX(attribute_id) */ SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id GROUP BY T1.attribute_id ORDER BY COUNT(T1.hero_id) DESC LIMIT 1 /* Answer the following: Which superhero has the most unique superpowers? superhero with the most unique superpowers refers to MAX(hero_id) */ SELECT T2.superhero_name FROM (SELECT hero_id, COUNT(DISTINCT power_id) AS unique_powers FROM hero_power GROUP BY hero_id) AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id ORDER BY T1.unique_powers DESC LIMIT 1
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'
SELECT COUNT(*) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
SELECT CAST(COUNT(CASE WHEN T1.alignment = 'Bad' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id), COUNT(CASE WHEN T1.alignment = 'Bad' AND T3.publisher_name = 'Marvel Comics' THEN T2.id ELSE NULL END) FROM alignment AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.alignment_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id
SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference FROM superhero
SELECT id FROM publisher WHERE publisher_name = 'Star Trek'
SELECT AVG(attribute_value) FROM hero_attribute
SELECT COUNT(id) FROM superhero WHERE full_name IS NULL
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75 /* Answer the following: What are the superpowers of superhero with superhero ID 20? superpowers refer to power_name where power_id = hero_power.power_id; */ SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 20 /* Answer the following: What is the gender of superhero with superhero ID 45? gender refers to gender where gender_id = gender.id; */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.id = 45 /* Answer the following: What is the race of superhero with superhero ID 30? race refers to race where race_id = race.id; */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 30 /* Answer the following: What is the alignment of superhero with superhero ID 60? alignment refers to alignment where alignment_id = alignment.id; */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.id = 60 /* Answer the following: What is the publisher of superhero with superhero ID 90? publisher refers to publisher_name where publisher_id = publisher.id; */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 90 /* Answer the following: What are the attributes of superhero with superhero ID 10? attributes refer to attribute_name where attribute_id = hero_attribute.attribute_id; */ SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.hero_id = 10
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2
SELECT T3.power_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T3 ON T4.power_id = T3.id WHERE T2.gender = 'Male' LIMIT 5 /* Answer the following: Provide the names of superheroes who have the attribute of 'Super Strength'. 'Super Strength' refers to attribute_name = 'Super Strength'; names of superheroes refer to superhero_name; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Super Strength' /* Answer the following: Indicate the full name of superheroes who are aligned with 'Good'. 'Good' refers to alignment = 'Good'; full name refers to full_name; */ SELECT T1.full_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Good' /* Answer the following: List the names of superheroes who are published by 'Marvel Comics'. 'Marvel Comics' refers to publisher_name = 'Marvel Comics'; names of superheroes refer to superhero_name; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' /* Answer the following: Provide the names of superheroes who belong to the 'Mutant' race. 'Mutant' refers to race = 'Mutant'; names of superheroes refer to superhero_name; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Mutant'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id IS NULL
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56
SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5 /* Answer the following: What is the superpower of the superhero named 'Superman'? Superman refers to superhero_name = 'Superman' */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN superpower AS T2 ON T1.id = T2.id WHERE T1.superhero_name = 'Superman' /* Answer the following: List all the superheroes who have the attribute of 'Strength' greater than 80. Strength refers to attribute_name = 'Strength' and greater than 80 refers to attribute_value > 80 */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value > 80 /* Answer the following: What is the alignment of the superhero named 'Batman'? Batman refers to superhero_name = 'Batman' */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.superhero_name = 'Batman' /* Answer the following: List all the superheroes who are published by 'Marvel Comics'. Marvel Comics refers to publisher_name = 'Marvel Comics' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(id) FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Bad' )
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169 /* Answer the following: What is the superpower of the superhero who is 200 cm tall? 200 cm tall refers to height_cm = 200 */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.height_cm = 200 /* Answer the following: What is the attribute value of the superhero who has blue eyes? blue eyes refers to eye_colour_id where colour = 'Blue' */ SELECT T3.attribute_value FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T2.colour = 'Blue' /* Answer the following: What is the gender of the superhero who has the power of invisibility? power of invisibility refers to power_id where power_name = 'Invisibility' */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Invisibility' /* Answer the following: What is the alignment of the superhero who has the attribute of strength value 100? attribute of strength value 100 refers to attribute_id where attribute_name = 'Strength' and attribute_value = 100 */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Strength' AND T3.attribute_value = 100 /* Answer the following: What is the publisher of the superhero who has the power of flight and weighs 80 kg? power of flight refers to power_id where power_name = 'Flight'; weighs 80 kg refers to weight_kg = 80 */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Flight' AND T1.weight_kg = 80
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T1.height_cm = 185 AND T3.race = 'Human'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the superpower of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); superpower refers to power_name where hero_id = superhero.id; */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the attribute of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); attribute refers to attribute_name where hero_id = superhero.id; */ SELECT T2.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the race of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); race refers to race where race_id = race.id; */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the publisher of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); publisher refers to publisher_name where publisher_id = publisher.id; */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the alignment of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); alignment refers to alignment where alignment_id = alignment.id; */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1
SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180 /* Answer the following: Among the superheroes who have the superpower of 'Super Strength', what is the percentage of those who are female? 'Super Strength' refers to power_name = 'Super Strength'; female refers to gender = 'Female'; percentage = divide(count(hero_id where gender = 'Female'), count(hero_id)) * 100% where power_name = 'Super Strength' */ SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN gender AS T3 ON T1.hero_id = T3.id WHERE T2.power_name = 'Super Strength' /* Answer the following: Among the superheroes who have the attribute of 'Intelligence' with a value over 80, what is the percentage of those who are aligned as 'Good'? 'Intelligence' refers to attribute_name = 'Intelligence'; value over 80 refers to attribute_value > 80; 'Good' refers to alignment = 'Good'; percentage = divide(count(hero_id where alignment = 'Good'), count(hero_id)) * 100% where attribute_name = 'Intelligence' and attribute_value > 80 */ SELECT CAST(COUNT(CASE WHEN T4.alignment = 'Good' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id INNER JOIN alignment AS T4 ON T3.alignment_id = T4.id WHERE T2.attribute_name = 'Intelligence' AND T1.attribute_value > 80 /* Answer the following: Among the superheroes who are published by DC Comics, what is the percentage of those who are of the race 'Human'? 'DC Comics' refers to publisher_name = 'DC Comics'; 'Human' refers to race = 'Human'; percentage = divide(count(hero_id where race = 'Human'), count(hero_id)) * 100% where publisher_name = 'DC Comics' */ SELECT CAST(COUNT(CASE WHEN T4.race = 'Human' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T4 ON T1.race_id = T4.id WHERE T2.publisher_name = 'DC Comics'
SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg > ( SELECT AVG(weight_kg) * 0.79 FROM superhero )
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1
SELECT T2.attribute_name, T3.attribute_value FROM superhero AS T1 INNER JOIN attribute AS T2 ON T1.id = T3.hero_id INNER JOIN hero_attribute AS T3 ON T2.id = T3.attribute_id WHERE T1.superhero_name = 'Abomination'
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1 /* Answer the following: What is the full name and alignment of the superhero with ID 5? full name refers to full_name; alignment refers to alignment; superhero with ID 5 refers to superhero.id = 5; */ SELECT T1.full_name, T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.id = 5 /* Answer the following: What are the attributes of the superhero with ID 10? attributes refers to attribute_name; superhero with ID 10 refers to hero_id = 10; */ SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.hero_id = 10 /* Answer the following: What is the race and publisher of the superhero with ID 20? race refers to race; publisher refers to publisher_name; superhero with ID 20 refers to superhero.id = 20; */ SELECT T2.race, T3.publisher_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T1.id = 20 /* Answer the following: What is the gender and skin colour of the superhero with ID 30? gender refers to gender; skin colour refers to colour; superhero with ID 30 refers to superhero.id = 30; */ SELECT T2.gender, T3.colour FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T1.id = 30
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'stealth'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'strength' ORDER BY T2.attribute_value DESC LIMIT 1 /* Answer the following: What is the name of the superpower most common among superheroes with alignment 'good'? most common refers to COUNT(power_id); alignment 'good' refers to alignment = 'good' */ SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T4.alignment = 'good' GROUP BY T3.power_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1 /* Answer the following: What is the name of the publisher with the most superheroes with race 'Human'? most superheroes refers to COUNT(id); race 'Human' refers to race = 'Human' */ SELECT T3.publisher_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.race = 'Human' GROUP BY T3.publisher_name ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: What is the most common hair colour among superheroes with gender 'Female'? most common refers to COUNT(hair_colour_id); gender 'Female' refers to gender = 'Female' */ SELECT T3.colour FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.gender = 'Female' GROUP BY T3.colour ORDER BY COUNT(T1.hair_colour_id) DESC LIMIT 1 /* Answer the following: What is the average height of superheroes with alignment 'bad'? average height refers to AVG(height_cm); alignment 'bad' refers to alignment = 'bad' */ SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'bad'
SELECT CAST(COUNT(CASE WHEN T2.colour = 'No Skin Colour' THEN 1 ELSE NULL END) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id /* Answer the following: What is the percentage of superheroes who have the superpower 'Flying'? percentage = DIVIDE(COUNT(superpower.power_name = 'Flying'), COUNT(superhero.id)) * 100.0; 'Flying' refers to power_name = 'Flying'; */ SELECT CAST(COUNT(CASE WHEN T2.power_name = 'Flying' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id /* Answer the following: What is the average weight of superheroes who are aligned 'Good'? average weight = DIVIDE(SUM(weight_kg), COUNT(superhero.id)); 'Good' refers to alignment.alignment = 'Good'; */ SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(CASE WHEN T2.alignment = 'Good' THEN 1 ELSE NULL END) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id /* Answer the following: What is the percentage of superheroes who are female and have the attribute 'Strength'? percentage = DIVIDE(COUNT(attribute.attribute_name = 'Strength' AND gender.gender = 'Female'), COUNT(superhero.id)) * 100.0; 'Strength' refers to attribute_name = 'Strength'; 'Female' refers to gender.gender = 'Female'; */ SELECT CAST(COUNT(CASE WHEN T2.attribute_name = 'Strength' AND T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T4 ON T1.id = T4.hero_id INNER JOIN attribute AS T2 ON T4.attribute_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id /* Answer the following: What is the average height of superheroes who are published by 'Marvel Comics'? average height = DIVIDE(SUM(height_cm), COUNT(superhero.id)); 'Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'; */ SELECT CAST(SUM(T1.height_cm) AS REAL) / COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T3.attribute_name = 'durability' AND T4.publisher_name = 'Dark Horse Comics' ORDER BY T2.attribute_value DESC LIMIT 1 /* Answer the following: What is the most common superpower among female superheroes? most common superpower refers to MAX(COUNT(power_id)); female superheroes refers to gender = 'Female'; superpower refers to power_name */ SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T4.gender = 'Female' GROUP BY T3.power_name ORDER BY COUNT(T3.power_name) DESC LIMIT 1 /* Answer the following: Which superhero has the highest strength and is aligned with good? superhero refers to superhero_name; highest strength refers to MAX(attribute_value) WHERE attribute_name = 'strength'; aligned with good refers to alignment = 'good'; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T3.attribute_name = 'strength' AND T4.alignment = 'good' ORDER BY T2.attribute_value DESC LIMIT 1 /* Answer the following: What is the most common race among superheroes with blue eyes? most common race refers to MAX(COUNT(race_id)); superheroes with blue eyes refers to eye_colour = 'blue'; race refers to race */ SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.colour = 'blue' GROUP BY T3.race ORDER BY COUNT(T3.race) DESC LIMIT 1 /* Answer the following: Which superhero has the highest speed and is published by Marvel Comics? superhero refers to superhero_name; highest speed refers to MAX(attribute_value) WHERE attribute_name = 'speed'; published by Marvel Comics refers to publisher_name = 'Marvel Comics'; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T3.attribute_name = 'speed' AND T4.publisher_name = 'Marvel Comics' ORDER BY T2.attribute_value DESC LIMIT 1
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'
SELECT T2.colour AS eye_colour, T3.colour AS hair_colour, T4.colour AS skin_colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN colour AS T4 ON T1.skin_colour_id = T4.id INNER JOIN gender AS T5 ON T1.gender_id = T5.id INNER JOIN publisher AS T6 ON T1.publisher_id = T6.id WHERE T5.gender = 'Female' AND T6.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'
SELECT CAST(SUM(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.gender_id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'
SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13' /* Answer the following: What are the superpowers of the hero named 'Batman'? 'Batman' refers to superhero_name = 'Batman'; superpowers refer to power_name */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Batman' /* Answer the following: What is the race of the hero named 'Superman'? 'Superman' refers to superhero_name = 'Superman'; race refers to race */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Superman' /* Answer the following: What is the alignment of the hero named 'Wonder Woman'? 'Wonder Woman' refers to superhero_name = 'Wonder Woman'; alignment refers to alignment */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.superhero_name = 'Wonder Woman' /* Answer the following: What are the attributes of the hero named 'Iron Man'? 'Iron Man' refers to superhero_name = 'Iron Man'; attributes refer to attribute_name */ SELECT T2.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Iron Man'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'
SELECT COUNT(power_id) FROM hero_power WHERE hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Amazo' )
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.full_name = 'Hunter Zolomon'
SELECT superhero.superhero_name, superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'
SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black' /* Answer the following: List the names of superheroes who have the superpower of 'Flight'. names of superheroes refers to superhero_name; superpower of 'Flight' refers to power_name = 'Flight' */ SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight' /* Answer the following: List the names of superheroes who are 'Human' and have the attribute of 'Intelligence' greater than 80. names of superheroes refers to superhero_name; 'Human' refers to race.race = 'Human'; attribute of 'Intelligence' greater than 80 refers to attribute.attribute_name = 'Intelligence' AND hero_attribute.attribute_value > 80 */ SELECT superhero.superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE race.race = 'Human' AND attribute.attribute_name = 'Intelligence' AND hero_attribute.attribute_value > 80 /* Answer the following: List the names of superheroes who are published by 'Marvel Comics'. names of superheroes refers to superhero_name; published by 'Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics' */ SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'
SELECT T2.colour AS eye_colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'
SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' )
SELECT T1.race, T2.alignment FROM superhero AS T0 INNER JOIN race AS T1 ON T0.race_id = T1.id INNER JOIN alignment AS T2 ON T0.alignment_id = T2.id WHERE T0.superhero_name = 'Cameron Hicks'
SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.publisher_name) FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T1.publisher_name = 'Marvel Comics' AND T2.gender_id = (SELECT id FROM gender WHERE gender = 'Female')
SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
SELECT (SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END)) AS weight_difference FROM superhero
SELECT superhero_name, AVG(height_cm) FROM superhero GROUP BY superhero_name
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'
SELECT COUNT(*) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE race.race = 'god/eternal' AND gender.gender = 'Male'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1 /* Answer the following: What is the most common superpower? most common superpower refers to COUNT(power_id); superpower refers to power_name */ SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T1.power_id ORDER BY COUNT(T1.power_id) DESC LIMIT 1 /* Answer the following: What is the average weight of superheroes from DC Comics? average weight refers to AVG(weight_kg); DC Comics refers to publisher_name = 'DC Comics' */ SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' /* Answer the following: What is the most common race among superheroes? most common race refers to COUNT(race_id); race refers to race */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id GROUP BY T1.race_id ORDER BY COUNT(T1.race_id) DESC LIMIT 1 /* Answer the following: What is the most common eye colour among superheroes? most common eye colour refers to COUNT(eye_colour_id); eye colour refers to colour */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id GROUP BY T1.eye_colour_id ORDER BY COUNT(T1.eye_colour_id) DESC LIMIT 1 /* Answer the following: What is the most common hair colour among superheroes? most common hair colour refers to COUNT(hair_colour_id); hair colour refers to colour */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id GROUP BY T1.hair_colour_id ORDER BY COUNT(T1.hair_colour_id) DESC LIMIT 1 /* Answer the following: What is the most common skin colour among superheroes? most common skin colour refers to COUNT(skin_colour_id); skin colour refers to colour */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id GROUP BY T1.skin_colour_id ORDER BY COUNT(T1.skin_colour_id) DESC LIMIT 1 /* Answer the following: What is the most common alignment among superheroes? most common alignment refers to COUNT(alignment_id); alignment refers to alignment */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id GROUP BY T1.alignment_id ORDER BY COUNT(T1.alignment_id) DESC LIMIT 1 /* Answer the following: What is the most common gender among superheroes? most common gender refers to COUNT(gender_id); gender refers to gender */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id GROUP BY T1.gender_id ORDER BY COUNT(T1.gender_id) DESC LIMIT 1 /* Answer the following: What is the average height of superheroes from Marvel Comics? average height refers to AVG(height_cm); Marvel Comics refers to publisher_name = 'Marvel Comics' */ SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(id) FROM superhero WHERE alignment_id = 3 /* Answer the following: How many superheroes have the superpower of flight? flight refers to power_name = 'Flight'; */ SELECT COUNT(hero_id) FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Flight') /* Answer the following: How many superheroes are published by Marvel Comics? Marvel Comics refers to publisher_name = 'Marvel Comics'; */ SELECT COUNT(id) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') /* Answer the following: How many superheroes are male? male refers to gender_id = 1; */ SELECT COUNT(id) FROM superhero WHERE gender_id = 1 /* Answer the following: How many superheroes have blue eyes? blue eyes refers to eye_colour_id = 1; */ SELECT COUNT(id) FROM superhero WHERE eye_colour_id = 1 /* Answer the following: How many superheroes have the attribute of strength over 100? strength over 100 refers to attribute_id = 1 and attribute_value > 100; */ SELECT COUNT(hero_id) FROM hero_attribute WHERE attribute_id = 1 AND attribute_value > 100 /* Answer the following: How many superheroes are of the human race? human race refers to race_id = 1; */ SELECT COUNT(id) FROM superhero WHERE race_id = 1 /* Answer the following: How many superheroes have black hair? black hair refers to hair_colour_id = 1; */ SELECT COUNT(id) FROM superhero WHERE hair_colour_id = 1 /* Answer the following: How many superheroes have a skin colour other than white? white skin colour refers to skin_colour_id = 1; */ SELECT COUNT(id) FROM superhero WHERE skin_colour_id != 1
SELECT T2.attribute_name, T3.attribute_value FROM superhero AS T1 INNER JOIN attribute AS T2 ON T1.id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T1.superhero_name = '3-D Man'
SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.eye_colour_id = 7 AND T1.hair_colour_id = 9 /* Answer the following: What are the attributes of the superhero 'Superman'? 'Superman' refers to superhero_name = 'Superman'; attributes refers to attribute_name; */ SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Superman' /* Answer the following: What are the superpowers of the superhero 'Batman'? 'Batman' refers to superhero_name = 'Batman'; superpowers refers to power_name; */ SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Batman' /* Answer the following: Which superheroes are published by 'Marvel Comics'? 'Marvel Comics' refers to publisher_name = 'Marvel Comics'; superheroes refers to superhero_name; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' /* Answer the following: Which superheroes are female and have the superpower 'Flight'? female refers to gender_id = 2; 'Flight' refers to power_name = 'Flight'; superheroes refers to superhero_name; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.gender = 'Female' AND T4.power_name = 'Flight'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
SELECT COUNT(id) FROM superhero WHERE publisher_id IS NULL /* Answer the following: How many superheroes are female and have the power of invisibility? female refers to gender_id where gender.gender = 'Female'; power of invisibility refers to power_id where superpower.power_name = 'Invisibility'; */ SELECT COUNT(DISTINCT superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Female' AND superpower.power_name = 'Invisibility' /* Answer the following: What is the average weight of superheroes who are aligned with 'Good'? aligned with 'Good' refers to alignment_id where alignment.alignment = 'Good'; */ SELECT AVG(weight_kg) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Good' /* Answer the following: How many superheroes have the attribute of 'Strength' greater than 80? attribute of 'Strength' refers to attribute_id where attribute.attribute_name = 'Strength'; greater than 80 refers to hero_attribute.attribute_value > 80; */ SELECT COUNT(DISTINCT superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value > 80 /* Answer the following: How many superheroes have blue eyes and red hair? blue eyes refers to eye_colour_id where colour.colour = 'Blue'; red hair refers to hair_colour_id where colour.colour = 'Red'; */ SELECT COUNT(DISTINCT superhero.id) FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Red'
SELECT CAST(SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id /* Answer the following: What percentage of superheroes are female? percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE gender_id = 2), COUNT(superhero_name)), 100.0); female refers to gender_id = 2; */ SELECT CAST(SUM(CASE WHEN T1.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id /* Answer the following: What percentage of superheroes have the superpower of 'flight'? percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE power_id = 1), COUNT(superhero_name)), 100.0); flight refers to power_id = 1; */ SELECT CAST(SUM(CASE WHEN T1.power_id = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.superhero_name) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id /* Answer the following: What percentage of superheroes are from the 'Marvel Comics' publisher? percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE publisher_id = 1), COUNT(superhero_name)), 100.0); 'Marvel Comics' refers to publisher_id = 1; */ SELECT CAST(SUM(CASE WHEN T1.publisher_id = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id /* Answer the following: What percentage of superheroes have the attribute of 'strength'? percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE attribute_id = 1), COUNT(superhero_name)), 100.0); 'strength' refers to attribute_id = 1; */ SELECT CAST(SUM(CASE WHEN T1.attribute_id = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.superhero_name) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id /* Answer the following: What percentage of superheroes are of the 'Human' race? percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE race_id = 1), COUNT(superhero_name)), 100.0); 'Human' refers to race_id = 1; */ SELECT CAST(SUM(CASE WHEN T1.race_id = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id
SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1 /* Answer the following: What is the name of the heaviest superhero? heaviest superhero refers to MAX(weight_kg); */ SELECT superhero_name FROM superhero ORDER BY weight_kg DESC LIMIT 1 /* Answer the following: What is the name of the tallest superhero who has the power of flight? tallest superhero refers to MAX(height_cm); power of flight refers to power_name = 'flight'; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'flight' ORDER BY T1.height_cm DESC LIMIT 1 /* Answer the following: What is the name of the tallest superhero who is a human? tallest superhero refers to MAX(height_cm); human refers to race = 'human'; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'human' ORDER BY T1.height_cm DESC LIMIT 1 /* Answer the following: What is the name of the tallest superhero who is a female? tallest superhero refers to MAX(height_cm); female refers to gender = 'female'; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'female' ORDER BY T1.height_cm DESC LIMIT 1 /* Answer the following: What is the name of the tallest superhero who is aligned with good? tallest superhero refers to MAX(height_cm); aligned with good refers to alignment = 'good'; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'good' ORDER BY T1.height_cm DESC LIMIT 1 /* Answer the following: What is the name of the tallest superhero who is published by Marvel Comics? tallest superhero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1
SELECT id FROM superpower WHERE power_name = 'cryokinesis'
SELECT superhero_name FROM superhero WHERE id = 294 /* Answer the following: List down the superpowers of superhero with superhero ID 294. superpowers refers to power_name; superhero ID 294 refers to superhero.id = 294; */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.id = 294 /* Answer the following: Provide the full name and gender of superhero with superhero ID 294. full name refers to full_name; gender refers to gender; superhero ID 294 refers to superhero.id = 294; */ SELECT T1.full_name, T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.id = 294 /* Answer the following: Provide the race and alignment of superhero with superhero ID 294. race refers to race; alignment refers to alignment; superhero ID 294 refers to superhero.id = 294; */ SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.id = 294 /* Answer the following: Provide the attributes of superhero with superhero ID 294. attributes refers to attribute_name and attribute_value; superhero ID 294 refers to superhero.id = 294; */ SELECT T2.attribute_name, T3.attribute_value FROM superhero AS T1 INNER JOIN attribute AS T2 ON T1.id = T3.hero_id INNER JOIN hero_attribute AS T3 ON T2.id = T3.attribute_id WHERE T1.id = 294 /* Answer the following: Provide the publisher of superhero with superhero ID 294. publisher refers to publisher_name; superhero ID 294 refers to superhero.id = 294; */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 294
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188 /* Answer the following: List the superpowers of the superhero named 'Superman'. superhero named 'Superman' refers to superhero_name = 'Superman'; */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN superpower AS T2 ON T1.id = T2.id WHERE T1.superhero_name = 'Superman' /* Answer the following: What is the gender of the superhero with the power of 'Flight'? power of 'Flight' refers to power_name = 'Flight'; */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Flight' /* Answer the following: What is the alignment of the superhero who has the attribute 'Strength' with a value of 100? attribute 'Strength' with a value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100; */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Strength' AND T3.attribute_value = 100 /* Answer the following: Who is the superhero published by 'Marvel Comics' with the highest weight? published by 'Marvel Comics' refers to publisher_name = 'Marvel Comics'; highest weight refers to MAX(weight_kg); */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the eye colour of the superhero who has the power of 'Invisibility'? power of 'Invisibility' refers to power_name = 'Invisibility'; */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Invisibility'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38
SELECT T1.race FROM race AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.race_id INNER JOIN hero_attribute AS T3 ON T2.id = T3.hero_id WHERE T3.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )
SELECT T1.alignment, T4.power_name FROM alignment AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.alignment_id INNER JOIN hero_power AS T3 ON T2.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.superhero_name = 'Atom IV'
SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5 /* Answer the following: How many superheroes are there in the Marvel Universe? Marvel Universe refers to publisher.publisher_name = 'Marvel Comics' WHERE publisher_id = publisher.id; */ SELECT COUNT(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' /* Answer the following: What is the average height of superheroes who have the superpower of 'Flight'? superpower of 'Flight' refers to superpower.power_name = 'Flight' WHERE power_id = superpower.id; */ SELECT AVG(superhero.height_cm) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight' /* Answer the following: List all the attributes of the superhero 'Superman'. 'Superman' refers to superhero.superhero_name = 'Superman' WHERE hero_id = superhero.id; */ SELECT attribute.attribute_name, hero_attribute.attribute_value FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Superman' /* Answer the following: How many female superheroes are there in the DC Universe? female superheroes refers to gender.gender = 'Female' WHERE gender_id = gender.id; DC Universe refers to publisher.publisher_name = 'DC Comics' WHERE publisher_id = publisher.id; */ SELECT COUNT(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'DC Comics'
SELECT AVG(T2.attribute_value) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.alignment_id = 3 /* Answer the following: What is the average height of superheroes with the superpower of "Super Strength"? average height = AVG(height_cm); "Super Strength" refers to power_name = 'Super Strength'; */ SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' /* Answer the following: What is the average weight of superheroes published by "Marvel Comics"? average weight = AVG(weight_kg); "Marvel Comics" refers to publisher_name = 'Marvel Comics'; */ SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' /* Answer the following: What is the average attribute value of all female superheroes? average = AVG(attribute_value); female superheroes refers to gender_id = 2; */ SELECT AVG(T2.attribute_value) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.gender_id = 2 /* Answer the following: What is the average height of superheroes with the race "Human"? average height = AVG(height_cm); "Human" refers to race = 'Human'; */ SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Human' /* Answer the following: What is the average weight of superheroes with blue eyes? average weight = AVG(weight_kg); blue eyes refers to eye_colour_id = 1; */ SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = 100 /* Answer the following: List the names of superheroes who have the power of 'flight'. names of superheroes refer to superhero_name; power of 'flight' refers to power_name = 'flight'; */ SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'flight' /* Answer the following: Count the number of superheroes who are 'female' and have 'blue' eye colour. 'female' refers to gender.gender = 'female'; 'blue' eye colour refers to colour.colour = 'blue' and eye_colour_id = colour.id; */ SELECT COUNT(*) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE gender.gender = 'female' AND colour.colour = 'blue' /* Answer the following: List the names of superheroes who are from the 'Marvel Comics' publisher. names of superheroes refer to superhero_name; 'Marvel Comics' publisher refers to publisher.publisher_name = 'Marvel Comics'; */ SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' /* Answer the following: What is the average height of superheroes who are 'Human'? average height refers to AVG(height_cm); 'Human' refers to race.race = 'Human'; */ SELECT AVG(superhero.height_cm) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Human'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 1 AND T3.id = 2
SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80 /* Answer the following: List the superheroes who have superpower named 'Flight' and their alignment is 'Good'. superpower named 'Flight' refers to power_name = 'Flight'; alignment is 'Good' refers to alignment = 'Good'; */ SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T3.power_name = 'Flight' AND T4.alignment = 'Good' /* Answer the following: Give the names of superheroes who are published by 'Marvel Comics' and their race is 'Mutant'. published by 'Marvel Comics' refers to publisher_name = 'Marvel Comics'; race is 'Mutant' refers to race = 'Mutant'; */ SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.race = 'Mutant' /* Answer the following: List the superheroes who have attribute named 'Strength' with a value greater than 90. attribute named 'Strength' refers to attribute_name = 'Strength'; value greater than 90 refers to attribute_value > 90; */ SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value > 90 /* Answer the following: Provide the names of female superheroes who have superpower named 'Telepathy'. female superheroes refers to gender = 'Female'; superpower named 'Telepathy' refers to power_name = 'Telepathy'; */ SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Telepathy' AND T4.gender = 'Female'
SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'blue' AND T4.gender = 'male'
SELECT CAST(SUM(CASE WHEN T2.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.alignment_id = 2
SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) AS DIFF FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength' /* Answer the following: What is the race of Superman? race of Superman refers to race; Superman refers to superhero_name = 'Superman'; */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Superman' /* Answer the following: What are the superpowers of Wonder Woman? superpowers of Wonder Woman refers to power_name; Wonder Woman refers to superhero_name = 'Wonder Woman'; */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Wonder Woman' /* Answer the following: Who is the publisher of Batman? publisher of Batman refers to publisher_name; Batman refers to superhero_name = 'Batman'; */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Batman' /* Answer the following: What is the gender of Black Widow? gender of Black Widow refers to gender; Black Widow refers to superhero_name = 'Black Widow'; */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Black Widow' /* Answer the following: What is the alignment of Joker? alignment of Joker refers to alignment; Joker refers to superhero_name = 'Joker'; */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.superhero_name = 'Joker' /* Answer the following: What is the eye colour of Thor? eye colour of Thor refers to colour; Thor refers to superhero_name = 'Thor'; */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Thor' /* Answer the following: What is the hair colour of Iron Man? hair colour of Iron Man refers to colour; Iron Man refers to superhero_name = 'Iron Man'; */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T1.superhero_name = 'Iron Man' /* Answer the following: What is the skin colour of Hulk? skin colour of Hulk refers to colour; Hulk refers to superhero_name = 'Hulk'; */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Hulk' /* Answer the following: What is the height of Captain America? height of Captain America refers to height_cm; Captain America refers to superhero_name = 'Captain America'; */ SELECT T1.height_cm FROM superhero AS T1 WHERE T1.superhero_name = 'Captain America' /* Answer the following: What is the weight of Spider-Man? weight of Spider-Man refers to weight_kg; Spider-Man refers to superhero_name = 'Spider-Man'; */ SELECT T1.weight_kg FROM superhero AS T1 WHERE T1.superhero_name = 'Spider-Man'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name ASC
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Phoenix Force'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1
SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.race <> 'Human' AND T3.publisher_name = 'Dark Horse Comics'
SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' AND T2.attribute_value = 100 /* Answer the following: List the superheroes who have the power of invisibility. power of invisibility refers to power_name = 'Invisibility' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Invisibility' /* Answer the following: Give the name of the superhero with the highest weight. highest weight refers to MAX(weight_kg) */ SELECT T1.superhero_name FROM superhero AS T1 ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: List the superheroes who are published by 'Marvel Comics'. published by 'Marvel Comics' refers to publisher_name = 'Marvel Comics' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' /* Answer the following: Count the number of superheroes who are female and have the power of flight. female refers to gender = 'Female'; power of flight refers to power_name = 'Flight' */ SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.gender = 'Female' AND T4.power_name = 'Flight'
SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference FROM superhero
SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = 'Black Panther' ORDER BY T1.attribute_value LIMIT 1
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1 /* Answer the following: What is the superpower of the tallest superhero? tallest superhero refers to MAX(height_cm); */ SELECT power_name FROM superpower WHERE id IN (SELECT power_id FROM hero_power WHERE hero_id = (SELECT id FROM superhero ORDER BY height_cm DESC LIMIT 1)) /* Answer the following: What is the attribute of the tallest superhero? tallest superhero refers to MAX(height_cm); */ SELECT attribute_name FROM attribute WHERE id IN (SELECT attribute_id FROM hero_attribute WHERE hero_id = (SELECT id FROM superhero ORDER BY height_cm DESC LIMIT 1))
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'
SELECT CAST(SUM(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'George Lucas'
SELECT CAST(SUM(CASE WHEN T5.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T5 ON T1.alignment_id = T5.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'
SELECT hero_id FROM hero_attribute ORDER BY attribute_value LIMIT 1
SELECT full_name FROM superhero WHERE superhero_name = 'Alien'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'brown'
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'
SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40 /* Answer the following: List the names of superheroes who have the superpower with superpower ID 5. superpower ID 5 refers to superpower.id = 5; */ SELECT T2.superhero_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.power_id = 5 /* Answer the following: Identify the gender of the superhero with superhero ID 20. superhero ID 20 refers to superhero.id = 20; */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.id = 20 /* Answer the following: Provide the full name and alignment of the superhero with superhero ID 30. superhero ID 30 refers to superhero.id = 30; */ SELECT T1.full_name, T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.id = 30 /* Answer the following: List the names of superheroes who have the attribute with attribute ID 10. attribute ID 10 refers to attribute.id = 10; */ SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_id = 10 /* Answer the following: Identify the publisher of the superhero with superhero ID 50. superhero ID 50 refers to superhero.id = 50; */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 50
SELECT AVG(height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'neutral'
SELECT T1.id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'
SELECT DISTINCT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm > 0.8 * ( SELECT AVG(height_cm) FROM superhero )
SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 18 ORDER BY T2.q1 DESC LIMIT 5 /* Answer the following: What is the name of the constructor who has the most wins in the 2008 season? name of the constructor refers to name; most wins refers to MAX(wins); 2008 season refers to year = 2008; */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap time in the 2010 season? driver refers to forename, surname; fastest lap time refers to MIN(fastestLapTime); 2010 season refers to year = 2010; */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T2.fastestLapTime LIMIT 1 /* Answer the following: What is the name of the circuit where the race with the most pit stops in the 2012 season took place? name of the circuit refers to name; most pit stops refers to MAX(stop); 2012 season refers to year = 2012; */ SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T2.year = 2012 ORDER BY T3.stop DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 2014 season? driver refers to forename, surname; most points refers to MAX(points); 2014 season refers to year = 2014; */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2014 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the constructor with the most points in the 2016 season? name of the constructor refers to name; most points refers to MAX(points); 2016 season refers to year = 2016; */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2016 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in the 2018 season? driver refers to forename, surname; most wins refers to MAX(wins); 2018 season refers to year = 2018; */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2018 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the constructor with the most wins in the 2020 season? name of the constructor refers to name; most wins refers to MAX(wins); 2020 season refers to year = 2020; */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2020 ORDER BY T2.wins DESC LIMIT 1
SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2008 season? 2008 season refers to year = 2008; most wins refers to MAX(wins); */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 2010 season? 2010 season refers to year = 2010; most points refers to MAX(points); */ SELECT T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race with the most pit stops took place? most pit stops refers to MAX(stop); */ SELECT T2.name FROM pitStops AS T1 INNER JOIN circuits AS T2 ON T1.raceId = T2.circuitId GROUP BY T1.raceId ORDER BY MAX(T1.stop) DESC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the most points in the 2012 season? 2012 season refers to year = 2012; most points refers to MAX(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2012 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the race with the most pit stops? fastest lap refers to MIN(fastestLapTime); most pit stops refers to MAX(stop); */ SELECT T3.forename, T3.surname FROM results AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId GROUP BY T2.raceId ORDER BY MAX(T2.stop), MIN(T1.fastestLapTime) LIMIT 1
SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'
SELECT url FROM races WHERE circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya' )
SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'
SELECT T1.position FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN constructorResults AS T3 ON T2.raceId = T3.raceId INNER JOIN constructors AS T4 ON T3.constructorId = T4.constructorId WHERE T4.name = 'Renault'
SELECT COUNT(raceId) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE year = 2010 AND circuits.location NOT IN ('Asia', 'Europe')
SELECT races.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain'
SELECT lat, lng FROM circuits WHERE name LIKE 'Australian Grand Prix' /* Answer the following: What is the nationality of the driver who won the race in 2019? */ SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2019 AND T2.position = 1 /* Answer the following: What is the name of the constructor who won the most races in 2018? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2018 GROUP BY T1.name ORDER BY COUNT(T2.status) DESC LIMIT 1 /* Answer the following: What is the fastest lap time and who is the driver for the race in 2017? */ SELECT T1.forename, T1.surname, T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2017 ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 2016 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 2016 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 2015? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2015 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 2014? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2014 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 2013? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2013 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 2012 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 2012 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 2011? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2011 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 2010? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 2009? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 2008 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 2008 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 2007? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2007 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 2006? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2006 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 2005? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2005 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 2004 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 2004 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 2003? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2003 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 2002? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2002 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 2001? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2001 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 2000 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 2000 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1999? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1999 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1998? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1998 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1997? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1997 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 1996 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 1996 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1995? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1995 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1994? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1994 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1993? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1993 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 1992 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 1992 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1991? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1991 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1990? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1990 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1989? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1989 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 1988 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 1988 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1987? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1987 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1986? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1986 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1985? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1985 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 1984 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 1984 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1983? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1983 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1982? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1982 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1981? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1981 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 1980 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 1980 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1979? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1979 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1978? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1978 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1977? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1977 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 1976 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 1976 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1975? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1975 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1974? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1974 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1973? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1973 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 1972 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 1972 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1971? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1971 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1970? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1970 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1969? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1969 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 1968 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 1968 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1967? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1967 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1966? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1966 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1965? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1965 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 1964 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 1964 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1963? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1963 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1962? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1962 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1961? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1961 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the race was held in 1960 and who won the race? */ SELECT T1.name, T2.forename, T2.surname FROM circuits AS T1 INNER JOIN drivers AS T2 ON T1.circuitId = T2.driverId INNER JOIN results AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 1960 AND T3.position = 1 /* Answer the following: What is the name of the driver who had the most pit stops in 1959? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1959 GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 1958? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1958 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in 1957? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1957 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of
SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit')
SELECT races.time FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit'
SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix' /* Answer the following: What is the nationality of the constructor with the name 'Ferrari'? */ SELECT nationality FROM constructors WHERE name = 'Ferrari' /* Answer the following: What is the date of the race named 'British Grand Prix' in the year 2020? */ SELECT date FROM races WHERE name = 'British Grand Prix' AND year = 2020 /* Answer the following: Who is the driver with the number 44? */ SELECT forename, surname FROM drivers WHERE number = 44 /* Answer the following: How many points did the constructor with the id 1 score in the race with the id 2? */ SELECT points FROM constructorResults WHERE constructorId = 1 AND raceId = 2 /* Answer the following: What is the fastest lap time in the race with the id 3? */ SELECT fastestLapTime FROM results WHERE raceId = 3 /* Answer the following: How many pit stops did the driver with the id 4 make in the race with the id 5? */ SELECT COUNT(*) FROM pitStops WHERE driverId = 4 AND raceId = 5 /* Answer the following: What is the status of the driver with the id 6 in the race with the id 7? */ SELECT status FROM status WHERE statusId = (SELECT statusId FROM results WHERE driverId = 6 AND raceId = 7)
SELECT T3.country FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN circuits AS T3 ON T2.constructorId = T3.circuitId WHERE T1.points = 1 AND T1.raceId = 24
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND raceId = 354 /* Answer the following: What's the nationality of the constructor who won the race No. 354? race number refers to raceId; */ SELECT nationality FROM constructors WHERE constructorId = (SELECT constructorId FROM results WHERE raceId = 354 AND position = 1) /* Answer the following: What's the location of the circuit where the race No. 354 was held? race number refers to raceId; */ SELECT location FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE raceId = 354) /* Answer the following: What's the fastest lap time in the race No. 354? race number refers to raceId; */ SELECT fastestLapTime FROM results WHERE raceId = 354 AND fastestLapTime IS NOT NULL ORDER BY fastestLapTime ASC LIMIT 1 /* Answer the following: Who is the driver with the most wins in the season 2008? */ SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM driverStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) ORDER BY wins DESC LIMIT 1)
SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q2 = '0:01:40' AND T2.raceId = 355 /* Answer the following: What is the name of the circuit where the race with ID 10 took place? */ SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.raceId = 10 /* Answer the following: What is the name of the constructor who won the race with ID 20? */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 20 AND T2.positionOrder = 1 /* Answer the following: What is the nationality of the driver who had the fastest lap in the race with ID 30? */ SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 30 AND T2.rank = 1 /* Answer the following: What is the name of the driver who had the fastest pit stop in the race with ID 40? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 40 ORDER BY T2.milliseconds ASC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in the race with ID 50? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 50 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most points in the race with ID 60? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 60 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in the season of year 2008? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2008) ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most wins in the season of year 2008? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2008) ORDER BY T2.wins DESC LIMIT 1
SELECT number FROM drivers WHERE driverId = ( SELECT driverId FROM qualifying WHERE q3 = '0:01:54' AND raceId = 903 )
SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Bahrain Grand Prix' AND T2.year = 2007 AND T1.time IS NULL
SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901 /* Answer the following: What is the nationality of the constructor who got the result ID 842? */ SELECT T2.nationality FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.resultId = 842 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 AND T1.fastestLap IS NOT NULL ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: What is the name of the circuit where the race with ID 841 took place? */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 841 /* Answer the following: What is the name of the constructor who won the race with ID 841? */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 841 AND T1.positionOrder = 1 /* Answer the following: What is the name of the driver who won the race with ID 841? */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 AND T1.positionOrder = 1 /* Answer the following: What is the name of the driver who got the pole position in the race with ID 841? */ SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 AND T1.position = 1 /* Answer the following: What is the name of the constructor who got the pole position in the race with ID 841? */ SELECT T2.name FROM qualifying AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 841 AND T1.position = 1 /* Answer the following: What is the name of the driver who made the fastest pit stop in the race with ID 841? */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the most pit stops in the race with ID 841? */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least pit stops in the race with ID 841? */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) ASC LIMIT 1 /* Answer the following: What is the name of the driver who made the fastest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds LIMIT 1 /* Answer the following: What is the name of the driver who made the slowest lap in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the most laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the name of the driver who made the least laps in the race with ID 841? */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId =
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 592 AND T1.time IS NOT NULL ORDER BY T2.dob ASC LIMIT 1
SELECT T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.time = '0:01:27' AND T2.raceId = 161 /* Answer the following: Which constructor won the most races in the 2008 season? won the most races refers to MAX(wins); 2008 season refers to year = 2008; */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 GROUP BY T1.name ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Who was the driver that got the fastest lap in the race No. 841? Show his name and nationality. fastest lap refers to MIN(fastestLapTime); race number refers to raceId; */ SELECT T1.forename, T1.surname, T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 841 ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: Which driver has the most wins in the 2010 season? most wins refers to MAX(wins); 2010 season refers to year = 2010; */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 GROUP BY T1.driverId ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in the 2012 season? most points refers to MAX(points); 2012 season refers to year = 2012; */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2012 GROUP BY T1.constructorId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Who was the driver that got the fastest lap in the race No. 841? Show his name and nationality. fastest lap refers to MIN(fastestLapTime); race number refers to raceId; */ SELECT T1.forename, T1.surname, T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 841 ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: Which driver has the most wins in the 2010 season? most wins refers to MAX(wins); 2010 season refers to year = 2010; */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 GROUP BY T1.driverId ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in the 2012 season? most points refers to MAX(points); 2012 season refers to year = 2012; */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2012 GROUP BY T1.constructorId ORDER BY SUM(T2.points) DESC LIMIT 1
SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 933 ORDER BY T1.fastestLapSpeed DESC LIMIT 1
SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Malaysian Grand Prix'
SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver that has the fastest lap in the race No. 5? driver refers to forename and surname; fastest lap refers to min(fastestLap) */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 5 AND T1.fastestLap IS NOT NULL ORDER BY T1.fastestLap ASC LIMIT 1 /* Answer the following: What is the nationality of the constructor that won the most races in 2008? won the most races refers to max(wins); nationality of the constructor refers to nationality; in 2008 refers to year = 2008 */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: What is the URL of the circuit where the race No. 7 took place? URL of the circuit refers to url; race No. 7 refers to raceId = 7 */ SELECT T2.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 7 /* Answer the following: Who is the driver that got the highest points in the race No. 3? driver refers to forename and surname; highest points refers to max(points) */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 3 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the name of the constructor that got the highest points in the race No. 4? name of the constructor refers to name; highest points refers to max(points) */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 4 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the URL of the season in which the race No. 6 took place? URL of the season refers to url; race No. 6 refers to raceId = 6 */ SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 6 /* Answer the following: What is the name of the circuit where the race No. 2 took place? name of the circuit refers to name; race No. 2 refers to raceId = 2 */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 2 /* Answer the following: What is the nationality of the driver who won the race No. 1? won the race refers to position = 1; nationality of the driver refers to nationality */ SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 1 AND T1.position = 1 /* Answer the following: What is the name of the constructor that won the race No. 10? won the race refers to position = 1; name of the constructor refers to name */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 10 AND T1.position = 1
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi') AND raceId = 345 /* Answer the following: What's the nationality of the constructor who won the race No. 345? race number refers to raceId; */ SELECT nationality FROM constructors WHERE constructorId = (SELECT constructorId FROM results WHERE raceId = 345 AND positionOrder = 1) /* Answer the following: What's the fastest lap time in the race No. 345? race number refers to raceId; */ SELECT MIN(fastestLapTime) FROM results WHERE raceId = 345 /* Answer the following: Who is the driver with the most wins in the season 2008? */ SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM driverStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) ORDER BY wins DESC LIMIT 1) /* Answer the following: What's the location of the circuit where the race No. 345 was held? race number refers to raceId; */ SELECT location FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE raceId = 345)
SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q2 = '0:01:15' AND T1.raceId = 347 /* Answer the following: What is the name of the constructor for the driver who had the fastest lap time in race No. 347? race number refers to raceId; */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 347 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: What is the nationality of the constructor for the driver who had the fastest lap time in race No. 347? race number refers to raceId; */ SELECT T2.nationality FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 347 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: What is the name of the circuit where the race No. 347 was held? race number refers to raceId; */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 347 /* Answer the following: What is the location of the circuit where the race No. 347 was held? race number refers to raceId; */ SELECT T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 347 /* Answer the following: What is the country of the circuit where the race No. 347 was held? race number refers to raceId; */ SELECT T2.country FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 347 /* Answer the following: What is the name of the driver who had the fastest lap time in race No. 347? race number refers to raceId; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 347 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: What is the nationality of the driver who had the fastest lap time in race No. 347? race number refers to raceId; */ SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 347 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: What is the name of the driver who won the race No. 347? race number refers to raceId; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 347 AND T1.position = 1 /* Answer the following: What is the nationality of the driver who won the race No. 347? race number refers to raceId; */ SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 347 AND T1.position = 1 /* Answer the following: What is the name of the constructor for the driver who won the race No. 347? race number refers to raceId; */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 347 AND T1.position = 1 /* Answer the following: What is the nationality of the constructor for the driver who won the race No. 347? race number refers to raceId; */ SELECT T2.nationality FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 347 AND T1.position = 1
SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.q3 = '0:01:33'
SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'McLaren' AND T1.raceId = 743 /* Answer the following: What is the nationality of the constructor for the driver with the driverId 102 in the race with the raceId 743? */ SELECT T3.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.driverId = 102 AND T1.raceId = 743 /* Answer the following: What is the fastest lap time for the driver with the driverId 102 in the race with the raceId 743? */ SELECT T1.fastestLapTime FROM results AS T1 WHERE T1.driverId = 102 AND T1.raceId = 743 /* Answer the following: What is the name of the circuit for the race with the raceId 743? */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 743 /* Answer the following: What is the name of the constructor for the driver with the driverId 102 in the race with the raceId 743? */ SELECT T3.name FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.driverId = 102 AND T1.raceId = 743 /* Answer the following: What is the position of the driver with the driverId 102 in the race with the raceId 743? */ SELECT T1.position FROM results AS T1 WHERE T1.driverId = 102 AND T1.raceId = 743 /* Answer the following: What is the status of the driver with the driverId 102 in the race with the raceId 743? */ SELECT T3.status FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN status AS T3 ON T1.statusId = T3.statusId WHERE T2.driverId = 102 AND T1.raceId = 743
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position = 2 AND T3.name = 'San Marino Grand Prix' AND T3.year = 2006
SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901 /* Answer the following: What is the nationality of the constructor who got the result ID 1024? */ SELECT T2.nationality FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.resultId = 1024 /* Answer the following: What is the name of the driver who made the pit stop during the race No. 842? */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 842 /* Answer the following: What is the name of the circuit where the race No. 730 took place? */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 730 /* Answer the following: What is the name of the constructor who participated in the qualifying round of the race No. 650? */ SELECT T2.name FROM qualifying AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 650 /* Answer the following: What is the status of the result with ID 512? */ SELECT T2.status FROM results AS T1 INNER JOIN status AS T2 ON T1.statusId = T2.statusId WHERE T1.resultId = 512 /* Answer the following: What is the name of the driver who had the fastest lap in the race No. 842? */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 842 AND T1.rank = 1 /* Answer the following: What is the name of the constructor who got the most points in the race No. 730? */ SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 730 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who got the most points in the race No. 650? */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 650 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap time in the qualifying round of the race No. 842? */ SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 842 ORDER BY T1.q1, T1.q2, T1.q3 LIMIT 1
SELECT COUNT(driverId) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE date = '2015-11-29' ) AND statusId IN ( SELECT statusId FROM status WHERE status = 'Finished' )
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in 2008? the most wins refers to MAX(wins); in 2008 refers to year = 2008 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 2010 season? the most points refers to MAX(points); in the 2010 season refers to year = 2010 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap time in race No. 872? the fastest lap time refers to MIN(fastestLapTime); in race No. 872 refers to raceId = 872 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 ORDER BY T2.fastestLapTime LIMIT 1 /* Answer the following: Which driver has the most pit stops in race No. 872? the most pit stops refers to MAX(stop); in race No. 872 refers to raceId = 872 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 ORDER BY T2.stop DESC LIMIT 1 /* Answer the following: Which driver had the fastest qualifying time in race No. 872? the fastest qualifying time refers to MIN(q1, q2, q3); in race No. 872 refers to raceId = 872 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 ORDER BY LEAST(T2.q1, T2.q2, T2.q3) LIMIT 1 /* Answer the following: Which driver had the most laps in race No. 872? the most laps refers to MAX(laps); in race No. 872 refers to raceId = 872 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 ORDER BY T2.laps DESC LIMIT 1 /* Answer the following: Which driver had the most points in the 2008 season? the most points refers to MAX(points); in the 2008 season refers to year = 2008 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2010 season? the most wins refers to MAX(wins); in the 2010 season refers to year = 2010 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which driver had the fastest lap speed in race No. 872? the fastest lap speed refers to MAX(fastestLapSpeed); in race No. 872 refers to raceId = 872 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 ORDER BY T2.fastestLapSpeed DESC LIMIT 1
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 348 ORDER BY T2.time LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2008 season? the most wins refers to MAX(wins); in the 2008 season refers to year = 2008 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Who was the driver with the most points in the 2010 season? the most points refers to MAX(points); in the 2010 season refers to year = 2010 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which driver had the fastest pit stop in the race No. 500? the fastest pit stop refers to MIN(milliseconds) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 500 ORDER BY T2.milliseconds LIMIT 1 /* Answer the following: Which driver had the fastest qualifying time in the race No. 600? the fastest qualifying time refers to MIN(q1, q2, q3) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 600 ORDER BY LEAST(T2.q1, T2.q2, T2.q3) LIMIT 1 /* Answer the following: Which constructor had the most points in the 2012 season? the most points refers to MAX(points); in the 2012 season refers to year = 2012 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2012 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Who was the driver with the most wins in the 2014 season? the most wins refers to MAX(wins); in the 2014 season refers to year = 2014 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2014 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which driver had the fastest lap in the race No. 700? the fastest lap refers to MIN(fastestLapTime) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 700 ORDER BY T2.fastestLapTime LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2016 season? the most wins refers to MAX(wins); in the 2016 season refers to year = 2016 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2016 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Who was the driver with the most points in the 2018 season? the most points refers to MAX(points); in the 2018 season refers to year = 2018 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2018 ORDER BY T2.points DESC LIMIT 1
SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLapSpeed = ( SELECT MAX(fastestLapSpeed) FROM results )
SELECT (CAST(T1.fastestLapSpeed AS REAL) - CAST(T2.fastestLapSpeed AS REAL)) * 100 / CAST(T1.fastestLapSpeed AS REAL) FROM results AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Paul' AND T3.surname = 'di Resta' AND T1.raceId = 853 AND T2.raceId = 854
SELECT CAST(COUNT(CASE WHEN T1.time IS NOT NULL THEN T1.driverId ELSE NULL END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '1983-07-16'
SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix'
SELECT COUNT(raceId), name FROM races WHERE year = 2005 ORDER BY name DESC
SELECT r1.name, r1.date FROM races r1 WHERE strftime('%Y-%m', r1.date) = (SELECT strftime('%Y-%m', MIN(r2.date)) FROM races r2) /* Answer the following: Who is the driver with the most wins? the driver with the most wins refers to Max(wins) */ SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId GROUP BY ds.driverId ORDER BY SUM(ds.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in 2008? the constructor with the most points refers to Max(points); in 2008 refers to year = 2008 */ SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.year = 2008 GROUP BY cs.constructorId ORDER BY SUM(cs.points) DESC LIMIT 1 /* Answer the following: What is the average lap time for each driver in the 2010 season? the average lap time refers to Avg(time); each driver refers to driverId; in the 2010 season refers to year = 2010 */ SELECT d.forename, d.surname, AVG(lt.time) as average_lap_time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.year = 2010 GROUP BY lt.driverId /* Answer the following: Which driver has the most pit stops in 2012? the driver with the most pit stops refers to Max(stop); in 2012 refers to year = 2012 */ SELECT d.forename, d.surname FROM drivers d JOIN pitStops ps ON d.driverId = ps.driverId JOIN races r ON ps.raceId = r.raceId WHERE r.year = 2012 GROUP BY ps.driverId ORDER BY COUNT(ps.stop) DESC LIMIT 1 /* Answer the following: What is the fastest lap time recorded by each driver in 2011? the fastest lap time refers to Min(time); each driver refers to driverId; in 2011 refers to year = 2011 */ SELECT d.forename, d.surname, MIN(lt.time) as fastest_lap_time FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId JOIN races r ON lt.raceId = r.raceId WHERE r.year = 2011 GROUP BY lt.driverId /* Answer the following: Which constructor has the most wins in 2009? the constructor with the most wins refers to Max(wins); in 2009 refers to year = 2009 */ SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.year = 2009 GROUP BY cs.constructorId ORDER BY SUM(cs.wins) DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in 2007? the driver with the most points refers to Max(points); in 2007 refers to year = 2007 */ SELECT d.forename, d.surname FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2007 GROUP BY ds.driverId ORDER BY SUM(ds.points) DESC LIMIT 1 /* Answer the following: What is the average number of pit stops for each driver in the 2008 season? the average number of pit stops refers to Avg(stop); each driver refers to driverId; in the 2008 season refers to year = 2008 */ SELECT d.forename, d.surname, AVG(ps.stop) as average_pit_stops FROM drivers d JOIN pitStops ps ON d.driverId = ps.driverId JOIN races r ON ps.raceId = r.raceId WHERE r.year = 2008 GROUP BY ps.driverId /* Answer the following: Which driver has the most fastest laps in 2006? the driver with the most fastest laps refers to Max(fastestLap); in 2006 refers to year = 2006 */ SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.raceId IN (SELECT raceId FROM races WHERE year = 2006) GROUP BY r.driverId ORDER BY COUNT(r.fastestLap) DESC LIMIT 1
SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in 2008? the most wins refers to MAX(wins); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2008) ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which constructor had the most points in 2010? the most points refers to MAX(points); */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2010) ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the fastest lap time in 2007? fastest lap time refers to MIN(fastestLapTime); */ SELECT MIN(fastestLapTime) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2007) /* Answer the following: Who is the driver with the fastest pit stop in 2011? fastest pit stop refers to MIN(milliseconds); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2011) ORDER BY T2.milliseconds ASC LIMIT 1 /* Answer the following: What is the name of the circuit with the highest altitude? highest altitude refers to MAX(alt); */ SELECT name FROM circuits ORDER BY alt DESC LIMIT 1 /* Answer the following: Who is the driver with the most pole positions in 2009? most pole positions refers to MAX(position) where position = 1; */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2009) AND T2.position = 1 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor had the most podium finishes in 2006? most podium finishes refers to MAX(position) where position <= 3; */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2006) AND T2.position <= 3 GROUP BY T1.constructorId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Who is the driver with the most fastest laps in 2005? most fastest laps refers to MAX(fastestLap); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2005) GROUP BY T1.driverId ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: What is the name of the circuit with the longest lap in 2004? longest lap refers to MAX(lap); */ SELECT T1.name FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2004) GROUP BY T1.circuitId ORDER BY MAX(T2.lap) DESC LIMIT 1
SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most wins? the most wins refers to max(wins); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY SUM(T1.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points? the most points refers to max(points); */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.constructorId ORDER BY SUM(T1.points) DESC LIMIT 1 /* Answer the following: Which circuit has hosted the most races? the most races refers to max(count(raceId)); */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId GROUP BY T2.circuitId ORDER BY COUNT(T1.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the fastest average lap time? the fastest average lap time refers to min(avg(milliseconds)); */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY AVG(T1.milliseconds) ASC LIMIT 1 /* Answer the following: Which driver has the shortest average pit stop duration? the shortest average pit stop duration refers to min(avg(milliseconds)); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY AVG(T1.milliseconds) ASC LIMIT 1 /* Answer the following: Which driver has the most pole positions? the most pole positions refers to max(count(position)) where position = 1; */ SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.position) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps? the most fastest laps refers to max(count(fastestLap)); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes? the most podium finishes refers to max(count(position)) where position <= 3; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position <= 3 GROUP BY T2.driverId ORDER BY COUNT(T1.position) DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish)? the most DNFs refers to max(count(statusId)) where statusId != 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.statusId != 1 GROUP BY T2.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1
SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )
SELECT T1.country, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year LIMIT 1
SELECT MAX(T1.year) FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Brands Hatch' AND T2.name = 'British Grand Prix'
SELECT COUNT(DISTINCT T2.year) FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'
SELECT drivers.forename, drivers.surname, results.positionOrder FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY results.positionOrder
SELECT T1.forename, T1.surname, MAX(T2.points) AS points FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId, T1.forename, T1.surname ORDER BY points DESC LIMIT 1 /* Answer the following: Which constructor has the most wins? constructor refers to name; most wins refers to max(wins) */ SELECT T1.name, MAX(T2.wins) AS wins FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.constructorId, T1.name ORDER BY wins DESC LIMIT 1 /* Answer the following: Which driver has the fastest lap time? driver refers to forename, surname; fastest lap time refers to min(fastestLapTime) */ SELECT T1.forename, T1.surname, MIN(T2.fastestLapTime) AS fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId, T1.forename, T1.surname ORDER BY fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the highest altitude? circuit refers to name; highest altitude refers to max(alt) */ SELECT name, MAX(alt) AS altitude FROM circuits GROUP BY name ORDER BY altitude DESC LIMIT 1 /* Answer the following: Which season had the most races? season refers to year; most races refers to max(count(raceId)) */ SELECT year, COUNT(raceId) AS races FROM races GROUP BY year ORDER BY races DESC LIMIT 1 /* Answer the following: Which driver has made the most pit stops? driver refers to forename, surname; most pit stops refers to max(count(stop)) */ SELECT T1.forename, T1.surname, COUNT(T2.stop) AS pitStops FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId, T1.forename, T1.surname ORDER BY pitStops DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes? constructor refers to name; most podium finishes refers to max(count(position)) where position <= 3 */ SELECT T1.name, COUNT(T2.position) AS podiumFinishes FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position <= 3 GROUP BY T1.constructorId, T1.name ORDER BY podiumFinishes DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions? driver refers to forename, surname; most pole positions refers to max(count(grid)) where grid = 1 */ SELECT T1.forename, T1.surname, COUNT(T2.grid) AS polePositions FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.grid = 1 GROUP BY T1.driverId, T1.forename, T1.surname ORDER BY polePositions DESC LIMIT 1 /* Answer the following: Which constructor has the most fastest laps? constructor refers to name; most fastest laps refers to max(count(fastestLap)) */ SELECT T1.name, COUNT(T2.fastestLap) AS fastestLaps FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.constructorId, T1.name ORDER BY fastestLaps DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish)? driver refers to forename, surname; most DNFs refers to max(count(statusId)) where statusId != 1 */ SELECT T1.forename, T1.surname, COUNT(T2.statusId) AS DNFs FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.statusId != 1 GROUP BY T1.driverId, T1.forename, T1.surname ORDER BY DNFs DESC LIMIT 1
SELECT drivers.forename, drivers.surname, results.points FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2017 AND races.name = 'Chinese Grand Prix' ORDER BY results.points DESC LIMIT 3
SELECT T2.forename, T2.surname, T3.name, T3.year, MIN(T1.time) AS BestLapTime FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId ORDER BY BestLapTime LIMIT 1
SELECT AVG(time) FROM lapTimes WHERE raceId = ( SELECT raceId FROM races WHERE year = 2009 AND name = 'Chinese Grand Prix' ) AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Sebastian' AND surname = 'Vettel' )
SELECT CAST(SUM(CASE WHEN T2.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010 /* Answer the following: What is the percentage of races where Ferrari won since 2000? DIVIDE(COUNT(raceId where constructorId = (SELECT constructorId FROM constructors WHERE name = 'Ferrari') and position = 1), COUNT(raceId)) as percentage where year >= 2000; */ SELECT CAST(SUM(CASE WHEN T2.constructorId = (SELECT constructorId FROM constructors WHERE name = 'Ferrari') AND T2.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year >= 2000 /* Answer the following: What is the percentage of races where Mercedes won the first position since 2010? DIVIDE(COUNT(raceId where constructorId = (SELECT constructorId FROM constructors WHERE name = 'Mercedes') and position = 1), COUNT(raceId)) as percentage where year >= 2010; */ SELECT CAST(SUM(CASE WHEN T2.constructorId = (SELECT constructorId FROM constructors WHERE name = 'Mercedes') AND T2.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year >= 2010 /* Answer the following: What is the percentage of races where Red Bull won the first position since 2010? DIVIDE(COUNT(raceId where constructorId = (SELECT constructorId FROM constructors WHERE name = 'Red Bull') and position = 1), COUNT(raceId)) as percentage where year >= 2010; */ SELECT CAST(SUM(CASE WHEN T2.constructorId = (SELECT constructorId FROM constructors WHERE name = 'Red Bull') AND T2.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year >= 2010 /* Answer the following: What is the percentage of races where McLaren won the first position since 2000? DIVIDE(COUNT(raceId where constructorId = (SELECT constructorId FROM constructors WHERE name = 'McLaren') and position = 1), COUNT(raceId)) as percentage where year >= 2000; */ SELECT CAST(SUM(CASE WHEN T2.constructorId = (SELECT constructorId FROM constructors WHERE name = 'McLaren') AND T2.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year >= 2000 /* Answer the following: What is the percentage of races where Williams won the first position since 2000? DIVIDE(COUNT(raceId where constructorId = (SELECT constructorId FROM constructors WHERE name = 'Williams') and position = 1), COUNT(raceId)) as percentage where year >= 2000; */ SELECT CAST(SUM(CASE WHEN T2.constructorId = (SELECT constructorId FROM constructors WHERE name = 'Williams') AND T2.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year >= 2000
SELECT T1.forename, T1.surname, T1.nationality, AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most winning in 2008? the most winning refers to MAX(COUNT(wins)); in 2008 refers to year = 2008 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 GROUP BY T1.constructorId ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: What is the average pit stop duration for each driver in 2010? average pit stop duration refers to AVG(milliseconds); in 2010 refers to year = 2010 */ SELECT T1.forename, T1.surname, AVG(T2.milliseconds) FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 GROUP BY T1.driverId /* Answer the following: Which circuit has the most races held? the most races held refers to MAX(COUNT(raceId)) */ SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.circuitId ORDER BY COUNT(T2.raceId) DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap time? fastest lap time refers to MIN(fastestLapTime) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: Which constructor has the highest average points in 2010? highest average points refers to MAX(AVG(points)); in 2010 refers to year = 2010 */ SELECT T1.name, AVG(T2.points) FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 GROUP BY T1.constructorId ORDER BY AVG(T2.points) DESC LIMIT 1 /* Answer the following: Who is the driver with the most pole positions? most pole positions refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes? most podium finishes refers to MAX(COUNT(positionOrder <= 3)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder <= 3 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most fastest laps? most fastest laps refers to MAX(COUNT(fastestLap)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which constructor has the most race wins? most race wins refers to MAX(COUNT(wins)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.constructorId ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: Who is the driver with the most race wins? most race wins refers to MAX(COUNT(wins)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most championship wins? most championship wins refers to MAX(COUNT(position = 1)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 1 GROUP BY T1.constructorId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Who is the driver with the most championship wins? most championship wins refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most second place finishes? most second place finishes refers to MAX(COUNT(positionOrder = 2)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 2 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most second place finishes? most second place finishes refers to MAX(COUNT(positionOrder = 2)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 2 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most third place finishes? most third place finishes refers to MAX(COUNT(positionOrder = 3)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 3 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most third place finishes? most third place finishes refers to MAX(COUNT(positionOrder = 3)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 3 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most fourth place finishes? most fourth place finishes refers to MAX(COUNT(positionOrder = 4)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 4 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most fourth place finishes? most fourth place finishes refers to MAX(COUNT(positionOrder = 4)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 4 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most fifth place finishes? most fifth place finishes refers to MAX(COUNT(positionOrder = 5)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 5 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most fifth place finishes? most fifth place finishes refers to MAX(COUNT(positionOrder = 5)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 5 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most sixth place finishes? most sixth place finishes refers to MAX(COUNT(positionOrder = 6)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 6 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most sixth place finishes? most sixth place finishes refers to MAX(COUNT(positionOrder = 6)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 6 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most seventh place finishes? most seventh place finishes refers to MAX(COUNT(positionOrder = 7)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 7 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most seventh place finishes? most seventh place finishes refers to MAX(COUNT(positionOrder = 7)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 7 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most eighth place finishes? most eighth place finishes refers to MAX(COUNT(positionOrder = 8)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 8 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most eighth place finishes? most eighth place finishes refers to MAX(COUNT(positionOrder = 8)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 8 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most ninth place finishes? most ninth place finishes refers to MAX(COUNT(positionOrder = 9)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 9 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most ninth place finishes? most ninth place finishes refers to MAX(COUNT(positionOrder = 9)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 9 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most tenth place finishes? most tenth place finishes refers to MAX(COUNT(positionOrder = 10)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 10 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most tenth place finishes? most tenth place finishes refers to MAX(COUNT(positionOrder = 10)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 10 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most eleventh place finishes? most eleventh place finishes refers to MAX(COUNT(positionOrder = 11)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 11 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most eleventh place finishes? most eleventh place finishes refers to MAX(COUNT(positionOrder = 11)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 11 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twelfth place finishes? most twelfth place finishes refers to MAX(COUNT(positionOrder = 12)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 12 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twelfth place finishes? most twelfth place finishes refers to MAX(COUNT(positionOrder = 12)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 12 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most thirteenth place finishes? most thirteenth place finishes refers to MAX(COUNT(positionOrder = 13)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 13 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most thirteenth place finishes? most thirteenth place finishes refers to MAX(COUNT(positionOrder = 13)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 13 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most fourteenth place finishes? most fourteenth place finishes refers to MAX(COUNT(positionOrder = 14)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 14 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most fourteenth place finishes? most fourteenth place finishes refers to MAX(COUNT(positionOrder = 14)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 14 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most fifteenth place finishes? most fifteenth place finishes refers to MAX(COUNT(positionOrder = 15)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 15 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most fifteenth place finishes? most fifteenth place finishes refers to MAX(COUNT(positionOrder = 15)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 15 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most sixteenth place finishes? most sixteenth place finishes refers to MAX(COUNT(positionOrder = 16)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 16 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most sixteenth place finishes? most sixteenth place finishes refers to MAX(COUNT(positionOrder = 16)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 16 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most seventeenth place finishes? most seventeenth place finishes refers to MAX(COUNT(positionOrder = 17)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 17 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most seventeenth place finishes? most seventeenth place finishes refers to MAX(COUNT(positionOrder = 17)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 17 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most eighteenth place finishes? most eighteenth place finishes refers to MAX(COUNT(positionOrder = 18)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 18 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most eighteenth place finishes? most eighteenth place finishes refers to MAX(COUNT(positionOrder = 18)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 18 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most nineteenth place finishes? most nineteenth place finishes refers to MAX(COUNT(positionOrder = 19)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 19 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most nineteenth place finishes? most nineteenth place finishes refers to MAX(COUNT(positionOrder = 19)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 19 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twentieth place finishes? most twentieth place finishes refers to MAX(COUNT(positionOrder = 20)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 20 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twentieth place finishes? most twentieth place finishes refers to MAX(COUNT(positionOrder = 20)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 20 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-first place finishes? most twenty-first place finishes refers to MAX(COUNT(positionOrder = 21)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 21 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twenty-first place finishes? most twenty-first place finishes refers to MAX(COUNT(positionOrder = 21)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 21 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-second place finishes? most twenty-second place finishes refers to MAX(COUNT(positionOrder = 22)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 22 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twenty-second place finishes? most twenty-second place finishes refers to MAX(COUNT(positionOrder = 22)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 22 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-third place finishes? most twenty-third place finishes refers to MAX(COUNT(positionOrder = 23)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 23 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twenty-third place finishes? most twenty-third place finishes refers to MAX(COUNT(positionOrder = 23)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 23 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-fourth place finishes? most twenty-fourth place finishes refers to MAX(COUNT(positionOrder = 24)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 24 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twenty-fourth place finishes? most twenty-fourth place finishes refers to MAX(COUNT(positionOrder = 24)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 24 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-fifth place finishes? most twenty-fifth place finishes refers to MAX(COUNT(positionOrder = 25)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 25 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twenty-fifth place finishes? most twenty-fifth place finishes refers to MAX(COUNT(positionOrder = 25)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 25 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-sixth place finishes? most twenty-sixth place finishes refers to MAX(COUNT(positionOrder = 26)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 26 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twenty-sixth place finishes? most twenty-sixth place finishes refers to MAX(COUNT(positionOrder = 26)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 26 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-seventh place finishes? most twenty-seventh place finishes refers to MAX(COUNT(positionOrder = 27)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 27 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twenty-seventh place finishes? most twenty-seventh place finishes refers to MAX(COUNT(positionOrder = 27)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 27 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-eighth place finishes? most twenty-eighth place finishes refers to MAX(COUNT(positionOrder = 28)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 28 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twenty-eighth place finishes? most twenty-eighth place finishes refers to MAX(COUNT(positionOrder = 28)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 28 GROUP BY T1.driverId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-ninth place finishes? most twenty-ninth place finishes refers to MAX(COUNT(positionOrder = 29)) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.positionOrder = 29 GROUP BY T1.constructorId ORDER BY COUNT(T2.positionOrder) DESC LIMIT 1 /* Answer the following: Who is the driver with the most twenty-ninth place finishes? most twenty-ninth place finishes refers to MAX(COUNT(positionOrder = 29)) */ SELECT T1.forename, T1.surname FROM drivers
SELECT forename, surname, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob) FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1
SELECT c.name, COUNT(r.raceId) as race_count FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitId HAVING race_count = 4 /* Answer the following: List the drivers who won the most races in 2008. in 2008 refers to year = 2008; won the most races refers to MAX(wins) */ SELECT d.forename, d.surname, MAX(ds.wins) as wins FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2008 GROUP BY d.driverId ORDER BY wins DESC LIMIT 1 /* Answer the following: List the constructors who won the most races in 2008. in 2008 refers to year = 2008; won the most races refers to MAX(wins) */ SELECT c.name, MAX(cs.wins) as wins FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.year = 2008 GROUP BY c.constructorId ORDER BY wins DESC LIMIT 1 /* Answer the following: List the drivers who had the fastest lap times in 2008. in 2008 refers to year = 2008; fastest lap times refers to MIN(fastestLapTime) */ SELECT d.forename, d.surname, MIN(r.fastestLapTime) as fastest_lap_time FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 GROUP BY d.driverId ORDER BY fastest_lap_time ASC LIMIT 1 /* Answer the following: List the constructors who had the fastest lap times in 2008. in 2008 refers to year = 2008; fastest lap times refers to MIN(fastestLapTime) */ SELECT c.name, MIN(r.fastestLapTime) as fastest_lap_time FROM constructors c JOIN results r ON c.constructorId = r.constructorId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 GROUP BY c.constructorId ORDER BY fastest_lap_time ASC LIMIT 1
SELECT c.name AS circuit_name, c.location AS circuit_location, r.name AS race_name FROM circuits AS c INNER JOIN races AS r ON c.circuitId = r.circuitId WHERE c.country = 'USA' AND r.year = 2006
SELECT races.name AS race_name, circuits.name AS circuit_name, circuits.location AS circuit_location FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE STRFTIME('%Y-%m', races.date) = '2005-09'
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10
SELECT COUNT(T1.raceId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T2.forename = 'Michael' AND T2.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit' AND T1.points = ( SELECT MAX(points) FROM results )
SELECT races.name, races.year FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher' ORDER BY results.fastestLapTime LIMIT 1
SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000
SELECT races.name, results.points FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.surname = 'Hamilton' ORDER BY races.year, races.round LIMIT 1
SELECT races.name, circuits.country, races.date FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date
SELECT races.name, races.year, circuits.location, MAX(results.laps) AS most_laps FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId GROUP BY races.name, races.year, circuits.location ORDER BY most_laps DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T2.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix'
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'
SELECT `name`, `lat` FROM `circuits` WHERE `name` IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY `lat` DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in the 2010 season? most wins refers to max(wins) */ SELECT T2.`forename`, T2.`surname` FROM `driverStandings` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2010) ORDER BY T1.`wins` DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 2008 season? most points refers to max(points) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2008) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: What was the fastest lap time in the 2012 season? fastest lap time refers to min(fastestLapTime) */ SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2012) /* Answer the following: Who was the driver of the car with the number 5 in the 2015 season? car with the number 5 refers to number = 5 */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`number` = 5 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2015) LIMIT 1 /* Answer the following: Which constructor had the car with the number 3 in the 2011 season? car with the number 3 refers to number = 3 */ SELECT T2.`name` FROM `results` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`number` = 3 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2011) LIMIT 1 /* Answer the following: What was the duration of the longest pit stop in the 2013 season? longest pit stop refers to max(milliseconds) */ SELECT MAX(`milliseconds`) FROM `pitStops` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2013) /* Answer the following: Who was the driver with the fastest lap in the 2014 season? fastest lap refers to min(fastestLapTime) */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`fastestLapTime` = (SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2014)) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2009 season? most wins refers to max(wins) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2009) ORDER BY T1.`wins` DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 2016 season? most points refers to max(points) */ SELECT T2.`forename`, T2.`surname` FROM `driverStandings` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2016) ORDER BY T1.`points` DESC LIMIT 1
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'
SELECT country FROM circuits ORDER BY alt DESC LIMIT 1
SELECT COUNT(driverId) FROM drivers WHERE code IS NULL
SELECT c.country FROM drivers d INNER JOIN circuits c ON d.driverId = c.circuitId ORDER BY d.dob ASC LIMIT 1 /* Answer the following: Who is the oldest driver? oldest driver refers to min(dob) */ SELECT forename, surname FROM drivers ORDER BY dob ASC LIMIT 1 /* Answer the following: What is the nationality of the oldest constructor? oldest constructor refers to min(year) in seasons */ SELECT nationality FROM constructors c INNER JOIN races r ON c.constructorId = r.constructorId INNER JOIN seasons s ON r.year = s.year ORDER BY s.year ASC LIMIT 1 /* Answer the following: Who is the youngest driver and which country is he/she from? youngest driver refers to max(dob); country refers to country in circuits */ SELECT d.forename, d.surname, c.country FROM drivers d INNER JOIN circuits c ON d.driverId = c.circuitId ORDER BY d.dob DESC LIMIT 1 /* Answer the following: What is the nationality of the youngest constructor? youngest constructor refers to max(year) in seasons */ SELECT nationality FROM constructors c INNER JOIN races r ON c.constructorId = r.constructorId INNER JOIN seasons s ON r.year = s.year ORDER BY s.year DESC LIMIT 1 /* Answer the following: Which driver has the most wins? most wins refers to max(wins) in driverStandings */ SELECT d.forename, d.surname FROM drivers d INNER JOIN driverStandings ds ON d.driverId = ds.driverId ORDER BY ds.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most wins? most wins refers to max(wins) in constructorStandings */ SELECT c.name FROM constructors c INNER JOIN constructorStandings cs ON c.constructorId = cs.constructorId ORDER BY cs.wins DESC LIMIT 1 /* Answer the following: Which driver has the fastest lap time? fastest lap time refers to min(fastestLapTime) in results */ SELECT d.forename, d.surname FROM drivers d INNER JOIN results r ON d.driverId = r.driverId ORDER BY r.fastestLapTime ASC LIMIT 1 /* Answer the following: Which constructor has the fastest lap time? fastest lap time refers to min(fastestLapTime) in results */ SELECT c.name FROM constructors c INNER JOIN results r ON c.constructorId = r.constructorId ORDER BY r.fastestLapTime ASC LIMIT 1
SELECT surname FROM drivers WHERE nationality = 'Italian'
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'
SELECT c.name FROM races r INNER JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name = 'Spanish Grand Prix' AND r.year = 2009 /* Answer the following: Who won the 2010 British Grand Prix? */ SELECT d.forename, d.surname FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN drivers d ON res.driverId = d.driverId WHERE r.name = 'British Grand Prix' AND r.year = 2010 AND res.positionOrder = 1 /* Answer the following: Which constructor won the most races in 2008? */ SELECT c.name, COUNT(*) as wins FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN constructors c ON res.constructorId = c.constructorId WHERE r.year = 2008 AND res.positionOrder = 1 GROUP BY c.name ORDER BY wins DESC LIMIT 1 /* Answer the following: Who was the driver with the most fastest laps in 2011? */ SELECT d.forename, d.surname, COUNT(*) as fastest_laps FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN drivers d ON res.driverId = d.driverId WHERE r.year = 2011 AND res.rank = 1 GROUP BY d.driverId ORDER BY fastest_laps DESC LIMIT 1 /* Answer the following: How many pit stops did the winner of the 2012 Monaco Grand Prix make? */ SELECT COUNT(*) as pit_stops FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN pitStops p ON r.raceId = p.raceId AND res.driverId = p.driverId WHERE r.name = 'Monaco Grand Prix' AND r.year = 2012 AND res.positionOrder = 1 /* Answer the following: Who was the constructor for the driver who qualified first for the 2013 Australian Grand Prix? */ SELECT c.name FROM races r INNER JOIN qualifying q ON r.raceId = q.raceId INNER JOIN constructors c ON q.constructorId = c.constructorId WHERE r.name = 'Australian Grand Prix' AND r.year = 2013 AND q.position = 1
SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'
SELECT races.name, races.date, races.time, races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit'
SELECT races.time FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit'
SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy'
SELECT date FROM races WHERE circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Barcelona-Catalunya' )
SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009 /* Answer the following: What is the nationality of the constructor who won the most races in 2009? nationality refers to nationality */ SELECT T1.nationality FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.wins = (SELECT MAX(wins) FROM constructorStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009)) /* Answer the following: What is the name of the driver who had the fastest lap in the Spanish Grand Prix in 2009? name of the driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLap = (SELECT MIN(fastestLap) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009)) /* Answer the following: What is the name of the constructor who had the fastest lap in the Spanish Grand Prix in 2009? name of the constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.fastestLap = (SELECT MIN(fastestLap) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009)) /* Answer the following: What is the name of the driver who won the Spanish Grand Prix in 2009? name of the driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 1 AND T2.raceId IN (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009)
SELECT MIN(results.fastestLapTime) FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1
SELECT T2.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.positionOrder = 1 /* Answer the following: Who was the constructor of the car driven by the winner of the British Grand Prix in 2007? constructor refers to name */ SELECT T4.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId INNER JOIN constructors AS T4 ON T2.constructorId = T4.constructorId WHERE T1.name = 'British Grand Prix' AND T1.year = 2007 AND T2.positionOrder = 1 /* Answer the following: Who was the driver with the fastest lap in the Monaco Grand Prix in 2006? driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.name = 'Monaco Grand Prix' AND T1.year = 2006 ORDER BY T2.fastestLapTime LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2009 season? constructor refers to name */ SELECT T3.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId WHERE T1.year = 2009 GROUP BY T3.constructorId ORDER BY COUNT(T2.positionOrder = 1) DESC LIMIT 1 /* Answer the following: Who was the driver with the most points in the 2010 season? driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2010 GROUP BY T3.driverId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver had the most pit stops in the 2011 season? driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2011 GROUP BY T3.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 2012 season? driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2012 ORDER BY MIN(T2.fastestLapTime) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2013 season? constructor refers to name */ SELECT T3.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId WHERE T1.year = 2013 GROUP BY T3.constructorId ORDER BY COUNT(T2.positionOrder = 1) DESC LIMIT 1 /* Answer the following: Who was the driver with the most points in the 2014 season? driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2014 GROUP BY T3.driverId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver had the most pit stops in the 2015 season? driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2015 GROUP BY T3.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 2016 season? driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2016 ORDER BY MIN(T2.fastestLapTime) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2017 season? constructor refers to name */ SELECT T3.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId WHERE T1.year = 2017 GROUP BY T3.constructorId ORDER BY COUNT(T2.positionOrder = 1) DESC LIMIT 1 /* Answer the following: Who was the driver with the most points in the 2018 season? driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2018 GROUP BY T3.driverId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver had the most pit stops in the 2019 season? driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2019 GROUP BY T3.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 2020 season? driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2020 ORDER BY MIN(T2.fastestLapTime) LIMIT 1
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.rank ASC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2010 season? most wins refers to MAX(wins) */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap time in the Australian Grand Prix? fastest lap time refers to min(fastestLapTime) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the highest altitude? highest altitude refers to MAX(alt) */ SELECT T1.name FROM circuits AS T1 ORDER BY T1.alt DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 2008 season? most points refers to MAX(points) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which constructor has the most points in the Monaco Grand Prix? most points refers to MAX(points) */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Monaco Grand Prix' ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Who is the driver with the most pit stops in the British Grand Prix? most pit stops refers to MAX(stop) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'British Grand Prix' ORDER BY T2.stop DESC LIMIT 1 /* Answer the following: Which driver has the fastest lap speed in the Italian Grand Prix? fastest lap speed refers to MAX(fastestLapSpeed) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Italian Grand Prix' ORDER BY T2.fastestLapSpeed DESC LIMIT 1 /* Answer the following: Which constructor has the most pole positions in the 2012 season? most pole positions refers to MAX(grid) */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2012 ORDER BY T2.grid DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in the 2009 season? most wins refers to MAX(wins) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009 ORDER BY T2.wins DESC LIMIT 1
SELECT MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'
SELECT DISTINCT races.year FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT T1.positionOrder FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T1.grid = 4
SELECT COUNT(driverId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL
SELECT MIN(T1.fastestLapTime) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008
SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.positionOrder = 2
SELECT T3.forename, T3.surname, T3.url FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T2.time LIKE '%:%:%.%'
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'American' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix'
SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name LIKE 'Australian Grand Prix' AND T1.time IS NOT NULL AND (SELECT COUNT(raceId) FROM results WHERE driverId = T3.driverId) > 0
SELECT SUM(points) FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )
SELECT AVG(SUBSTR(T2.fastestLapTime, 4, 2) + SUBSTR(T2.fastestLapTime, 1, 2) * 60 + SUBSTR(T2.fastestLapTime, 7, 3) / 1000) AS avgFastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'
SELECT CAST(SUM(CASE WHEN time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(raceId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') /* Answer the following: What is the win rate of the constructor "Ferrari" in 2008? win rate refers to DIVIDE(COUNT(resultId where position = 1), COUNT(resultId)) */ SELECT CAST(SUM(CASE WHEN position = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(resultId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) AND constructorId IN (SELECT constructorId FROM constructors WHERE name = 'Ferrari') /* Answer the following: What is the average pit stop duration for the driver "Lewis Hamilton" in 2008? average pit stop duration = AVG(milliseconds) */ SELECT AVG(milliseconds) FROM pitStops WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) AND driverId IN (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') /* Answer the following: What is the average qualifying time for the driver "Lewis Hamilton" in Q1, Q2 and Q3 in 2008? average qualifying time = AVG(q1), AVG(q2), AVG(q3) */ SELECT AVG(q1), AVG(q2), AVG(q3) FROM qualifying WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) AND driverId IN (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') /* Answer the following: What is the average lap time for the driver "Lewis Hamilton" in 2008? average lap time = AVG(milliseconds) */ SELECT AVG(milliseconds) FROM lapTimes WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) AND driverId IN (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT (CAST((julianday(T1.time) - julianday(T2.time)) * 24 * 60 * 60 * 1000 AS REAL) / (julianday(T2.time) * 24 * 60 * 60 * 1000)) * 100 AS percentage FROM (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND positionOrder = 1) AS T1, (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND positionOrder = (SELECT MAX(positionOrder) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix'))) AS T2
SELECT COUNT(circuitId) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne'
SELECT lat, lng FROM circuits WHERE country = 'USA'
SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'
SELECT AVG(points) FROM constructorResults WHERE constructorId IN ( SELECT constructorId FROM constructors WHERE nationality = 'British' )
SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1
SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0 /* Answer the following: List the drivers who have won the race at circuit 6. circuit 6 refers to circuitId = 6; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.circuitId = 6 AND T1.position = 1 /* Answer the following: List the races where the driver with driverId 20 has participated. driver with driverId 20 refers to driverId = 20; */ SELECT T2.name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.driverId = 20 /* Answer the following: List the drivers who have participated in the race at circuit 6 in the year 2008. circuit 6 refers to circuitId = 6; year 2008 refers to year = 2008; */ SELECT DISTINCT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.circuitId = 6 AND T1.year = 2008 /* Answer the following: List the drivers who have won the race at circuit 6 in the year 2008. circuit 6 refers to circuitId = 6; year 2008 refers to year = 2008; */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.circuitId = 6 AND T1.year = 2008 AND T2.position = 1 /* Answer the following: List the drivers who have won the race at circuit 6 in the year 2008 and drove for constructor 1. circuit 6 refers to circuitId = 6; year 2008 refers to year = 2008; constructor 1 refers to constructorId = 1; */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.circuitId = 6 AND T1.year = 2008 AND T2.position = 1 AND T2.constructorId = 1 /* Answer the following: List the drivers who have won the race at circuit 6 in the year 2008 and drove for constructor 1 and started from the pole position. circuit 6 refers to circuitId = 6; year 2008 refers to year = 2008; constructor 1 refers to constructorId = 1; pole position refers to grid = 1; */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.circuitId = 6 AND T1.year = 2008 AND T2.position = 1 AND T2.constructorId = 1 AND T2.grid = 1 /* Answer the following: List the drivers who have won the race at circuit 6 in the year 2008 and drove for constructor 1 and started from the pole position and had the fastest lap. circuit 6 refers to circuitId = 6; year 2008 refers to year = 2008; constructor 1 refers to constructorId = 1; pole position refers to grid = 1; fastest lap refers to rank = 1; */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.circuitId = 6 AND T1.year = 2008 AND T2.position = 1 AND T2.constructorId = 1 AND T2.grid = 1 AND T2.rank = 1 /* Answer the following: List the drivers who have won the race at circuit 6 in the year 2008 and drove for constructor 1 and started from the pole position and had the fastest lap and completed all the laps. circuit 6 refers to circuitId = 6; year 2008 refers to year = 2008; constructor 1 refers to constructorId = 1; pole position refers to grid = 1; fastest lap refers to rank = 1; completed all the laps refers to laps = (SELECT MAX(laps) FROM results WHERE raceId = T1.raceId); */ SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.circuitId = 6 AND T1.year = 2008 AND T2.position = 1 AND T2.constructorId = 1 AND T2.grid = 1 AND T2.rank = 1 AND T2.laps = (SELECT MAX(laps) FROM results WHERE raceId = T1.raceId)
SELECT COUNT(T1.constructorId) FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Japanese' AND T2.points = 0 GROUP BY T1.constructorId HAVING COUNT(T2.raceId) = 2
SELECT name FROM constructors WHERE constructorId IN ( SELECT constructorId FROM constructorStandings WHERE position = 1 )
SELECT COUNT(DISTINCT T1.constructorId) FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'French' AND T2.laps > 50
SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.driverId) AS per FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'Japanese' AND T3.year BETWEEN 2007 AND 2009 /* Answer the following: What is the percentage of races won by Ferrari in Italy? Ferrari refers to name = 'Ferrari'; in Italy refers to country = 'Italy'; won refers to position = 1; percentage = Divide (Count(raceId where position = 1 and country = 'Italy'), Count(raceId where country = 'Italy')) * 100 */ SELECT CAST(SUM(CASE WHEN T2.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.raceId) AS per FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.name = 'Ferrari' AND T4.country = 'Italy' /* Answer the following: What is the percentage of races that Lewis Hamilton won in 2008? Lewis Hamilton refers to forename = 'Lewis' and surname = 'Hamilton'; in 2008 refers to year = 2008; won refers to position = 1; percentage = Divide (Count(raceId where position = 1 and year = 2008), Count(raceId where year = 2008)) * 100 */ SELECT CAST(SUM(CASE WHEN T2.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.raceId) AS per FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.year = 2008 /* Answer the following: What is the percentage of races that were won from pole position? won from pole position refers to grid = 1 and position = 1; percentage = Divide (Count(raceId where grid = 1 and position = 1), Count(raceId)) * 100 */ SELECT CAST(SUM(CASE WHEN T1.grid = 1 AND T1.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) AS per FROM results AS T1 /* Answer the following: What is the percentage of races that were not finished by drivers due to technical reasons? not finished due to technical reasons refers to statusId > 1; percentage = Divide (Count(raceId where statusId > 1), Count(raceId)) * 100 */ SELECT CAST(SUM(CASE WHEN T1.statusId > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) AS per FROM results AS T1 /* Answer the following: What is the percentage of races that were won by the driver who set the fastest lap? won by the driver who set the fastest lap refers to fastestLap = rank and position = 1; percentage = Divide (Count(raceId where fastestLap = rank and position = 1), Count(raceId)) * 100 */ SELECT CAST(SUM(CASE WHEN T1.fastestLap = T1.rank AND T1.position = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) AS per FROM results AS T1
SELECT T1.year, AVG(T3.milliseconds) / 1000.0 FROM seasons AS T1 INNER JOIN results AS T2 ON T1.year = T2.raceId INNER JOIN lapTimes AS T3 ON T2.driverId = T3.driverId WHERE T2.position = 1 AND T3.time IS NOT NULL GROUP BY T1.year
SELECT forename, surname FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE rank = 2 ) AND STRFTIME('%Y', dob) > '1975'
SELECT COUNT(driverId) FROM drivers WHERE nationality = 'Italian' AND driverId IN ( SELECT driverId FROM results WHERE time IS NULL )
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapTime ASC LIMIT 1
SELECT T1.fastestLap FROM results AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2009 AND T2.position = 1 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: Who is the driver with the most wins in 2010? in 2010 refers to year = 2010; most wins refers to MAX(wins); driver refers to forename and surname */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor had the most points in 2011? in 2011 refers to year = 2011; most points refers to MAX(points); constructor refers to name */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2011 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap time in 2012? in 2012 refers to year = 2012; fastest lap time refers to MIN(fastestLapTime); driver refers to forename and surname */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2012 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: Which circuit had the most races in 2013? in 2013 refers to year = 2013; most races refers to MAX(count(raceId)); circuit refers to name */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2013 GROUP BY T2.name ORDER BY COUNT(T1.raceId) DESC LIMIT 1 /* Answer the following: Who is the driver with the most pit stops in 2014? in 2014 refers to year = 2014; most pit stops refers to MAX(count(stop)); driver refers to forename and surname */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2014 GROUP BY T2.driverId ORDER BY COUNT(T1.stop) DESC LIMIT 1 /* Answer the following: Which constructor had the most wins in 2015? in 2015 refers to year = 2015; most wins refers to MAX(wins); constructor refers to name */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2015 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in 2016? in 2016 refers to year = 2016; most points refers to MAX(points); driver refers to forename and surname */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2016 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which constructor had the most points in 2017? in 2017 refers to year = 2017; most points refers to MAX(points); constructor refers to name */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2017 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap time in 2018? in 2018 refers to year = 2018; fastest lap time refers to MIN(fastestLapTime); driver refers to forename and surname */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2018 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: Which circuit had the most races in 2019? in 2019 refers to year = 2019; most races refers to MAX(count(raceId)); circuit refers to name */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2019 GROUP BY T2.name ORDER BY COUNT(T1.raceId) DESC LIMIT 1 /* Answer the following: Who is the driver with the most pit stops in 2020? in 2020 refers to year = 2020; most pit stops refers to MAX(count(stop)); driver refers to forename and surname */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2020 GROUP BY T2.driverId ORDER BY COUNT(T1.stop) DESC LIMIT 1
SELECT AVG(fastestLapSpeed) FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2009 AND name = 'Spanish Grand Prix' )
SELECT T2.name, T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1 /* Answer the following: Who is the driver with the most pit stops? most pit stops refers to MAX(stop); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T1.stop) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in a season? Please give the name and year. most wins in a season refers to MAX(wins); */ SELECT T2.name, T3.year FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId GROUP BY T1.constructorId, T3.year ORDER BY SUM(T1.wins) DESC LIMIT 1 /* Answer the following: Which driver has the fastest lap time? Please give the name and the time. fastest lap time refers to MIN(fastestLapTime); */ SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the highest altitude? Please give the name and altitude. highest altitude refers to MAX(alt); */ SELECT name, alt FROM circuits ORDER BY alt DESC LIMIT 1 /* Answer the following: Which driver has the most number of wins in a season? Please give the name and year. most number of wins in a season refers to MAX(wins); */ SELECT T2.forename, T2.surname, T3.year FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY SUM(T1.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most number of podium finishes? Please give the name. most number of podium finishes refers to position <= 3; */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position <= 3 GROUP BY T1.constructorId ORDER BY COUNT(T1.position) DESC LIMIT 1 /* Answer the following: Which driver has the most number of pole positions? Please give the name. most number of pole positions refers to grid = 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.grid = 1 GROUP BY T1.driverId ORDER BY COUNT(T1.grid) DESC LIMIT 1 /* Answer the following: Which driver has the most number of fastest laps? Please give the name. most number of fastest laps refers to rank = 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.rank = 1 GROUP BY T1.driverId ORDER BY COUNT(T1.rank) DESC LIMIT 1 /* Answer the following: Which driver has the most number of DNFs (Did Not Finish)? Please give the name. most number of DNFs refers to statusId != 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.statusId != 1 GROUP BY T1.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.lap > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year BETWEEN 2000 AND 2005 AND strftime('%Y', T2.dob) < '1985'
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND T2.milliseconds/1000 < 120
SELECT code FROM drivers WHERE nationality = 'America'
SELECT raceId FROM races WHERE year = 2009
SELECT COUNT(driverId) FROM results WHERE raceId = 18
SELECT driverId, code FROM drivers ORDER BY dob DESC LIMIT 3; SELECT COUNT(*) FROM drivers WHERE nationality = 'Dutch' AND driverId IN (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3);
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'
SELECT COUNT(driverId) FROM drivers WHERE nationality = 'Australian' AND strftime('%Y', dob) = '1980'
SELECT drivers.forename, drivers.surname, MIN(lapTimes.time) as EarliestLapTime FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'German' AND STRFTIME('%Y', drivers.dob) BETWEEN '1980' AND '1990' GROUP BY drivers.driverId ORDER BY EarliestLapTime ASC LIMIT 3
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1
SELECT T1.driverId, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE STRFTIME('%Y', T1.dob) = '1971' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC
SELECT T1.forename, T1.surname, T1.dob, T2.time FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Spanish' AND STRFTIME('%Y', T1.dob) < '1982' ORDER BY T2.time DESC LIMIT 10
SELECT year FROM seasons WHERE year IN ( SELECT year FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE fastestLapTime IS NOT NULL ) ) ORDER BY year DESC LIMIT 1
SELECT T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.time DESC LIMIT 1 /* Answer the following: Which driver has the lowest points in driver standings? lowest points refers to Min(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.points ASC LIMIT 1 /* Answer the following: Which constructor has the lowest points in constructor standings? lowest points refers to Min(points); */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points ASC LIMIT 1 /* Answer the following: Which driver has the longest pit stop duration? longest pit stop duration refers to Max(duration); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.duration DESC LIMIT 1 /* Answer the following: Which constructor has the lowest position in constructor results? lowest position refers to Min(position); */ SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.position ASC LIMIT 1 /* Answer the following: Which driver has the lowest position in qualifying? lowest position refers to Min(position); */ SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.position ASC LIMIT 1 /* Answer the following: Which driver has the lowest position in results? lowest position refers to Min(position); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.position ASC LIMIT 1 /* Answer the following: Which circuit has the lowest altitude? lowest altitude refers to Min(alt); */ SELECT T1.name FROM circuits AS T1 ORDER BY T1.alt ASC LIMIT 1 /* Answer the following: Which season has the lowest number of races? lowest number of races refers to Min(count(raceId)); */ SELECT T1.year FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year GROUP BY T1.year ORDER BY COUNT(T2.raceId) ASC LIMIT 1
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5 /* Answer the following: What is the name of the driver who had the most pit stops? most pit stops refers to MAX(stop); name of the driver refers to forename, surname; */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T1.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most wins in the constructorStandings? most wins refers to MAX(wins); name of the constructor refers to name; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.constructorId ORDER BY SUM(T1.wins) DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most wins in the driverStandings? most wins refers to MAX(wins); name of the driver refers to forename, surname; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY SUM(T1.wins) DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the fastest lap time was recorded? fastest lap time refers to MIN(fastestLapTime); name of the circuit refers to name; */ SELECT T2.name FROM results AS T1 INNER JOIN circuits AS T2 ON T1.raceId = T2.circuitId ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest qualifying time in Q1? fastest qualifying time in Q1 refers to MIN(q1); name of the driver refers to forename, surname; */ SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.q1 ASC LIMIT 1
SELECT COUNT(resultId) FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = 2 AND time IS NOT NULL
SELECT circuitId, name, location, lat, lng, COUNT(circuitId) AS times_held FROM circuits WHERE country = 'Austria' GROUP BY circuitId /* Answer the following: How many races were held in 2020? */ SELECT COUNT(raceId) FROM races WHERE year = 2020 /* Answer the following: Who won the most races in 2020? */ SELECT driverId, COUNT(driverId) AS wins FROM driverStandings WHERE position = 1 AND raceId IN (SELECT raceId FROM races WHERE year = 2020) GROUP BY driverId ORDER BY wins DESC LIMIT 1 /* Answer the following: Which constructor had the most wins in 2020? */ SELECT constructorId, COUNT(constructorId) AS wins FROM constructorStandings WHERE position = 1 AND raceId IN (SELECT raceId FROM races WHERE year = 2020) GROUP BY constructorId ORDER BY wins DESC LIMIT 1 /* Answer the following: How many pit stops were made in 2020? */ SELECT COUNT(*) FROM pitStops WHERE raceId IN (SELECT raceId FROM races WHERE year = 2020) /* Answer the following: Who had the fastest lap in 2020? */ SELECT driverId, MIN(fastestLapTime) AS fastest_lap FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2020) GROUP BY driverId ORDER BY fastest_lap ASC LIMIT 1 /* Answer the following: Which constructor had the fastest lap in 2020? */ SELECT constructorId, MIN(fastestLapTime) AS fastest_lap FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2020) GROUP BY constructorId ORDER BY fastest_lap ASC LIMIT 1 /* Answer the following: How many drivers participated in 2020? */ SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2020) /* Answer the following: How many constructors participated in 2020? */ SELECT COUNT(DISTINCT constructorId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2020)
SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps? most fastest laps refers to MAX(count(fastestLap)) */ SELECT driverId FROM results GROUP BY driverId ORDER BY COUNT(fastestLap) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins? most wins refers to MAX(count(wins)) */ SELECT constructorId FROM constructorStandings GROUP BY constructorId ORDER BY SUM(wins) DESC LIMIT 1 /* Answer the following: Which driver has the most points in a single race? most points refers to MAX(points) */ SELECT driverId, raceId FROM results ORDER BY points DESC LIMIT 1 /* Answer the following: Which circuit has hosted the most races? most races refers to MAX(count(raceId)) */ SELECT circuitId FROM races GROUP BY circuitId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most pit stops? most pit stops refers to MAX(count(stop)) */ SELECT driverId FROM pitStops GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions? pole position refers to grid = 1 */ SELECT driverId FROM results WHERE grid = 1 GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most pole positions? pole position refers to grid = 1 */ SELECT constructorId FROM results WHERE grid = 1 GROUP BY constructorId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes? podium finish refers to positionOrder <= 3 */ SELECT driverId FROM results WHERE positionOrder <= 3 GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes? podium finish refers to positionOrder <= 3 */ SELECT constructorId FROM results WHERE positionOrder <= 3 GROUP BY constructorId ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.driverRef, T1.nationality, T1.dob FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q2 IS NOT NULL AND T2.raceId = 23 /* Answer the following: What is the name of the constructor who won the most races in 2008? won the most races refers to MAX(wins); 2008 refers to year; name of constructor refers to name; */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: List the drivers who made a pit stop at lap 10 during the race no. 50. Indicate their nationality and the duration of the pit stop. made a pit stop at lap 10 refers to lap = 10; race no. refers to raceId; duration of the pit stop refers to duration; */ SELECT T1.driverRef, T1.nationality, T2.duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.lap = 10 AND T2.raceId = 50 /* Answer the following: What is the name and location of the circuit where the race no. 75 took place? name and location of the circuit refers to name and location; race no. refers to raceId; */ SELECT T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.raceId = 75 /* Answer the following: List the drivers who finished the race no. 100 in the top 3 positions. Indicate their nationality and the constructor they were driving for. finished the race in the top 3 positions refers to positionOrder <= 3; race no. refers to raceId; constructor they were driving for refers to name in constructors table; */ SELECT T1.driverRef, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId WHERE T2.positionOrder <= 3 AND T2.raceId = 100
SELECT T1.year, T4.name, T4.date, T4.time FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T4 ON T2.raceId = T4.raceId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) ORDER BY T4.date LIMIT 1 /* Answer the following: What is the nationality of the youngest driver who had a pit stop? youngest driver refers to Max (year(dob)); */ SELECT T1.nationality FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) LIMIT 1 /* Answer the following: What is the name of the youngest driver who had a lap time recorded? youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) LIMIT 1 /* Answer the following: What is the name of the youngest driver who had a result recorded? youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) LIMIT 1 /* Answer the following: What is the name of the youngest driver who had a constructor result recorded? youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN constructorResults AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) LIMIT 1 /* Answer the following: What is the name of the youngest driver who had a constructor standing recorded? youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN constructorStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) LIMIT 1 /* Answer the following: What is the name of the youngest driver who had a driver standing recorded? youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) LIMIT 1
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'American' AND T2.statusId = 2
SELECT T2.name, T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'Italian' ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in the 2020 season? 2020 season refers to year = 2020; most wins refers to MAX(wins); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2020 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: What is the average pit stop duration in the 2020 season? 2020 season refers to year = 2020; average pit stop duration refers to AVG(milliseconds); */ SELECT AVG(T1.milliseconds) FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2020 /* Answer the following: Which circuit has the highest altitude? highest altitude refers to MAX(alt); */ SELECT T1.name FROM circuits AS T1 ORDER BY T1.alt DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2020 season? 2020 season refers to year = 2020; most wins refers to MAX(wins); */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2020 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap in the 2020 season? 2020 season refers to year = 2020; fastest lap refers to MIN(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2020 ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which constructor has the most pole positions in the 2020 season? 2020 season refers to year = 2020; most pole positions refers to MAX(position) where position = 1; */ SELECT T2.name, COUNT(T1.position) AS pole_positions FROM qualifying AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2020 AND T1.position = 1 GROUP BY T2.name ORDER BY pole_positions DESC LIMIT 1
SELECT T2.url FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.constructorId ORDER BY SUM(T1.wins) DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap time? fastest lap time refers to MIN(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has hosted the most races? most races refers to MAX(COUNT(raceId)); */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.circuitId ORDER BY COUNT(T1.raceId) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a single race? most points in a single race refers to MAX(points); */ SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which driver has the most wins in a season? most wins in a season refers to MAX(wins); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId, T1.raceId ORDER BY SUM(T1.wins) DESC LIMIT 1
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'French Grand Prix' AND T2.lap = 3 ORDER BY T2.time DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2010 season? most wins refers to MAX(wins); */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 GROUP BY T1.name ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 2008 season? most points refers to MAX(points); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 GROUP BY T1.driverId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the most points in the 2012 season? most points refers to MAX(points); */ SELECT T1.nationality FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2012 GROUP BY T1.constructorId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the longest pit stop in the 2015 season? longest pit stop refers to MAX(milliseconds); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2015 ORDER BY T2.milliseconds DESC LIMIT 1 /* Answer the following: Which circuit has the most races in the database? most races refers to COUNT(raceId); */ SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.circuitId ORDER BY COUNT(T2.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in the database? most fastest laps refers to COUNT(fastestLap); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLap IS NOT NULL GROUP BY T1.driverId ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which constructor has the most pole positions in the database? most pole positions refers to COUNT(grid) where grid = 1; */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.grid = 1 GROUP BY T1.constructorId ORDER BY COUNT(T2.grid) DESC LIMIT 1 /* Answer the following: Which driver has the most DNF (Did Not Finish) status in the database? most DNF refers to COUNT(statusId) where statusId = 'DNF'; */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN status AS T3 ON T2.statusId = T3.statusId WHERE T3.status = 'DNF' GROUP BY T1.driverId ORDER BY COUNT(T2.statusId) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in the database? most podium finishes refers to COUNT(position) where position <= 3; */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position <= 3 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1
SELECT T1.name, MIN(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.lap = 1 /* Answer the following: Who is the driver with the most wins? most wins refers to MAX(wins); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most points? most points refers to MAX(points); */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which driver has the fastest average lap time? fastest average lap time refers to MIN(AVG(milliseconds)); */ SELECT T2.forename, T2.surname, MIN(AVG(T1.milliseconds)) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId /* Answer the following: Which driver has the shortest average pit stop duration? shortest average pit stop duration refers to MIN(AVG(milliseconds)); */ SELECT T2.forename, T2.surname, MIN(AVG(T1.milliseconds)) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId /* Answer the following: Which driver has the most pole positions? most pole positions refers to MAX(position) where position = 1; */ SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 1 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most pole positions? most pole positions refers to MAX(position) where position = 1; */ SELECT T2.name FROM qualifying AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position = 1 GROUP BY T1.constructorId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps? most fastest laps refers to MAX(fastestLap); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLap DESC LIMIT 1 /* Answer the following: Which constructor has the most fastest laps? most fastest laps refers to MAX(fastestLap); */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.fastestLap DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes? most podium finishes refers to MAX(position) where position <= 3; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position <= 3 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes? most podium finishes refers to MAX(position) where position <= 3; */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position <= 3 GROUP BY T1.constructorId ORDER BY COUNT(*) DESC LIMIT 1
SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2006 AND T2.name = 'United States Grand Prix' AND T1.rank < 11
SELECT T1.driverId, T1.forename, T1.surname, AVG(T2.duration) AS avg_duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1985' GROUP BY T1.driverId ORDER BY avg_duration ASC LIMIT 5
SELECT T3.forename, T3.surname, T4.time FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId INNER JOIN lapTimes AS T4 ON T2.raceId = T4.raceId AND T2.driverId = T4.driverId WHERE T1.name = 'Canadian Grand Prix' AND T1.year = 2008 AND T2.positionOrder = 1 /* Answer the following: What is the nationality of the constructor who won the most races in 2010? */ SELECT T3.nationality FROM (SELECT constructorId, COUNT(*) AS wins FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2010 AND T2.positionOrder = 1 GROUP BY constructorId ORDER BY wins DESC LIMIT 1) AS T1 INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId /* Answer the following: Who is the driver with the most fastest laps in 2007? */ SELECT T3.forename, T3.surname FROM (SELECT driverId, COUNT(*) AS fastestLaps FROM results WHERE fastestLap IS NOT NULL AND raceId IN (SELECT raceId FROM races WHERE year = 2007) GROUP BY driverId ORDER BY fastestLaps DESC LIMIT 1) AS T1 INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId /* Answer the following: What is the average pit stop duration in the 2012 season? */ SELECT AVG(milliseconds) FROM pitStops WHERE raceId IN (SELECT raceId FROM races WHERE year = 2012) /* Answer the following: Which circuit has the highest altitude? */ SELECT T1.name FROM circuits AS T1 WHERE T1.alt = (SELECT MAX(alt) FROM circuits)
SELECT T2.constructorRef, T2.url FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2009 AND T3.name = 'Singapore Grand Prix' ORDER BY T1.time ASC LIMIT 1
SELECT forename, surname, dob FROM drivers WHERE STRFTIME('%Y', dob) BETWEEN '1981' AND '1991' AND nationality = 'Austrian'
SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC
SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'
SELECT T2.name, T2.nationality, SUM(T1.points) AS total_points FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name, T2.nationality ORDER BY total_points DESC LIMIT 1
SELECT AVG(T1.points) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'
SELECT CAST(COUNT(raceId) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins? most wins refers to MAX(wins); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.name ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Which driver has the fastest average lap time? fastest average lap time refers to MIN(AVG(milliseconds)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY AVG(T2.milliseconds) ASC LIMIT 1 /* Answer the following: Which circuit is the most frequently used? most frequently used refers to MAX(COUNT(circuitId)); circuit refers to name */ SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.name ORDER BY COUNT(T2.circuitId) DESC LIMIT 1 /* Answer the following: Which year had the most races? most races refers to MAX(COUNT(raceId)); year refers to year */ SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions? most pole positions refers to MAX(COUNT(grid = 1)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.grid = 1 GROUP BY T1.driverId ORDER BY COUNT(T2.grid) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes? most podium finishes refers to MAX(COUNT(position <= 3)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position <= 3 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps? most fastest laps refers to MAX(COUNT(fastestLap)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLap IS NOT NULL GROUP BY T1.driverId ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins? most race wins refers to MAX(COUNT(position = 1)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most points in a single race? most points in a single race refers to MAX(points); driver refers to forename and surname */ SELECT T1.forename, T1.surname, T2.points FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which driver has the most points overall? most points overall refers to MAX(SUM(points)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which constructor has the most points overall? most points overall refers to MAX(SUM(points)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.name ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish)? most DNFs refers to MAX(COUNT(statusId != 1)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.statusId != 1 GROUP BY T1.driverId ORDER BY COUNT(T2.statusId) DESC LIMIT 1 /* Answer the following: Which constructor has the most DNFs (Did Not Finish)? most DNFs refers to MAX(COUNT(statusId != 1)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.statusId != 1 GROUP BY T1.name ORDER BY COUNT(T2.statusId) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes? most podium finishes refers to MAX(COUNT(position <= 3)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position <= 3 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most race starts? most race starts refers to MAX(COUNT(driverId)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.driverId) DESC LIMIT 1 /* Answer the following: Which driver has the most championships? most championships refers to MAX(COUNT(position = 1)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most championships? most championships refers to MAX(COUNT(position = 1)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 1 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most second place finishes? most second place finishes refers to MAX(COUNT(position = 2)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 2 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most second place finishes? most second place finishes refers to MAX(COUNT(position = 2)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 2 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most third place finishes? most third place finishes refers to MAX(COUNT(position = 3)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 3 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most third place finishes? most third place finishes refers to MAX(COUNT(position = 3)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 3 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most fourth place finishes? most fourth place finishes refers to MAX(COUNT(position = 4)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 4 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most fourth place finishes? most fourth place finishes refers to MAX(COUNT(position = 4)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 4 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most fifth place finishes? most fifth place finishes refers to MAX(COUNT(position = 5)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 5 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most fifth place finishes? most fifth place finishes refers to MAX(COUNT(position = 5)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 5 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most sixth place finishes? most sixth place finishes refers to MAX(COUNT(position = 6)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 6 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most sixth place finishes? most sixth place finishes refers to MAX(COUNT(position = 6)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 6 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most seventh place finishes? most seventh place finishes refers to MAX(COUNT(position = 7)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 7 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most seventh place finishes? most seventh place finishes refers to MAX(COUNT(position = 7)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 7 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most eighth place finishes? most eighth place finishes refers to MAX(COUNT(position = 8)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 8 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most eighth place finishes? most eighth place finishes refers to MAX(COUNT(position = 8)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 8 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most ninth place finishes? most ninth place finishes refers to MAX(COUNT(position = 9)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 9 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most ninth place finishes? most ninth place finishes refers to MAX(COUNT(position = 9)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 9 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most tenth place finishes? most tenth place finishes refers to MAX(COUNT(position = 10)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 10 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most tenth place finishes? most tenth place finishes refers to MAX(COUNT(position = 10)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 10 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most eleventh place finishes? most eleventh place finishes refers to MAX(COUNT(position = 11)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 11 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most eleventh place finishes? most eleventh place finishes refers to MAX(COUNT(position = 11)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 11 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twelfth place finishes? most twelfth place finishes refers to MAX(COUNT(position = 12)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 12 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twelfth place finishes? most twelfth place finishes refers to MAX(COUNT(position = 12)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 12 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most thirteenth place finishes? most thirteenth place finishes refers to MAX(COUNT(position = 13)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 13 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most thirteenth place finishes? most thirteenth place finishes refers to MAX(COUNT(position = 13)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 13 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most fourteenth place finishes? most fourteenth place finishes refers to MAX(COUNT(position = 14)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 14 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most fourteenth place finishes? most fourteenth place finishes refers to MAX(COUNT(position = 14)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 14 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most fifteenth place finishes? most fifteenth place finishes refers to MAX(COUNT(position = 15)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 15 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most fifteenth place finishes? most fifteenth place finishes refers to MAX(COUNT(position = 15)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 15 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most sixteenth place finishes? most sixteenth place finishes refers to MAX(COUNT(position = 16)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 16 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most sixteenth place finishes? most sixteenth place finishes refers to MAX(COUNT(position = 16)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 16 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most seventeenth place finishes? most seventeenth place finishes refers to MAX(COUNT(position = 17)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 17 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most seventeenth place finishes? most seventeenth place finishes refers to MAX(COUNT(position = 17)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 17 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most eighteenth place finishes? most eighteenth place finishes refers to MAX(COUNT(position = 18)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 18 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most eighteenth place finishes? most eighteenth place finishes refers to MAX(COUNT(position = 18)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 18 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most nineteenth place finishes? most nineteenth place finishes refers to MAX(COUNT(position = 19)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 19 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most nineteenth place finishes? most nineteenth place finishes refers to MAX(COUNT(position = 19)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 19 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twentieth place finishes? most twentieth place finishes refers to MAX(COUNT(position = 20)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 20 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twentieth place finishes? most twentieth place finishes refers to MAX(COUNT(position = 20)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 20 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twenty-first place finishes? most twenty-first place finishes refers to MAX(COUNT(position = 21)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 21 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-first place finishes? most twenty-first place finishes refers to MAX(COUNT(position = 21)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 21 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twenty-second place finishes? most twenty-second place finishes refers to MAX(COUNT(position = 22)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 22 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-second place finishes? most twenty-second place finishes refers to MAX(COUNT(position = 22)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 22 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twenty-third place finishes? most twenty-third place finishes refers to MAX(COUNT(position = 23)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 23 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-third place finishes? most twenty-third place finishes refers to MAX(COUNT(position = 23)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 23 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twenty-fourth place finishes? most twenty-fourth place finishes refers to MAX(COUNT(position = 24)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 24 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-fourth place finishes? most twenty-fourth place finishes refers to MAX(COUNT(position = 24)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 24 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twenty-fifth place finishes? most twenty-fifth place finishes refers to MAX(COUNT(position = 25)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 25 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-fifth place finishes? most twenty-fifth place finishes refers to MAX(COUNT(position = 25)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 25 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twenty-sixth place finishes? most twenty-sixth place finishes refers to MAX(COUNT(position = 26)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 26 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-sixth place finishes? most twenty-sixth place finishes refers to MAX(COUNT(position = 26)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 26 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twenty-seventh place finishes? most twenty-seventh place finishes refers to MAX(COUNT(position = 27)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 27 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-seventh place finishes? most twenty-seventh place finishes refers to MAX(COUNT(position = 27)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 27 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twenty-eighth place finishes? most twenty-eighth place finishes refers to MAX(COUNT(position = 28)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 28 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-eighth place finishes? most twenty-eighth place finishes refers to MAX(COUNT(position = 28)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 28 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most twenty-ninth place finishes? most twenty-ninth place finishes refers to MAX(COUNT(position = 29)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 29 GROUP BY T1.driverId ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which constructor has the most twenty-ninth place finishes? most twenty-ninth place finishes refers to MAX(COUNT(position = 29)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 29 GROUP BY T1.name ORDER BY COUNT(T2.position) DESC LIMIT 1 /* Answer the following: Which driver has the most thirtieth place finishes? most thirtieth place finishes refers to MAX(COUNT(position = 30)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T
SELECT wins FROM driverStandings WHERE points = 91
SELECT races.name FROM races INNER JOIN results ON races.raceId = results.raceId ORDER BY results.fastestLapTime ASC LIMIT 1 /* Answer the following: Which driver has the most wins in a season? most wins refers to MAX(wins); in a season refers to year; */ SELECT drivers.forename, drivers.surname, driverStandings.year FROM drivers INNER JOIN driverStandings ON drivers.driverId = driverStandings.driverId GROUP BY driverStandings.year ORDER BY MAX(driverStandings.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a race? most points refers to MAX(points); in a race refers to raceId; */ SELECT constructors.name FROM constructors INNER JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId GROUP BY constructorResults.raceId ORDER BY MAX(constructorResults.points) DESC LIMIT 1 /* Answer the following: Which driver has the fastest average lap time? fastest average lap time refers to MIN(AVG(milliseconds)); */ SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId GROUP BY lapTimes.driverId ORDER BY AVG(lapTimes.milliseconds) ASC LIMIT 1 /* Answer the following: Which constructor has the most wins in a season? most wins refers to MAX(wins); in a season refers to year; */ SELECT constructors.name, constructorStandings.year FROM constructors INNER JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId GROUP BY constructorStandings.year ORDER BY MAX(constructorStandings.wins) DESC LIMIT 1 /* Answer the following: Which driver has the shortest pit stop time? shortest pit stop time refers to MIN(milliseconds); */ SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitStops ON drivers.driverId = pitStops.driverId ORDER BY pitStops.milliseconds ASC LIMIT 1 /* Answer the following: Which driver has the most pole positions in a season? most pole positions refers to MAX(position); in a season refers to year; */ SELECT drivers.forename, drivers.surname, qualifying.year FROM drivers INNER JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE qualifying.position = 1 GROUP BY qualifying.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most pole positions in a season? most pole positions refers to MAX(position); in a season refers to year; */ SELECT constructors.name, qualifying.year FROM constructors INNER JOIN qualifying ON constructors.constructorId = qualifying.constructorId WHERE qualifying.position = 1 GROUP BY qualifying.year ORDER BY COUNT(*) DESC LIMIT 1
SELECT c.location, c.country FROM races AS r INNER JOIN circuits AS c ON r.circuitId = c.circuitId ORDER BY r.date DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in 2010? most wins refers to MAX(wins); 2010 refers to year = 2010; driver refers to forename+surname */ SELECT d.forename, d.surname FROM driverStandings AS ds INNER JOIN drivers AS d ON ds.driverId = d.driverId WHERE ds.raceId IN (SELECT raceId FROM races WHERE year = 2010) ORDER BY ds.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most points in 2008? most points refers to MAX(points); 2008 refers to year = 2008; constructor refers to name */ SELECT c.name FROM constructorStandings AS cs INNER JOIN constructors AS c ON cs.constructorId = c.constructorId WHERE cs.raceId IN (SELECT raceId FROM races WHERE year = 2008) ORDER BY cs.points DESC LIMIT 1 /* Answer the following: What is the fastest lap time recorded in 2019? fastest lap time refers to MIN(fastestLapTime); 2019 refers to year = 2019 */ SELECT MIN(r.fastestLapTime) FROM results AS r WHERE r.raceId IN (SELECT raceId FROM races WHERE year = 2019) /* Answer the following: Who is the driver with the shortest pit stop time in 2015? shortest pit stop time refers to MIN(milliseconds); 2015 refers to year = 2015; driver refers to forename+surname */ SELECT d.forename, d.surname FROM pitStops AS ps INNER JOIN drivers AS d ON ps.driverId = d.driverId WHERE ps.raceId IN (SELECT raceId FROM races WHERE year = 2015) ORDER BY ps.milliseconds ASC LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2007 season? most wins refers to MAX(wins); 2007 season refers to year = 2007; constructor refers to name */ SELECT c.name FROM constructorStandings AS cs INNER JOIN constructors AS c ON cs.constructorId = c.constructorId WHERE cs.raceId IN (SELECT raceId FROM races WHERE year = 2007) ORDER BY cs.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the most pole positions in 2006? most pole positions refers to MAX(position) where position = 1; 2006 refers to year = 2006; driver refers to forename+surname */ SELECT d.forename, d.surname FROM qualifying AS q INNER JOIN drivers AS d ON q.driverId = d.driverId WHERE q.raceId IN (SELECT raceId FROM races WHERE year = 2006) AND q.position = 1 GROUP BY d.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor had the most podium finishes in 2005? most podium finishes refers to MAX(position) where position <= 3; 2005 refers to year = 2005; constructor refers to name */ SELECT c.name FROM results AS r INNER JOIN constructors AS c ON r.constructorId = c.constructorId WHERE r.raceId IN (SELECT raceId FROM races WHERE year = 2005) AND r.position <= 3 GROUP BY c.constructorId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Who is the driver with the most fastest laps in 2004? most fastest laps refers to MAX(fastestLap); 2004 refers to year = 2004; driver refers to forename+surname */ SELECT d.forename, d.surname FROM results AS r INNER JOIN drivers AS d ON r.driverId = d.driverId WHERE r.raceId IN (SELECT raceId FROM races WHERE year = 2004) GROUP BY d.driverId ORDER BY COUNT(r.fastestLap) DESC LIMIT 1 /* Answer the following: Which constructor had the most second place finishes in 2003? most second place finishes refers to MAX(position) where position = 2; 2003 refers to year = 2003; constructor refers to name */ SELECT c.name FROM results AS r INNER JOIN constructors AS c ON r.constructorId = c.constructorId WHERE r.raceId IN (SELECT raceId FROM races WHERE year = 2003) AND r.position = 2 GROUP BY c.constructorId ORDER BY COUNT(*) DESC LIMIT 1
SELECT T3.forename, T3.surname FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId WHERE T2.year = 2008 AND T4.name = 'Marina Bay Street Circuit' AND T1.position = 1 ORDER BY T1.q3 LIMIT 1 /* Answer the following: What is the nationality of the constructor who won the most races in 2010? won the most races refers to MAX(wins); 2010 is the year of race; */ SELECT T3.nationality FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.year = 2010 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: What is the name of the circuit where the fastest lap was made in 2012? fastest lap refers to MIN(fastestLapTime); 2012 is the year of race; */ SELECT T3.name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T2.year = 2012 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: Who is the driver with the most wins in 2015? most wins refers to MAX(wins); 2015 is the year of race; full name of driver = forename, surname */ SELECT T3.forename, T3.surname FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2015 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in 2009? most points refers to MAX(points); 2009 is the year of race; */ SELECT T3.name FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.year = 2009 ORDER BY T1.points DESC LIMIT 1
SELECT T1.forename, T1.surname, T1.nationality, T2.name FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.raceId WHERE T1.dob = (SELECT MAX(dob) FROM drivers) LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race? Who refers to forename+surname; youngest driver to have won a race refers to min(subtract(year, dob)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 ORDER BY T2.year - SUBSTR(T1.dob, 1, 4) LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race and what is his nationality? Who refers to forename+surname; youngest driver to have won a race refers to min(subtract(year, dob)); nationality refers to nationality */ SELECT T1.forename, T1.surname, T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 ORDER BY T2.year - SUBSTR(T1.dob, 1, 4) LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race and what is the name of the race? Who refers to forename+surname; youngest driver to have won a race refers to min(subtract(year, dob)); name of the race refers to name */ SELECT T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position = 1 ORDER BY T2.year - SUBSTR(T1.dob, 1, 4) LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race and what is the name of the constructor? Who refers to forename+surname; youngest driver to have won a race refers to min(subtract(year, dob)); name of the constructor refers to name */ SELECT T1.forename, T1.surname, T4.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN constructors AS T4 ON T2.constructorId = T4.constructorId WHERE T2.position = 1 ORDER BY T2.year - SUBSTR(T1.dob, 1, 4) LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race and what is the name of the circuit? Who refers to forename+surname; youngest driver to have won a race refers to min(subtract(year, dob)); name of the circuit refers to name */ SELECT T1.forename, T1.surname, T5.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T5 ON T3.circuitId = T5.circuitId WHERE T2.position = 1 ORDER BY T2.year - SUBSTR(T1.dob, 1, 4) LIMIT 1
SELECT COUNT(T1.statusId), T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.statusId = 3 AND T1.raceId IN (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') GROUP BY T2.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1
SELECT T1.forename, T1.surname, SUM(T3.wins) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN driverStandings AS T3 ON T1.driverId = T3.driverId GROUP BY T1.driverId, T1.forename, T1.surname ORDER BY T1.dob LIMIT 1 /* Answer the following: Who is the youngest constructor to have won a race? youngest constructor refers to min(dob); won a race refers to position = 1 */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 1 ORDER BY T1.dob DESC LIMIT 1 /* Answer the following: Who is the oldest driver to have participated in a race in the UK? oldest driver refers to min(dob); in the UK refers to country = 'UK' */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.driverId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'UK' ORDER BY T1.dob LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race in the 2008 season? youngest driver refers to max(dob); won a race refers to position = 1; in the 2008 season refers to year = 2008 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T2.position = 1 ORDER BY T1.dob DESC LIMIT 1 /* Answer the following: Who is the oldest driver to have won a race in the 2008 season? oldest driver refers to min(dob); won a race refers to position = 1; in the 2008 season refers to year = 2008 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T2.position = 1 ORDER BY T1.dob LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race in the UK? youngest driver refers to max(dob); won a race refers to position = 1; in the UK refers to country = 'UK' */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.country = 'UK' AND T2.position = 1 ORDER BY T1.dob DESC LIMIT 1 /* Answer the following: Who is the oldest driver to have won a race in the UK? oldest driver refers to min(dob); won a race refers to position = 1; in the UK refers to country = 'UK' */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.country = 'UK' AND T2.position = 1 ORDER BY T1.dob LIMIT 1
SELECT MAX(duration) FROM pitStops
SELECT MIN(time) FROM lapTimes /* Answer the following: Which driver has the most wins? */ SELECT driverId FROM driverStandings GROUP BY driverId ORDER BY SUM(wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points? */ SELECT constructorId FROM constructorStandings GROUP BY constructorId ORDER BY SUM(points) DESC LIMIT 1 /* Answer the following: Which circuit has hosted the most races? */ SELECT circuitId FROM races GROUP BY circuitId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the fastest lap time on record? */ SELECT driverId FROM lapTimes ORDER BY time ASC LIMIT 1 /* Answer the following: Which year had the most races? */ SELECT year FROM races GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most pit stops? */ SELECT driverId FROM pitStops GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins? */ SELECT constructorId FROM constructorStandings GROUP BY constructorId ORDER BY SUM(wins) DESC LIMIT 1 /* Answer the following: Which driver has the most points in a single race? */ SELECT driverId, MAX(points) FROM driverStandings GROUP BY driverId ORDER BY MAX(points) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a single race? */ SELECT constructorId, MAX(points) FROM constructorStandings GROUP BY constructorId ORDER BY MAX(points) DESC LIMIT 1
SELECT MAX(duration) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT pitStops.lap FROM pitStops INNER JOIN drivers ON pitStops.driverId = drivers.driverId INNER JOIN races ON pitStops.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Australian Grand Prix' AND races.year = 2011 /* Answer the following: What was the fastest lap time achieved by Sebastian Vettel in the 2013 season? */ SELECT MIN(results.fastestLapTime) FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.year = 2013 /* Answer the following: How many races has the constructor 'Ferrari' won in the 2008 season? */ SELECT COUNT(*) FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN constructors ON results.constructorId = constructors.constructorId WHERE constructors.name = 'Ferrari' AND results.positionOrder = 1 AND races.year = 2008 /* Answer the following: Who was the driver of the 'Red Bull' team who scored the most points in the 2010 season? */ SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN constructors ON results.constructorId = constructors.constructorId INNER JOIN races ON results.raceId = races.raceId WHERE constructors.name = 'Red Bull' AND races.year = 2010 GROUP BY drivers.driverId ORDER BY SUM(results.points) DESC LIMIT 1 /* Answer the following: In which country is the circuit of the 'Monaco Grand Prix' located? */ SELECT circuits.country FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Monaco Grand Prix'
SELECT T3.forename, T3.surname, T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'
SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.time ASC LIMIT 1 /* Answer the following: Which constructor has the shortest pit stop time ever in a Formula_1 race? Please give the constructor name. shortest pit stop time refers to MIN(duration) */ SELECT T2.name FROM pitStops AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.duration ASC LIMIT 1 /* Answer the following: Which driver has the shortest qualifying time ever in a Formula_1 race? Please give his full name. shortest qualifying time refers to MIN(q1, q2, q3) */ SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY LEAST(T1.q1, T1.q2, T1.q3) ASC LIMIT 1 /* Answer the following: Which driver has the shortest race time ever in a Formula_1 race? Please give his full name. shortest race time refers to MIN(time) */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.time ASC LIMIT 1 /* Answer the following: Which driver has the shortest fastest lap time ever in a Formula_1 race? Please give his full name. shortest fastest lap time refers to MIN(fastestLapTime) */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapTime ASC LIMIT 1
SELECT T3.position, T3.name FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2010 season? most wins refers to MAX(wins) */ SELECT T3.name FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.year = 2010 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which driver had the fastest pit stop in the 2012 season? fastest pit stop refers to MIN(milliseconds) */ SELECT T3.forename, T3.surname FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2012 ORDER BY T1.milliseconds ASC LIMIT 1 /* Answer the following: Which driver had the most pole positions in the 2015 season? most pole positions refers to MAX(position) in qualifying table */ SELECT T3.forename, T3.surname FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2015 AND T1.position = 1 GROUP BY T3.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor had the most podium finishes in the 2008 season? most podium finishes refers to MAX(position) <= 3 in results table */ SELECT T3.name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.year = 2008 AND T1.position <= 3 GROUP BY T3.constructorId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver had the fastest lap in the 2011 season? fastest lap refers to MIN(fastestLapTime) */ SELECT T3.forename, T3.surname FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2011 ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which driver had the most wins in the 2009 season? most wins refers to MAX(wins) */ SELECT T3.forename, T3.surname FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2009 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 2013 season? most points refers to MAX(points) */ SELECT T3.name FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.year = 2013 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which driver had the most points in the 2014 season? most points refers to MAX(points) */ SELECT T3.forename, T3.surname FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2014 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which constructor had the most podium finishes in the 2007 season? most podium finishes refers to MAX(position) <= 3 in results table */ SELECT T3.name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.year = 2007 AND T1.position <= 3 GROUP BY T3.constructorId ORDER BY COUNT(*) DESC LIMIT 1
SELECT MIN(T1.time) AS lap_record FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix Circuit'
SELECT T1.name, MIN(T3.time) AS lap_record FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = 'Italy' GROUP BY T1.name
SELECT races.year, races.name FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Austrian Grand Prix Circuit' AND lapTimes.time = ( SELECT MIN(time) FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Austrian Grand Prix Circuit' )
SELECT pitStops.duration FROM lapTimes INNER JOIN pitStops ON lapTimes.raceId = pitStops.raceId AND lapTimes.driverId = pitStops.driverId INNER JOIN races ON lapTimes.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Austrian Grand Prix Circuit' AND lapTimes.time = ( SELECT MIN(time) FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Austrian Grand Prix Circuit' )
SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T2.time = '1:29.488'
SELECT AVG(milliseconds) FROM pitStops WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )
SELECT AVG(milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'
SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? Indicate the team's api id. highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which match had the highest number of home team goals? Indicate the match's api id. highest number of home team goals refers to MAX(home_team_goal); */ SELECT match_api_id FROM Match ORDER BY home_team_goal DESC LIMIT 1 /* Answer the following: Which country has the most number of leagues? most number of leagues refers to COUNT(league_id); */ SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: Which player has the highest potential? Indicate the player's api id. highest potential refers to MAX(potential); */ SELECT player_api_id FROM Player_Attributes ORDER BY potential DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation passing? Indicate the team's api id. highest chance creation passing refers to MAX(chanceCreationPassing); */ SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationPassing DESC LIMIT 1 /* Answer the following: Which match had the highest number of away team goals? Indicate the match's api id. highest number of away team goals refers to MAX(away_team_goal); */ SELECT match_api_id FROM Match ORDER BY away_team_goal DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? Indicate the player's api id. highest free kick accuracy refers to MAX(free_kick_accuracy); */ SELECT player_api_id FROM Player_Attributes ORDER BY free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest build up play passing? Indicate the team's api id. highest build up play passing refers to MAX(buildUpPlayPassing); */ SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlayPassing DESC LIMIT 1 /* Answer the following: Which match had the highest total number of goals? Indicate the match's api id. highest total number of goals refers to MAX(home_team_goal + away_team_goal); */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1
SELECT player_name, height FROM Player ORDER BY height DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? Indicate the team's name. highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country has the most leagues? Indicate the country's name. most leagues refers to COUNT(league_id); */ SELECT name FROM Country INNER JOIN League ON Country.id = League.country_id GROUP BY name ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? Indicate his name. highest overall rating refers to MAX(overall_rating); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: Which match had the highest number of home team goals? Indicate the match's id. highest number of home team goals refers to MAX(home_team_goal); */ SELECT match_api_id FROM Match ORDER BY home_team_goal DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation passing? Indicate the team's name. highest chance creation passing refers to MAX(chanceCreationPassing); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY chanceCreationPassing DESC LIMIT 1 /* Answer the following: Which player has the highest potential? Indicate his name. highest potential refers to MAX(potential); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY potential DESC LIMIT 1 /* Answer the following: Which match had the highest number of away team goals? Indicate the match's id. highest number of away team goals refers to MAX(away_team_goal); */ SELECT match_api_id FROM Match ORDER BY away_team_goal DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? Indicate his name. highest free kick accuracy refers to MAX(free_kick_accuracy); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure? Indicate the team's name. highest defence pressure refers to MAX(defencePressure); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY defencePressure DESC LIMIT 1
SELECT preferred_foot FROM Player_Attributes ORDER BY potential ASC LIMIT 1 /* Answer the following: What is the name of the team with the lowest build up play speed? lowest build up play speed refers to MIN(buildUpPlaySpeed); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed ASC LIMIT 1 /* Answer the following: What is the name of the country where the league with the least number of matches is located? least number of matches refers to MIN(COUNT(match_api_id)); */ SELECT T3.name FROM (SELECT league_id, COUNT(match_api_id) AS num_matches FROM Match GROUP BY league_id ORDER BY num_matches ASC LIMIT 1) AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.id /* Answer the following: What is the name of the player with the lowest overall rating? lowest overall rating refers to MIN(overall_rating); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating ASC LIMIT 1 /* Answer the following: What is the name of the team with the lowest chance creation shooting? lowest chance creation shooting refers to MIN(chanceCreationShooting); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.chanceCreationShooting ASC LIMIT 1 /* Answer the following: What is the season with the least number of matches? least number of matches refers to MIN(COUNT(match_api_id)); */ SELECT season FROM (SELECT season, COUNT(match_api_id) AS num_matches FROM Match GROUP BY season ORDER BY num_matches ASC LIMIT 1)
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating <= 65 AND defensive_work_rate = 'low'
SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T1.league_id ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating); player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country had the most matches in the 2016 season? most matches refers to MAX(COUNT(match_api_id)); 2016 season refers to season = '2015/2016'; country refers to name; */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T1.country_id ORDER BY COUNT(T1.match_api_id) DESC LIMIT 1 /* Answer the following: Which player has the highest potential? highest potential refers to MAX(potential); player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.potential DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation passing? highest chance creation passing refers to MAX(chanceCreationPassing); team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.chanceCreationPassing DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? highest free kick accuracy refers to MAX(free_kick_accuracy); player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure? highest defence pressure refers to MAX(defencePressure); team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defencePressure DESC LIMIT 1 /* Answer the following: Which player has the highest agility? highest agility refers to MAX(agility); player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.agility DESC LIMIT 1 /* Answer the following: Which team has the highest build up play dribbling? highest build up play dribbling refers to MAX(buildUpPlayDribbling); team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlayDribbling DESC LIMIT 1
SELECT home_team_api_id, COUNT(*) as lost_matches FROM Match WHERE season = '2015/2016' AND home_team_goal < away_team_goal GROUP BY home_team_api_id ORDER BY lost_matches ASC LIMIT 1 /* Answer the following: Who is the player with the highest overall rating in 2016? highest overall rating refers to MAX(overall_rating); in 2016 refers to date LIKE '2016%' */ SELECT player_api_id, MAX(overall_rating) as highest_rating FROM Player_Attributes WHERE date LIKE '2016%' GROUP BY player_api_id ORDER BY highest_rating DESC LIMIT 1 /* Answer the following: Which team had the highest build up play speed in 2016? highest build up play speed refers to MAX(buildUpPlaySpeed); in 2016 refers to date LIKE '2016%' */ SELECT team_api_id, MAX(buildUpPlaySpeed) as highest_speed FROM Team_Attributes WHERE date LIKE '2016%' GROUP BY team_api_id ORDER BY highest_speed DESC LIMIT 1 /* Answer the following: Which country had the most matches in the 2016 season? most matches refers to COUNT(match_api_id); 2016 season refers to season = '2015/2016' */ SELECT country_id, COUNT(match_api_id) as total_matches FROM Match WHERE season = '2015/2016' GROUP BY country_id ORDER BY total_matches DESC LIMIT 1 /* Answer the following: Which player had the most penalties in 2016? most penalties refers to MAX(penalties); in 2016 refers to date LIKE '2016%' */ SELECT player_api_id, MAX(penalties) as most_penalties FROM Player_Attributes WHERE date LIKE '2016%' GROUP BY player_api_id ORDER BY most_penalties DESC LIMIT 1 /* Answer the following: Which team had the most aggressive defence in 2016? most aggressive defence refers to MAX(defenceAggression); in 2016 refers to date LIKE '2016%' */ SELECT team_api_id, MAX(defenceAggression) as most_aggressive_defence FROM Team_Attributes WHERE date LIKE '2016%' GROUP BY team_api_id ORDER BY most_aggressive_defence DESC LIMIT 1 /* Answer the following: Which player had the highest free kick accuracy in 2016? highest free kick accuracy refers to MAX(free_kick_accuracy); in 2016 refers to date LIKE '2016%' */ SELECT player_api_id, MAX(free_kick_accuracy) as highest_accuracy FROM Player_Attributes WHERE date LIKE '2016%' GROUP BY player_api_id ORDER BY highest_accuracy DESC LIMIT 1 /* Answer the following: Which team had the widest defence in 2016? widest defence refers to MAX(defenceTeamWidth); in 2016 refers to date LIKE '2016%' */ SELECT team_api_id, MAX(defenceTeamWidth) as widest_defence FROM Team_Attributes WHERE date LIKE '2016%' GROUP BY team_api_id ORDER BY widest_defence DESC LIMIT 1 /* Answer the following: Which player had the highest sprint speed in 2016? highest sprint speed refers to MAX(sprint_speed); in 2016 refers to date LIKE '2016%' */ SELECT player_api_id, MAX(sprint_speed) as highest_speed FROM Player_Attributes WHERE date LIKE '2016%' GROUP BY player_api_id ORDER BY highest_speed DESC LIMIT 1 /* Answer the following: Which team had the highest chance creation passing in 2016? highest chance creation passing refers to MAX(chanceCreationPassing); in 2016 refers to date LIKE '2016%' */ SELECT team_api_id, MAX(chanceCreationPassing) as highest_passing FROM Team_Attributes WHERE date LIKE '2016%' GROUP BY team_api_id ORDER BY highest_passing DESC LIMIT 1
SELECT Player.player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY Player_Attributes.penalties DESC LIMIT 10 /* Answer the following: List the names of the top 5 teams with the highest build up play speed. team's name refers to team_long_name; highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT Team.team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY Team_Attributes.buildUpPlaySpeed DESC LIMIT 5 /* Answer the following: Name the country with the most matches played. most matches played refers to MAX(count(Match)); */ SELECT Country.name FROM Match INNER JOIN Country ON Match.country_id = Country.id GROUP BY Country.name ORDER BY COUNT(Match.id) DESC LIMIT 1 /* Answer the following: Indicate the season with the highest number of goals scored by the home team. highest number of goals scored by the home team refers to MAX(home_team_goal); */ SELECT Match.season FROM Match GROUP BY Match.season ORDER BY SUM(Match.home_team_goal) DESC LIMIT 1 /* Answer the following: Name the player with the highest overall rating. highest overall rating refers to MAX(overall_rating); */ SELECT Player.player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1 /* Answer the following: Indicate the team with the highest defence pressure. highest defence pressure refers to MAX(defencePressure); */ SELECT Team.team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY Team_Attributes.defencePressure DESC LIMIT 1 /* Answer the following: Name the league with the most teams. most teams refers to MAX(count(Team)); */ SELECT League.name FROM Team INNER JOIN League ON Team.league_id = League.id GROUP BY League.name ORDER BY COUNT(Team.id) DESC LIMIT 1 /* Answer the following: Indicate the player with the highest number of interceptions. highest number of interceptions refers to MAX(interceptions); */ SELECT Player.player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY Player_Attributes.interceptions DESC LIMIT 1 /* Answer the following: Name the country with the highest number of leagues. highest number of leagues refers to MAX(count(League)); */ SELECT Country.name FROM League INNER JOIN Country ON League.country_id = Country.id GROUP BY Country.name ORDER BY COUNT(League.id) DESC LIMIT 1 /* Answer the following: Indicate the team with the highest chance creation shooting. highest chance creation shooting refers to MAX(chanceCreationShooting); */ SELECT Team.team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY Team_Attributes.chanceCreationShooting DESC LIMIT 1
SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN League AS T3 ON T1.league_id = T3.id WHERE T3.name = 'Scotland Premier League' AND T1.season = '2009/2010' AND T1.away_team_goal > T1.home_team_goal GROUP BY T1.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Who is the player with the highest overall rating in 2010? highest overall rating refers to MAX(overall_rating); in 2010 refers to date LIKE '2010%'; player refers to player_api_id */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '2010%' ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed in 2015? highest build up play speed refers to MAX(buildUpPlaySpeed); in 2015 refers to date LIKE '2015%'; team refers to team_api_id */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.date LIKE '2015%' ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to MAX(COUNT(league_id)); country refers to country_id */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T1.country_id ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which player scored the most goals in home games during the 2011 season? most goals in home games refers to MAX(home_team_goal); during the 2011 season refers to season = '2011/2012'; player refers to home_player_1, home_player_2, ..., home_player_11 */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id WHERE T1.season = '2011/2012' GROUP BY T2.player_api_id ORDER BY SUM(T1.home_team_goal) DESC LIMIT 1
SELECT team_long_name, buildUpPlaySpeed FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY buildUpPlaySpeed DESC LIMIT 4 /* Answer the following: What is the name of the player with the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT player_name FROM Player WHERE player_api_id = ( SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1 ) /* Answer the following: What is the name of the country with the most leagues? most leagues refers to COUNT(league_id); */ SELECT name FROM Country WHERE id = ( SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1 ) /* Answer the following: What is the name of the team with the highest home team goal? highest home team goal refers to MAX(home_team_goal); */ SELECT team_long_name FROM Team WHERE team_api_id = ( SELECT home_team_api_id FROM Match ORDER BY home_team_goal DESC LIMIT 1 ) /* Answer the following: What is the name of the player with the highest sprint speed? highest sprint speed refers to MAX(sprint_speed); */ SELECT player_name FROM Player WHERE player_api_id = ( SELECT player_api_id FROM Player_Attributes ORDER BY sprint_speed DESC LIMIT 1 )
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' AND T1.home_team_goal = T1.away_team_goal GROUP BY T1.league_id ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to MAX(COUNT(league_id)) */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T1.country_id ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which match had the most goals scored? most goals scored refers to MAX(home_team_goal + away_team_goal) */ SELECT T1.match_api_id FROM Match AS T1 ORDER BY (T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1
SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.birthday), T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND T2.date >= '2013-01-01 00:00:00' AND T2.date <= '2015-12-31 00:00:00'
SELECT League.name, COUNT(Match.league_id) as total_matches FROM Match JOIN League ON Match.league_id = League.id GROUP BY Match.league_id ORDER BY total_matches DESC LIMIT 1
SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00' /* Answer the following: What is the average overall rating of players who are right footed? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); players who are right footed refers to preferred_foot = 'right' */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE preferred_foot = 'right' /* Answer the following: What is the average number of goals scored by home teams? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)) */ SELECT AVG(home_team_goal) FROM Match /* Answer the following: What is the average build up play speed of teams? average build up play speed = DIVIDE(SUM(buildUpPlaySpeed), COUNT(id)) */ SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes /* Answer the following: What is the average height of players in each team? average height = DIVIDE(SUM(height), COUNT(id)); in each team refers to GROUP BY team_api_id */ SELECT team_api_id, AVG(height) FROM Player GROUP BY team_api_id /* Answer the following: What is the average number of goals scored by each team in home matches? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); in home matches refers to GROUP BY home_team_api_id */ SELECT home_team_api_id, AVG(home_team_goal) FROM Match GROUP BY home_team_api_id /* Answer the following: What is the average overall rating of players in each team? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); in each team refers to GROUP BY player_api_id */ SELECT player_api_id, AVG(overall_rating) FROM Player_Attributes GROUP BY player_api_id /* Answer the following: What is the average build up play speed of teams in each league? average build up play speed = DIVIDE(SUM(buildUpPlaySpeed), COUNT(id)); in each league refers to GROUP BY league_id */ SELECT league_id, AVG(buildUpPlaySpeed) FROM Team_Attributes GROUP BY league_id /* Answer the following: What is the average height of players in each country? average height = DIVIDE(SUM(height), COUNT(id)); in each country refers to GROUP BY country_id */ SELECT country_id, AVG(height) FROM Player GROUP BY country_id /* Answer the following: What is the average number of goals scored by each team in away matches? average number of goals = DIVIDE(SUM(away_team_goal), COUNT(id)); in away matches refers to GROUP BY away_team_api_id */ SELECT away_team_api_id, AVG(away_team_goal) FROM Match GROUP BY away_team_api_id
SELECT player_api_id FROM Player_Attributes WHERE substr(date,1,4) = '2010' ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: List the team's api id which had the highest build up play speed in 2015. highest build up play speed refers to MAX(buildUpPlaySpeed); in 2015 refers to substr(date,1,4) = '2015'; */ SELECT team_api_id FROM Team_Attributes WHERE substr(date,1,4) = '2015' ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: List the match's api id which had the most goals in 2011. most goals refers to MAX(home_team_goal + away_team_goal); in 2011 refers to substr(date,1,4) = '2011'; */ SELECT match_api_id FROM Match WHERE substr(date,1,4) = '2011' ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: List the league's id which had the most matches in 2012. most matches refers to MAX(COUNT(match_api_id)); in 2012 refers to substr(date,1,4) = '2012'; */ SELECT league_id FROM Match WHERE substr(date,1,4) = '2012' GROUP BY league_id ORDER BY COUNT(match_api_id) DESC LIMIT 1 /* Answer the following: List the country's id which had the most leagues in 2013. most leagues refers to MAX(COUNT(league_id)); in 2013 refers to substr(date,1,4) = '2013'; */ SELECT country_id FROM League WHERE substr(date,1,4) = '2013' GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: List the player's api id who had the highest potential in 2014. highest potential refers to MAX(potential); in 2014 refers to substr(date,1,4) = '2014'; */ SELECT player_api_id FROM Player_Attributes WHERE substr(date,1,4) = '2014' ORDER BY potential DESC LIMIT 1 /* Answer the following: List the team's api id which had the highest chance creation passing in 2015. highest chance creation passing refers to MAX(chanceCreationPassing); in 2015 refers to substr(date,1,4) = '2015'; */ SELECT team_api_id FROM Team_Attributes WHERE substr(date,1,4) = '2015' ORDER BY chanceCreationPassing DESC LIMIT 1 /* Answer the following: List the match's api id which had the most fouls committed in 2011. most fouls committed refers to MAX(foulcommit); in 2011 refers to substr(date,1,4) = '2011'; */ SELECT match_api_id FROM Match WHERE substr(date,1,4) = '2011' ORDER BY foulcommit DESC LIMIT 1 /* Answer the following: List the league's id which had the most teams in 2012. most teams refers to MAX(COUNT(team_api_id)); in 2012 refers to substr(date,1,4) = '2012'; */ SELECT league_id FROM Match WHERE substr(date,1,4) = '2012' GROUP BY league_id ORDER BY COUNT(DISTINCT home_team_api_id, away_team_api_id) DESC LIMIT 1 /* Answer the following: List the country's id which had the most players in 2013. most players refers to MAX(COUNT(player_api_id)); in 2013 refers to substr(date,1,4) = '2013'; */ SELECT country_id FROM Player WHERE substr(date,1,4) = '2013' GROUP BY country_id ORDER BY COUNT(player_api_id) DESC LIMIT 1
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59 /* Answer the following: List the player names who have an overall rating of 90. player names refers to player_name; overall rating of 90 refers to overall_rating = 90 */ SELECT P.player_name FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = 90 /* Answer the following: Provide the match_api_id of matches where the home team scored more than 5 goals. matches where the home team scored more than 5 goals refers to home_team_goal > 5; */ SELECT match_api_id FROM Match WHERE home_team_goal > 5 /* Answer the following: List the country names where the league name is 'Premier League'. country names refers to name; league name is 'Premier League' refers to name = 'Premier League' */ SELECT C.name FROM Country AS C JOIN League AS L ON C.id = L.country_id WHERE L.name = 'Premier League' /* Answer the following: Provide the team_api_id of teams where the team long name is 'Manchester United'. team long name is 'Manchester United' refers to team_long_name = 'Manchester United'; */ SELECT team_api_id FROM Team WHERE team_long_name = 'Manchester United'
SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE strftime('%Y', T1.date) = '2012' AND T1.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE buildUpPlayPassing IS NOT NULL )
SELECT CAST(SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(player_fifa_api_id) FROM Player WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'
SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goals FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5
SELECT AVG(T1.long_shots) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Ahmed Samir Farag'
SELECT T1.player_name, AVG(T2.heading_accuracy) AS avg_heading_accuracy FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 GROUP BY T1.player_api_id ORDER BY avg_heading_accuracy DESC LIMIT 10 /* Answer the following: What is the average overall rating of the players from the team with the highest build up play speed? average overall rating = DIVIDE(SUM(overall_rating), COUNT(player_fifa_api_id)); highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT AVG(T3.overall_rating) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Player_Attributes AS T3 ON T2.team_api_id = T3.player_api_id WHERE T1.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) /* Answer the following: Which country has the most number of leagues? most number of leagues refers to MAX(COUNT(league_id)) */ SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id GROUP BY T1.id ORDER BY COUNT(T2.id) DESC LIMIT 1 /* Answer the following: What is the average number of goals scored by the home team in matches where the away team scored more than 2 goals? average number of goals scored by the home team = DIVIDE(SUM(home_team_goal), COUNT(match_api_id)); away team scored more than 2 goals refers to away_team_goal > 2 */ SELECT AVG(home_team_goal) FROM Match WHERE away_team_goal > 2 /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating) */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date >= '2014-01-01 00:00:00' AND T1.date <= '2014-12-31 23:59:59' AND T1.chanceCreationPassing < ( SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date >= '2014-01-01 00:00:00' AND date <= '2014-12-31 23:59:59' ) ORDER BY T1.chanceCreationPassing DESC /* Answer the following: List the names of the players who have a higher overall rating than the average overall rating of all players. names of the players refers to player_name; higher overall rating than the average overall rating of all players refers to overall_rating > avg(overall_rating) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > ( SELECT AVG(overall_rating) FROM Player_Attributes ) /* Answer the following: List the names of the countries where the total home team goals are greater than the total away team goals. names of the countries refers to name; total home team goals are greater than the total away team goals refers to sum(home_team_goal) > sum(away_team_goal) */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T2.name HAVING SUM(T1.home_team_goal) > SUM(T1.away_team_goal) /* Answer the following: List the names of the teams who have a higher build up play speed than the average build up play speed of all teams. names of the teams refers to team_long_name; higher build up play speed than the average build up play speed of all teams refers to buildUpPlaySpeed > avg(buildUpPlaySpeed) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeed > ( SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes ) /* Answer the following: List the names of the players who have a higher potential than the average potential of all players. names of the players refers to player_name; higher potential than the average potential of all players refers to potential > avg(potential) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.potential > ( SELECT AVG(potential) FROM Player_Attributes ) /* Answer the following: List the names of the teams who have a higher defence pressure than the average defence pressure of all teams. names of the teams refers to team_long_name; higher defence pressure than the average defence pressure of all teams refers to defencePressure > avg(defencePressure) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.defencePressure > ( SELECT AVG(defencePressure) FROM Team_Attributes )
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)
SELECT T1.team_short_name FROM Team AS T1 WHERE T1.team_long_name = 'Queens Park Rangers'
SELECT player_name FROM Player WHERE SUBSTR(birthday,1,4) = '1970' AND SUBSTR(birthday,6,2) = '10';
SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Franco Zennaro') /* Answer the following: How many goals did the home team score in the match with the match_api_id of 198990? */ SELECT `home_team_goal` FROM `Match` WHERE `match_api_id` = 198990 /* Answer the following: What is the name of the team with the team_api_id of 9987? */ SELECT `team_long_name` FROM `Team` WHERE `team_api_id` = 9987 /* Answer the following: What is the build up play speed of the team with the team_api_id of 9987? */ SELECT `buildUpPlaySpeed` FROM `Team_Attributes` WHERE `team_api_id` = 9987 /* Answer the following: What is the name of the country with the country_id of 1? */ SELECT `name` FROM `Country` WHERE `id` = 1 /* Answer the following: What is the name of the league with the league_id of 1? */ SELECT `name` FROM `League` WHERE `id` = 1 /* Answer the following: How many matches were played in the season of 2008/2009? */ SELECT COUNT(*) FROM `Match` WHERE `season` = '2008/2009'
SELECT buildUpPlayPositioningClass FROM Team_Attributes WHERE team_api_id = ( SELECT team_api_id FROM Team WHERE team_long_name = 'ADO Den Haag' )
SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francois Affolter') AND date = '2014-09-18 00:00:00' /* Answer the following: What is the average overall rating of the team 'FC Barcelona' on 2015/5/5? 'FC Barcelona' refers to team_long_name = 'FC Barcelona'; on 2015/5/5 refers to date = '2015-05-05 00:00:00'; overall rating refers to overall_rating; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT home_player_1 FROM Match WHERE home_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'FC Barcelona') AND date = '2015-05-05 00:00:00') /* Answer the following: What is the build up play speed of the team 'FC Barcelona' on 2015/5/5? 'FC Barcelona' refers to team_long_name = 'FC Barcelona'; on 2015/5/5 refers to date = '2015-05-05 00:00:00'; build up play speed refers to buildUpPlaySpeed; */ SELECT buildUpPlaySpeed FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'FC Barcelona') AND date = '2015-05-05 00:00:00' /* Answer the following: What is the name of the league in which the match with the match_api_id 198992 took place? match_api_id 198992 refers to match_api_id = 198992; name of the league refers to name; */ SELECT name FROM League WHERE id = (SELECT league_id FROM Match WHERE match_api_id = 198992) /* Answer the following: What is the name of the country in which the match with the match_api_id 198992 took place? match_api_id 198992 refers to match_api_id = 198992; name of the country refers to name; */ SELECT name FROM Country WHERE id = (SELECT country_id FROM Match WHERE match_api_id = 198992)
SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011'
SELECT COUNT(Match.id) FROM Match INNER JOIN League ON Match.league_id = League.id WHERE Match.season = '2015/2016' AND League.name = 'Scotland Premier League'
SELECT T1.preferred_foot FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.birthday DESC LIMIT 1 /* Answer the following: What is the name of the youngest team? youngest team refers to latest date in Team_Attributes; name of team refers to team_long_name */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.date DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who scored the most goals in a match? youngest player refers to latest birthday; most goals refers to max(home_team_goal or away_team_goal); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_6 OR T1.player_api_id = T2.home_player_7 OR T1.player_api_id = T2.home_player_8 OR T1.player_api_id = T2.home_player_9 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 OR T1.player_api_id = T2.away_player_1 OR T1.player_api_id = T2.away_player_2 OR T1.player_api_id = T2.away_player_3 OR T1.player_api_id = T2.away_player_4 OR T1.player_api_id = T2.away_player_5 OR T1.player_api_id = T2.away_player_6 OR T1.player_api_id = T2.away_player_7 OR T1.player_api_id = T2.away_player_8 OR T1.player_api_id = T2.away_player_9 OR T1.player_api_id = T2.away_player_10 OR T1.player_api_id = T2.away_player_11 ORDER BY T1.birthday DESC, (T2.home_team_goal + T2.away_team_goal) DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest overall rating? youngest player refers to latest birthday; highest overall rating refers to max(overall_rating); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.overall_rating DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest potential? youngest player refers to latest birthday; highest potential refers to max(potential); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.potential DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest free kick accuracy? youngest player refers to latest birthday; highest free kick accuracy refers to max(free_kick_accuracy); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.free_kick_accuracy DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest ball control? youngest player refers to latest birthday; highest ball control refers to max(ball_control); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.ball_control DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest sprint speed? youngest player refers to latest birthday; highest sprint speed refers to max(sprint_speed); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.sprint_speed DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest stamina? youngest player refers to latest birthday; highest stamina refers to max(stamina); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.stamina DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest strength? youngest player refers to latest birthday; highest strength refers to max(strength); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.strength DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest aggression? youngest player refers to latest birthday; highest aggression refers to max(aggression); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.aggression DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest interceptions? youngest player refers to latest birthday; highest interceptions refers to max(interceptions); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.interceptions DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest positioning? youngest player refers to latest birthday; highest positioning refers to max(positioning); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.positioning DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest vision? youngest player refers to latest birthday; highest vision refers to max(vision); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.vision DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest penalties? youngest player refers to latest birthday; highest penalties refers to max(penalties); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.penalties DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest marking? youngest player refers to latest birthday; highest marking refers to max(marking); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.marking DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest standing tackle? youngest player refers to latest birthday; highest standing tackle refers to max(standing_tackle); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.standing_tackle DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest sliding tackle? youngest player refers to latest birthday; highest sliding tackle refers to max(sliding_tackle); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.sliding_tackle DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest gk diving? youngest player refers to latest birthday; highest gk diving refers to max(gk_diving); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.gk_diving DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest gk handling? youngest player refers to latest birthday; highest gk handling refers to max(gk_handling); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.gk_handling DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest gk kicking? youngest player refers to latest birthday; highest gk kicking refers to max(gk_kicking); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.gk_kicking DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest gk positioning? youngest player refers to latest birthday; highest gk positioning refers to max(gk_positioning); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.gk_positioning DESC LIMIT 1 /* Answer the following: What is the name of the youngest player who has the highest gk reflexes? youngest player refers to latest birthday; highest gk reflexes refers to max(gk_reflexes); name of player refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC, T2.gk_reflexes DESC LIMIT 1
SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE potential = ( SELECT MAX(potential) FROM Player_Attributes ) )
SELECT COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight < 130 AND T2.preferred_foot = 'left'
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Risky' /* Answer the following: List the players who have a potential of 90 and above. potential refers to potential; potential >= 90; */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential >= 90 /* Answer the following: List the matches that were played in the season 2008/2009 and had a home team goal of more than 5. season refers to season; season = '2008/2009'; home team goal refers to home_team_goal; home_team_goal > 5; */ SELECT * FROM Match WHERE season = '2008/2009' AND home_team_goal > 5 /* Answer the following: List the countries that have a league with the name 'Premier League'. league name refers to name; name = 'Premier League'; country name refers to name; */ SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Premier League' /* Answer the following: List the players who are taller than 200 cm. height refers to height; height > 200; */ SELECT player_name FROM Player WHERE height > 200
SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'David Wilson' )
SELECT T1.birthday FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1 /* Answer the following: What is the name of the team that has the highest build up play speed? team that has the highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: What is the name of the country that has the most number of leagues? country that has the most number of leagues refers to MAX(count(league_id)); */ SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY COUNT(T2.id) DESC LIMIT 1 /* Answer the following: What is the name of the player who has the highest number of goals in home games? player who has the highest number of goals in home games refers to MAX(home_team_goal); */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_6 OR T1.player_api_id = T2.home_player_7 OR T1.player_api_id = T2.home_player_8 OR T1.player_api_id = T2.home_player_9 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 GROUP BY T1.player_name ORDER BY SUM(T2.home_team_goal) DESC LIMIT 1 /* Answer the following: What is the name of the player who has the highest number of goals in away games? player who has the highest number of goals in away games refers to MAX(away_team_goal); */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.away_player_1 OR T1.player_api_id = T2.away_player_2 OR T1.player_api_id = T2.away_player_3 OR T1.player_api_id = T2.away_player_4 OR T1.player_api_id = T2.away_player_5 OR T1.player_api_id = T2.away_player_6 OR T1.player_api_id = T2.away_player_7 OR T1.player_api_id = T2.away_player_8 OR T1.player_api_id = T2.away_player_9 OR T1.player_api_id = T2.away_player_10 OR T1.player_api_id = T2.away_player_11 GROUP BY T1.player_name ORDER BY SUM(T2.away_team_goal) DESC LIMIT 1 /* Answer the following: What is the name of the player who has the highest number of goals in both home and away games? player who has the highest number of goals in both home and away games refers to MAX(home_team_goal + away_team_goal); */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_6 OR T1.player_api_id = T2.home_player_7 OR T1.player_api_id = T2.home_player_8 OR T1.player_api_id = T2.home_player_9 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 OR T1.player_api_id = T2.away_player_1 OR T1.player_api_id = T2.away_player_2 OR T1.player_api_id = T2.away_player_3 OR T1.player_api_id = T2.away_player_4 OR T1.player_api_id = T2.away_player_5 OR T1.player_api_id = T2.away_player_6 OR T1.player_api_id = T2.away_player_7 OR T1.player_api_id = T2.away_player_8 OR T1.player_api_id = T2.away_player_9 OR T1.player_api_id = T2.away_player_10 OR T1.player_api_id = T2.away_player_11 GROUP BY T1.player_name ORDER BY SUM(T2.home_team_goal + T2.away_team_goal) DESC LIMIT 1
SELECT name FROM League WHERE country_id = ( SELECT id FROM Country WHERE name = 'Netherlands' )
SELECT AVG(home_team_goal) FROM Match AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Poland' AND M.season = '2010/2011'
SELECT T1.player_name, AVG(T2.finishing) AS avg_finishing FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height IN ( SELECT MAX(height) FROM Player UNION SELECT MIN(height) FROM Player ) GROUP BY T1.player_name ORDER BY avg_finishing DESC LIMIT 1 /* Answer the following: Which team has the highest average build up play speed in the 2015 season? build up play speed refers to buildUpPlaySpeed; highest average build up play speed = MAX(AVG(buildUpPlaySpeed)); 2015 season refers to date LIKE '2015%'; */ SELECT T1.team_long_name, AVG(T2.buildUpPlaySpeed) AS avg_speed FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.date LIKE '2015%' GROUP BY T1.team_long_name ORDER BY avg_speed DESC LIMIT 1 /* Answer the following: Which country has the most number of leagues? most number of leagues refers to MAX(COUNT(league_id)); */ SELECT T1.name, COUNT(T2.id) AS num_leagues FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY num_leagues DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating in the 2016 season? overall rating refers to overall_rating; highest overall rating = MAX(overall_rating); 2016 season refers to date LIKE '2016%'; */ SELECT T1.player_name, MAX(T2.overall_rating) AS max_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.date LIKE '2016%' GROUP BY T1.player_name ORDER BY max_rating DESC LIMIT 1 /* Answer the following: Which team scored the most goals in the 2014 season? most goals refers to MAX(home_team_goal + away_team_goal); 2014 season refers to season = '2014/2015'; */ SELECT T1.team_long_name, MAX(T2.home_team_goal + T2.away_team_goal) AS total_goals FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id IN (T2.home_team_api_id, T2.away_team_api_id) WHERE T2.season = '2014/2015' GROUP BY T1.team_long_name ORDER BY total_goals DESC LIMIT 1
SELECT player_name FROM Player WHERE height > 180
SELECT COUNT(player_api_id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170 /* Answer the following: List the team names that have a speed class of 'Fast'. team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast'; */ SELECT team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast' /* Answer the following: How many matches were played in the season 2015/2016? matches refers to match_api_id; season 2015/2016 refers to season = '2015/2016'; */ SELECT COUNT(match_api_id) FROM Match WHERE season = '2015/2016' /* Answer the following: How many players are taller than 180 cm and weigh less than 170 lbs? players refers to player_api_id; taller than 180 cm refers to height > 180; weigh less than 170 lbs refers to weight < 170; */ SELECT COUNT(player_api_id) FROM Player WHERE height > 180 AND weight < 170 /* Answer the following: List the names of the players who have an overall rating greater than 85. player's name refers to player_name; overall rating greater than 85 refers to overall_rating > 85; */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > 85 /* Answer the following: How many teams have a defence pressure class of 'High'? teams refers to team_api_id; defence pressure class of 'High' refers to defencePressureClass = 'High'; */ SELECT COUNT(team_api_id) FROM Team_Attributes WHERE defencePressureClass = 'High'
SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T2.date) BETWEEN '2008' AND '2010' AND T2.overall_rating > 80 /* Answer the following: Which teams had a buildUpPlaySpeed of over 70 in 2015? Please list team names. buildUpPlaySpeed > 70; in 2015 refers to strftime('%Y', date) = '2015'; */ SELECT DISTINCT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE strftime('%Y', T2.date) = '2015' AND T2.buildUpPlaySpeed > 70 /* Answer the following: How many matches were played in the 'Spain LIGA BBVA' league in the 2014/2015 season? 'Spain LIGA BBVA' league refers to League.name = 'Spain LIGA BBVA'; in the 2014/2015 season refers to Match.season = '2014/2015'; */ SELECT COUNT(*) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Spain LIGA BBVA' AND T1.season = '2014/2015' /* Answer the following: Which players scored more than 10 goals in the 2012/2013 season? Please list player names. more than 10 goals refers to SUM(home_team_goal + away_team_goal) > 10; in the 2012/2013 season refers to Match.season = '2012/2013'; */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id IN (T2.home_player_1, T2.home_player_2, T2.home_player_3, T2.home_player_4, T2.home_player_5, T2.home_player_6, T2.home_player_7, T2.home_player_8, T2.home_player_9, T2.home_player_10, T2.home_player_11, T2.away_player_1, T2.away_player_2, T2.away_player_3, T2.away_player_4, T2.away_player_5, T2.away_player_6, T2.away_player_7, T2.away_player_8, T2.away_player_9, T2.away_player_10, T2.away_player_11) WHERE T2.season = '2012/2013' GROUP BY T1.player_name HAVING SUM(T2.home_team_goal + T2.away_team_goal) > 10 /* Answer the following: Which countries had more than 10 matches in the 2014/2015 season? Please list country names. more than 10 matches refers to COUNT(Match.id) > 10; in the 2014/2015 season refers to Match.season = '2014/2015'; */ SELECT T1.name FROM Country AS T1 INNER JOIN Match AS T2 ON T1.id = T2.country_id WHERE T2.season = '2014/2015' GROUP BY T1.name HAVING COUNT(T2.id) > 10
SELECT potential FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran' )
SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE preferred_foot = 'left'
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast'
SELECT T1.buildUpPlayPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_short_name = 'CLB'
SELECT T2.team_short_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayPassing > 70 /* Answer the following: How many matches were played in the season 2015/2016? season 2015/2016 refers to season = '2015/2016' */ SELECT COUNT(*) FROM Match WHERE season = '2015/2016' /* Answer the following: Which players have overall rating more than 85? Please list their names. overall rating refers to overall_rating; overall_rating > 85; names refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > 85 /* Answer the following: Which countries have leagues with more than 10 teams? Please list their names. more than 10 teams refers to COUNT(team_api_id) > 10; names refers to name; */ SELECT T3.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.id GROUP BY T2.id HAVING COUNT(DISTINCT T1.home_team_api_id) > 10 /* Answer the following: Which players have played for more than 3 teams? Please list their names. more than 3 teams refers to COUNT(DISTINCT team_api_id) > 3; names refers to player_name; */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id OR T1.away_player_1 = T2.player_api_id OR T1.away_player_2 = T2.player_api_id OR T1.away_player_3 = T2.player_api_id OR T1.away_player_4 = T2.player_api_id OR T1.away_player_5 = T2.player_api_id OR T1.away_player_6 = T2.player_api_id OR T1.away_player_7 = T2.player_api_id OR T1.away_player_8 = T2.player_api_id OR T1.away_player_9 = T2.player_api_id OR T1.away_player_10 = T2.player_api_id OR T1.away_player_11 = T2.player_api_id GROUP BY T2.player_api_id HAVING COUNT(DISTINCT T1.home_team_api_id, T1.away_team_api_id) > 3
SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE STRFTIME('%Y', T2.date) BETWEEN '2010' AND '2015' AND T1.height > 170 /* Answer the following: How many matches were played in the league named 'Belgium Jupiler League' in the season 2014/2015? league named 'Belgium Jupiler League' refers to name = 'Belgium Jupiler League'; in the season 2014/2015 refers to season = '2014/2015' */ SELECT COUNT(T2.id) FROM League AS T1 INNER JOIN Match AS T2 ON T1.id = T2.league_id WHERE T1.name = 'Belgium Jupiler League' AND T2.season = '2014/2015' /* Answer the following: What is the average build up play speed of the team named 'FC Barcelona' in 2015? team named 'FC Barcelona' refers to team_long_name = 'FC Barcelona'; in 2015 refers to strftime('%Y', date) = '2015'; average build up play speed refers to AVG(buildUpPlaySpeed) */ SELECT AVG(T2.buildUpPlaySpeed) FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE STRFTIME('%Y', T2.date) = '2015' AND T1.team_long_name = 'FC Barcelona' /* Answer the following: How many goals were scored by the home team named 'FC Barcelona' in the season 2014/2015? home team named 'FC Barcelona' refers to home_team_api_id where team_long_name = 'FC Barcelona'; in the season 2014/2015 refers to season = '2014/2015'; goals scored by the home team refers to SUM(home_team_goal) */ SELECT SUM(T2.home_team_goal) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id WHERE T2.season = '2014/2015' AND T1.team_long_name = 'FC Barcelona' /* Answer the following: How many goals were scored by the away team named 'FC Barcelona' in the season 2014/2015? away team named 'FC Barcelona' refers to away_team_api_id where team_long_name = 'FC Barcelona'; in the season 2014/2015 refers to season = '2014/2015'; goals scored by the away team refers to SUM(away_team_goal) */ SELECT SUM(T2.away_team_goal) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id WHERE T2.season = '2014/2015' AND T1.team_long_name = 'FC Barcelona'
SELECT player_name FROM Player ORDER BY height ASC LIMIT 1 /* Answer the following: Which team has the slowest build up play speed? slowest build up play speed refers to MIN(buildUpPlaySpeed); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY buildUpPlaySpeed ASC LIMIT 1 /* Answer the following: Which match had the least home team goals? least home team goals refers to MIN(home_team_goal); */ SELECT match_api_id FROM Match ORDER BY home_team_goal ASC LIMIT 1 /* Answer the following: Which player has the lowest overall rating? lowest overall rating refers to MIN(overall_rating); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating ASC LIMIT 1 /* Answer the following: Which country has the least number of leagues? least number of leagues refers to COUNT(league_id); */ SELECT name FROM Country LEFT JOIN League ON Country.id = League.country_id GROUP BY name ORDER BY COUNT(league_id) ASC LIMIT 1 /* Answer the following: Which team has the least aggressive defence? least aggressive defence refers to MIN(defenceAggression); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY defenceAggression ASC LIMIT 1 /* Answer the following: Which player has the lowest potential? lowest potential refers to MIN(potential); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY potential ASC LIMIT 1 /* Answer the following: Which match had the least away team goals? least away team goals refers to MIN(away_team_goal); */ SELECT match_api_id FROM Match ORDER BY away_team_goal ASC LIMIT 1 /* Answer the following: Which player has the lowest free kick accuracy? lowest free kick accuracy refers to MIN(free_kick_accuracy); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY free_kick_accuracy ASC LIMIT 1 /* Answer the following: Which team has the slowest build up play passing? slowest build up play passing refers to MIN(buildUpPlayPassing); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY buildUpPlayPassing ASC LIMIT 1
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A' /* Answer the following: What is the overall rating of the player named 'Lionel Messi'? Lionel Messi refers to Player.player_name = 'Lionel Messi'; overall rating refers to Player_Attributes.overall_rating; */ SELECT T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Lionel Messi' /* Answer the following: What is the team name of the team with the team_api_id 9987? team_api_id 9987 refers to Team.team_api_id = 9987; team name refers to Team.team_long_name; */ SELECT T1.team_long_name FROM Team AS T1 WHERE T1.team_api_id = 9987 /* Answer the following: What is the build up play speed of the team with the team_api_id 9987? team_api_id 9987 refers to Team_Attributes.team_api_id = 9987; build up play speed refers to Team_Attributes.buildUpPlaySpeed; */ SELECT T1.buildUpPlaySpeed FROM Team_Attributes AS T1 WHERE T1.team_api_id = 9987 /* Answer the following: Who are the players of the home team in the match with the match_api_id 1989924? match_api_id 1989924 refers to Match.match_api_id = 1989924; players of the home team refers to Match.home_player_1 to Match.home_player_11; */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id WHERE T1.match_api_id = 1989924 /* Answer the following: Who scored the goal in the match with the match_api_id 1989924? match_api_id 1989924 refers to Match.match_api_id = 1989924; scored the goal refers to Match.goal; */ SELECT T1.goal FROM Match AS T1 WHERE T1.match_api_id = 1989924 /* Answer the following: What is the possession of the home team in the match with the match_api_id 1989924? match_api_id 1989924 refers to Match.match_api_id = 1989924; possession of the home team refers to Match.possession; */ SELECT T1.possession FROM Match AS T1 WHERE T1.match_api_id = 1989924
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran' )
SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', T1.date) BETWEEN '2008-08' AND '2008-10'
SELECT T2.team_short_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.home_team_goal = 10 /* Answer the following: List all the player names who have an overall rating of 90. player names refers to player_name; overall rating refers to overall_rating; overall_rating = 90; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = 90 /* Answer the following: List all the countries where the league name is 'Premier League'. countries refers to name in Country table; league name is 'Premier League' refers to name in League table; */ SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Premier League' /* Answer the following: List all the team long names that have a build up play speed of 70. team long names refers to team_long_name; build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed = 70; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeed = 70 /* Answer the following: List all the player names who were born after 1990. player names refers to player_name; born after 1990 refers to birthday > '1990-12-31'; */ SELECT player_name FROM Player WHERE birthday > '1990-12-31'
SELECT player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE potential = 61 ORDER BY balance DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: List the match with the highest total goals in the 2015 season. highest total goals refers to MAX(home_team_goal + away_team_goal); 2015 season refers to season = '2015/2016'; */ SELECT match_api_id FROM Match WHERE season = '2015/2016' ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: What is the name of the country with the most leagues? most leagues refers to COUNT(league_id); */ SELECT name FROM Country INNER JOIN League ON Country.id = League.country_id GROUP BY Country.id ORDER BY COUNT(League.id) DESC LIMIT 1 /* Answer the following: What is the name of the player with the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest defence pressure? highest defence pressure refers to MAX(defencePressure); */ SELECT team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY defencePressure DESC LIMIT 1 /* Answer the following: What is the name of the player with the highest shot power? highest shot power refers to MAX(shot_power); */ SELECT player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY shot_power DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest build up play passing? highest build up play passing refers to MAX(buildUpPlayPassing); */ SELECT team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY buildUpPlayPassing DESC LIMIT 1 /* Answer the following: What is the name of the player with the highest free kick accuracy? highest free kick accuracy refers to MAX(free_kick_accuracy); */ SELECT player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY free_kick_accuracy DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest chance creation passing? highest chance creation passing refers to MAX(chanceCreationPassing); */ SELECT team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY chanceCreationPassing DESC LIMIT 1
SELECT (SELECT AVG(ball_control) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo')) - (SELECT AVG(ball_control) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Appindangoye')) AS difference FROM Player_Attributes /* Answer the following: What is the average overall rating of players in the league named 'Belgium Jupiler League'? AVG(overall_rating) where league_name = 'Belgium Jupiler League'; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT home_player_1 FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League')) /* Answer the following: What is the average height of players in the team named 'FC Barcelona'? AVG(height) where team_name = 'FC Barcelona'; */ SELECT AVG(height) FROM Player WHERE player_api_id IN (SELECT home_player_1 FROM Match WHERE home_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'FC Barcelona')) /* Answer the following: What is the average buildUpPlaySpeed of teams in the country named 'Spain'? AVG(buildUpPlaySpeed) where country_name = 'Spain'; */ SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_api_id IN (SELECT team_api_id FROM Team WHERE id IN (SELECT id FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Spain'))) /* Answer the following: What is the average home team goal in the season '2008/2009'? AVG(home_team_goal) where season = '2008/2009'; */ SELECT AVG(home_team_goal) FROM Match WHERE season = '2008/2009'
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'
SELECT player_name FROM Player WHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada' ORDER BY birthday ASC LIMIT 1 /* Answer the following: Who is the oldest player in the league? oldest player refers to oldest birthday; */ SELECT player_name FROM Player ORDER BY birthday ASC LIMIT 1 /* Answer the following: How old was Aaron Lennon when he first played in a match? age when first played refers to Subtract(match date, birthday); first match refers to earliest date in Match table */ SELECT strftime('%Y', T1.date) - strftime('%Y', T2.birthday) FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id WHERE T2.player_name = 'Aaron Lennon' ORDER BY T1.date ASC LIMIT 1 /* Answer the following: Who is the oldest among all the players and teams? oldest refers to oldest birthday in Player table and oldest date in Team_Attributes table */ SELECT CASE WHEN (SELECT birthday FROM Player ORDER BY birthday ASC LIMIT 1) < (SELECT date FROM Team_Attributes ORDER BY date ASC LIMIT 1) THEN (SELECT player_name FROM Player ORDER BY birthday ASC LIMIT 1) ELSE (SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY date ASC LIMIT 1)) END /* Answer the following: When Aaron Lennon played in the 2014 season, how old was he? how old was he refers to age; 2014 season refers to season = '2014/2015'; */ SELECT strftime('%Y', T1.date) - strftime('%Y', T2.birthday) FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id WHERE T2.player_name = 'Aaron Lennon' AND T1.season = '2014/2015' ORDER BY T1.date ASC LIMIT 1 /* Answer the following: Among the elderlies, state the name of the player who played in team YIFAT? elder refers to age > 35; team YIFAT refers to team_long_name = 'YIFAT' */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 INNER JOIN Team AS T3 ON T2.home_team_api_id = T3.team_api_id WHERE strftime('%Y', 'now') - strftime('%Y', T1.birthday) > 35 AND T3.team_long_name = 'YIFAT' /* Answer the following: How many players are older than Aaron Lennon? older than Aaron Lennon refers to birthday < '1987-04-16' */ SELECT COUNT(*) FROM Player WHERE birthday < '1987-04-16'
SELECT player_name FROM Player ORDER BY height DESC LIMIT 1 /* Answer the following: Which team has the highest buildUpPlaySpeed? highest buildUpPlaySpeed refers to MAX(buildUpPlaySpeed); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which match had the most goals? most goals refers to MAX(home_team_goal + away_team_goal); */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to COUNT(league_id); */ SELECT name FROM Country INNER JOIN League ON Country.id = League.country_id GROUP BY name ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: Which player has the highest overall_rating? highest overall_rating refers to MAX(overall_rating); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest chanceCreationShooting? highest chanceCreationShooting refers to MAX(chanceCreationShooting); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY chanceCreationShooting DESC LIMIT 1 /* Answer the following: Which match had the highest betting odds for a home win? highest betting odds for a home win refers to MAX(B365H); */ SELECT match_api_id FROM Match ORDER BY B365H DESC LIMIT 1 /* Answer the following: Which player has the highest potential? highest potential refers to MAX(potential); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY potential DESC LIMIT 1 /* Answer the following: Which team has the highest buildUpPlayDribbling? highest buildUpPlayDribbling refers to MAX(buildUpPlayDribbling); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY buildUpPlayDribbling DESC LIMIT 1 /* Answer the following: Which match had the highest betting odds for a draw? highest betting odds for a draw refers to MAX(B365D); */ SELECT match_api_id FROM Match ORDER BY B365D DESC LIMIT 1
SELECT COUNT(T1.player_api_id) FROM Player_Attributes AS T1 WHERE T1.preferred_foot = 'left' AND T1.attacking_work_rate = 'low' /* Answer the following: How many matches were played in the 2014 season? 2014 season refers to season = '2014/2015' */ SELECT COUNT(T1.match_api_id) FROM Match AS T1 WHERE T1.season = '2014/2015' /* Answer the following: How many teams have a build up play speed of over 70? build up play speed of over 70 refers to buildUpPlaySpeed > 70 */ SELECT COUNT(DISTINCT T1.team_api_id) FROM Team_Attributes AS T1 WHERE T1.buildUpPlaySpeed > 70 /* Answer the following: How many players have a potential of over 90? potential of over 90 refers to potential > 90 */ SELECT COUNT(T1.player_api_id) FROM Player_Attributes AS T1 WHERE T1.potential > 90 /* Answer the following: How many matches resulted in a draw in the 2015 season? 2015 season refers to season = '2015/2016'; draw refers to home_team_goal = away_team_goal */ SELECT COUNT(T1.match_api_id) FROM Match AS T1 WHERE T1.season = '2015/2016' AND T1.home_team_goal = T1.away_team_goal /* Answer the following: How many players have a sprint speed of over 90? sprint speed of over 90 refers to sprint_speed > 90 */ SELECT COUNT(T1.player_api_id) FROM Player_Attributes AS T1 WHERE T1.sprint_speed > 90 /* Answer the following: How many teams have a defence pressure of over 70? defence pressure of over 70 refers to defencePressure > 70 */ SELECT COUNT(DISTINCT T1.team_api_id) FROM Team_Attributes AS T1 WHERE T1.defencePressure > 70 /* Answer the following: How many players have a shot power of over 90? shot power of over 90 refers to shot_power > 90 */ SELECT COUNT(T1.player_api_id) FROM Player_Attributes AS T1 WHERE T1.shot_power > 90 /* Answer the following: How many matches were played by the team with team_api_id 9987 in the 2015 season? 2015 season refers to season = '2015/2016'; team with team_api_id 9987 refers to home_team_api_id = 9987 or away_team_api_id = 9987 */ SELECT COUNT(T1.match_api_id) FROM Match AS T1 WHERE T1.season = '2015/2016' AND (T1.home_team_api_id = 9987 OR T1.away_team_api_id = 9987)
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League'
SELECT T1.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Germany'
SELECT player_name FROM Player WHERE player_api_id = ( SELECT player_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes ) LIMIT 1 )
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) < '1986' AND player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE defensive_work_rate = 'high' ) /* Answer the following: How many matches were played in the season 2008/2009? season 2008/2009 refers to season = '2008/2009' */ SELECT COUNT(*) FROM Match WHERE season = '2008/2009' /* Answer the following: How many teams have a build up play speed above 70? build up play speed above 70 refers to buildUpPlaySpeed > 70 */ SELECT COUNT(DISTINCT team_api_id) FROM Team_Attributes WHERE buildUpPlaySpeed > 70 /* Answer the following: How many players have a potential above 85 and preferred foot as left? potential above 85 refers to potential > 85; preferred foot as left refers to preferred_foot = 'left' */ SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE potential > 85 AND preferred_foot = 'left' /* Answer the following: How many matches were won by the home team with more than 2 goals? won by the home team with more than 2 goals refers to home_team_goal > away_team_goal AND home_team_goal > 2 */ SELECT COUNT(*) FROM Match WHERE home_team_goal > away_team_goal AND home_team_goal > 2 /* Answer the following: How many players have a shot power above 80 and a finishing above 85? shot power above 80 refers to shot_power > 80; finishing above 85 refers to finishing > 85 */ SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE shot_power > 80 AND finishing > 85 /* Answer the following: How many teams have a defence pressure above 60 and defence aggression above 65? defence pressure above 60 refers to defencePressure > 60; defence aggression above 65 refers to defenceAggression > 65 */ SELECT COUNT(DISTINCT team_api_id) FROM Team_Attributes WHERE defencePressure > 60 AND defenceAggression > 65 /* Answer the following: How many matches were played in the league 'Premier League'? league 'Premier League' refers to league_id IN ( SELECT id FROM League WHERE name = 'Premier League' ) */ SELECT COUNT(*) FROM Match WHERE league_id IN ( SELECT id FROM League WHERE name = 'Premier League' )
SELECT player_name, MAX(crossing) AS max_crossing FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')) GROUP BY player_api_id ORDER BY max_crossing DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_api_id, MAX(buildUpPlaySpeed) AS max_speed FROM Team_Attributes GROUP BY team_api_id ORDER BY max_speed DESC LIMIT 1 /* Answer the following: Which country has the most number of leagues? */ SELECT country_id, COUNT(DISTINCT league_id) AS num_leagues FROM League GROUP BY country_id ORDER BY num_leagues DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT player_api_id, MAX(overall_rating) AS max_rating FROM Player_Attributes GROUP BY player_api_id ORDER BY max_rating DESC LIMIT 1 /* Answer the following: Which match has the highest number of goals? highest number of goals refers to MAX(home_team_goal + away_team_goal); */ SELECT match_api_id, MAX(home_team_goal + away_team_goal) AS max_goals FROM Match GROUP BY match_api_id ORDER BY max_goals DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation shooting? highest chance creation shooting refers to MAX(chanceCreationShooting); */ SELECT team_api_id, MAX(chanceCreationShooting) AS max_shooting FROM Team_Attributes GROUP BY team_api_id ORDER BY max_shooting DESC LIMIT 1 /* Answer the following: Which player has the highest penalties? highest penalties refers to MAX(penalties); */ SELECT player_api_id, MAX(penalties) AS max_penalties FROM Player_Attributes GROUP BY player_api_id ORDER BY max_penalties DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure? highest defence pressure refers to MAX(defencePressure); */ SELECT team_api_id, MAX(defencePressure) AS max_pressure FROM Team_Attributes GROUP BY team_api_id ORDER BY max_pressure DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? highest free kick accuracy refers to MAX(free_kick_accuracy); */ SELECT player_api_id, MAX(free_kick_accuracy) AS max_accuracy FROM Player_Attributes GROUP BY player_api_id ORDER BY max_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest build up play passing? highest build up play passing refers to MAX(buildUpPlayPassing); */ SELECT team_api_id, MAX(buildUpPlayPassing) AS max_passing FROM Team_Attributes GROUP BY team_api_id ORDER BY max_passing DESC LIMIT 1
SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk' )
SELECT COUNT(DISTINCT T1.player_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.height > 180 AND T1.volleys > 70 /* Answer the following: How many matches were played in the league named 'Premier League'? league named 'Premier League' refers to name = 'Premier League' */ SELECT COUNT(*) FROM Match WHERE league_id IN ( SELECT id FROM League WHERE name = 'Premier League' ) /* Answer the following: How many teams have a build up play speed of over 70? build up play speed of over 70 refers to buildUpPlaySpeed > 70 */ SELECT COUNT(DISTINCT team_api_id) FROM Team_Attributes WHERE buildUpPlaySpeed > 70 /* Answer the following: How many players were born after 1990 and have a potential of over 80? born after 1990 refers to birthday > '1990-12-31'; potential of over 80 refers to potential > 80 */ SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE player_fifa_api_id IN ( SELECT player_fifa_api_id FROM Player WHERE birthday > '1990-12-31' ) AND potential > 80 /* Answer the following: How many matches resulted in a draw? draw refers to home_team_goal = away_team_goal */ SELECT COUNT(*) FROM Match WHERE home_team_goal = away_team_goal /* Answer the following: How many players have a shot power of over 85 and a long shots of over 85? shot power of over 85 refers to shot_power > 85; long shots of over 85 refers to long_shots > 85 */ SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE shot_power > 85 AND long_shots > 85 /* Answer the following: How many teams have a defence pressure of over 70 and a defence aggression of over 70? defence pressure of over 70 refers to defencePressure > 70; defence aggression of over 70 refers to defenceAggression > 70 */ SELECT COUNT(DISTINCT team_api_id) FROM Team_Attributes WHERE defencePressure > 70 AND defenceAggression > 70 /* Answer the following: How many matches were played in the country named 'England'? country named 'England' refers to name = 'England' */ SELECT COUNT(*) FROM Match WHERE country_id IN ( SELECT id FROM Country WHERE name = 'England' )
SELECT player_name FROM Player WHERE id IN (SELECT player_api_id FROM Player_Attributes WHERE volleys > 70 AND dribbling > 70)
SELECT COUNT(M.id) FROM Match AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Belgium' AND M.season = '2008/2009' /* Answer the following: How many goals were scored by the home team in the 2008/2009 season in Belgium? Belgium refers to Country.name = 'Belgium'; */ SELECT SUM(M.home_team_goal) FROM Match AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Belgium' AND M.season = '2008/2009' /* Answer the following: How many goals were scored by the away team in the 2008/2009 season in Belgium? Belgium refers to Country.name = 'Belgium'; */ SELECT SUM(M.away_team_goal) FROM Match AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Belgium' AND M.season = '2008/2009' /* Answer the following: What is the average overall rating of players in FIFA? */ SELECT AVG(PA.overall_rating) FROM Player_Attributes AS PA /* Answer the following: What is the average potential of players in FIFA? */ SELECT AVG(PA.potential) FROM Player_Attributes AS PA /* Answer the following: What is the average height of players in FIFA? */ SELECT AVG(P.height) FROM Player AS P /* Answer the following: What is the average weight of players in FIFA? */ SELECT AVG(P.weight) FROM Player AS P /* Answer the following: How many teams are there in FIFA? */ SELECT COUNT(T.id) FROM Team AS T /* Answer the following: How many leagues are there in FIFA? */ SELECT COUNT(L.id) FROM League AS L /* Answer the following: How many countries are there in FIFA? */ SELECT COUNT(C.id) FROM Country AS C /* Answer the following: What is the average build up play speed of teams in FIFA? */ SELECT AVG(TA.buildUpPlaySpeed) FROM Team_Attributes AS TA /* Answer the following: What is the average chance creation passing of teams in FIFA? */ SELECT AVG(TA.chanceCreationPassing) FROM Team_Attributes AS TA /* Answer the following: What is the average defence pressure of teams in FIFA? */ SELECT AVG(TA.defencePressure) FROM Team_Attributes AS TA
SELECT T1.long_passing FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.birthday ASC LIMIT 1 /* Answer the following: What is the name of the team with the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: What is the name of the country where the match with the highest home team goal was held? highest home team goal refers to MAX(home_team_goal); */ SELECT T3.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.id ORDER BY T1.home_team_goal DESC LIMIT 1 /* Answer the following: What is the name of the player with the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest defence pressure? highest defence pressure refers to MAX(defencePressure); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defencePressure DESC LIMIT 1
SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Belgium Jupiler League' AND strftime('%Y', T1.date) = '2009' AND strftime('%m', T1.date) = '04'
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2008/2009' GROUP BY T1.league_id ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which team scored the most goals in the 2011/2012 season? team that scored the most goals in the 2011/2012 season refers to MAX(home_team_goal + away_team_goal WHERE season = '2011/2012'); */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.season = '2011/2012' GROUP BY T1.home_team_api_id ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? player with the highest overall rating refers to MAX(overall_rating); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which country has the most leagues? country with the most leagues refers to MAX(country_id); */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T1.country_id ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? team with the highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which player has the highest potential? player with the highest potential refers to MAX(potential); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.potential DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation passing? team with the highest chance creation passing refers to MAX(chanceCreationPassing); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.chanceCreationPassing DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? player with the highest free kick accuracy refers to MAX(free_kick_accuracy); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure? team with the highest defence pressure refers to MAX(defencePressure); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defencePressure DESC LIMIT 1 /* Answer the following: Which player has the highest agility? player with the highest agility refers to MAX(agility); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.agility DESC LIMIT 1
SELECT CAST(SUM(T1.overall_rating) AS REAL) / COUNT(T1.id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T2.birthday) < '1986'
SELECT (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')) - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) AS DIFFERENCE /* Answer the following: What is the percentage of matches that ended in a draw in the 2015/2016 season? Calculation = DIVIDE(SUM(home_team_goal = away_team_goal WHERE season = '2015/2016'), COUNT(match_api_id WHERE season = '2015/2016')) * 100 */ SELECT CAST(SUM(CASE WHEN home_team_goal = away_team_goal THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(match_api_id) FROM Match WHERE season = '2015/2016' /* Answer the following: What is the percentage of teams that have a 'Slow' buildUpPlaySpeedClass? Calculation = DIVIDE(SUM(buildUpPlaySpeedClass = 'Slow'), COUNT(team_api_id)) * 100 */ SELECT CAST(SUM(CASE WHEN buildUpPlaySpeedClass = 'Slow' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(team_api_id) FROM Team_Attributes /* Answer the following: What is the percentage of players who prefer their right foot? Calculation = DIVIDE(SUM(preferred_foot = 'right'), COUNT(player_api_id)) * 100 */ SELECT CAST(SUM(CASE WHEN preferred_foot = 'right' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(player_api_id) FROM Player_Attributes /* Answer the following: What is the percentage of matches where the home team scored more than 3 goals? Calculation = DIVIDE(SUM(home_team_goal > 3), COUNT(match_api_id)) * 100 */ SELECT CAST(SUM(CASE WHEN home_team_goal > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(match_api_id) FROM Match /* Answer the following: What is the percentage of players who have an overall rating above 85? Calculation = DIVIDE(SUM(overall_rating > 85), COUNT(player_api_id)) * 100 */ SELECT CAST(SUM(CASE WHEN overall_rating > 85 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(player_api_id) FROM Player_Attributes /* Answer the following: What is the percentage of teams that have a 'Balanced' chanceCreationPositioningClass? Calculation = DIVIDE(SUM(chanceCreationPositioningClass = 'Balanced'), COUNT(team_api_id)) * 100 */ SELECT CAST(SUM(CASE WHEN chanceCreationPositioningClass = 'Balanced' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(team_api_id) FROM Team_Attributes /* Answer the following: What is the percentage of matches where the away team scored more than 2 goals? Calculation = DIVIDE(SUM(away_team_goal > 2), COUNT(match_api_id)) * 100 */ SELECT CAST(SUM(CASE WHEN away_team_goal > 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(match_api_id) FROM Match /* Answer the following: What is the percentage of players who have a potential above 90? Calculation = DIVIDE(SUM(potential > 90), COUNT(player_api_id)) * 100 */ SELECT CAST(SUM(CASE WHEN potential > 90 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(player_api_id) FROM Player_Attributes /* Answer the following: What is the percentage of teams that have a 'Wide' defenceTeamWidthClass? Calculation = DIVIDE(SUM(defenceTeamWidthClass = 'Wide'), COUNT(team_api_id)) * 100 */ SELECT CAST(SUM(CASE WHEN defenceTeamWidthClass = 'Wide' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(team_api_id) FROM Team_Attributes
SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Heart of Midlothian'
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'
SELECT SUM(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox' /* Answer the following: What is the average overall rating of all players in the 'England Premier League'? 'England Premier League' refers to T3.name = 'England Premier League'; average overall rating refers to AVG(overall_rating) */ SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN League AS T3 ON T2.league_id = T3.id WHERE T3.name = 'England Premier League' /* Answer the following: What is the total number of goals scored by the 'FC Barcelona' team in the 2015 season? 'FC Barcelona' refers to T2.team_long_name = 'FC Barcelona'; 2015 season refers to T3.season = '2015/2016'; total number of goals scored refers to SUM(home_team_goal) + SUM(away_team_goal) */ SELECT (SUM(T3.home_team_goal) + SUM(T3.away_team_goal)) AS total_goals FROM Team AS T2 INNER JOIN Match AS T3 ON T2.team_api_id = T3.home_team_api_id OR T2.team_api_id = T3.away_team_api_id WHERE T2.team_long_name = 'FC Barcelona' AND T3.season = '2015/2016' /* Answer the following: What is the average build up play speed of all teams in the 'Spain LIGA BBVA'? 'Spain LIGA BBVA' refers to T3.name = 'Spain LIGA BBVA'; average build up play speed refers to AVG(buildUpPlaySpeed) */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN League AS T3 ON T2.league_id = T3.id WHERE T3.name = 'Spain LIGA BBVA' /* Answer the following: What is the total number of matches played in the 'Italy Serie A' league in the 2014 season? 'Italy Serie A' refers to T2.name = 'Italy Serie A'; 2014 season refers to T1.season = '2014/2015'; total number of matches played refers to COUNT(*) */ SELECT COUNT(*) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Italy Serie A' AND T1.season = '2014/2015'
SELECT MAX(T2.chanceCreationPassing), T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Ajax' GROUP BY T2.chanceCreationPassingClass ORDER BY T2.chanceCreationPassing DESC LIMIT 1 /* Answer the following: Who is the player with the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1 /* Answer the following: What is the highest number of goals scored by a home team? highest number of goals scored by a home team refers to MAX(home_team_goal); */ SELECT MAX(home_team_goal) FROM Match /* Answer the following: What is the highest number of goals scored by an away team? highest number of goals scored by an away team refers to MAX(away_team_goal); */ SELECT MAX(away_team_goal) FROM Match /* Answer the following: What is the highest build up play speed score and what is it classified as? highest build up play speed score refers to MAX(buildUpPlaySpeed); classified as buildUpPlaySpeedClass */ SELECT MAX(T2.buildUpPlaySpeed), T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id GROUP BY T2.buildUpPlaySpeedClass ORDER BY T2.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: What is the highest defence pressure score and what is it classified as? highest defence pressure score refers to MAX(defencePressure); classified as defencePressureClass */ SELECT MAX(T2.defencePressure), T2.defencePressureClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id GROUP BY T2.defencePressureClass ORDER BY T2.defencePressure DESC LIMIT 1 /* Answer the following: What is the highest chance creation shooting score and what is it classified as? highest chance creation shooting score refers to MAX(chanceCreationShooting); classified as chanceCreationShootingClass */ SELECT MAX(T2.chanceCreationShooting), T2.chanceCreationShootingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id GROUP BY T2.chanceCreationShootingClass ORDER BY T2.chanceCreationShooting DESC LIMIT 1
SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo')
SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon' /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); team refers to team_long_name */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: How many matches were played in the 2015 season? 2015 season refers to season = '2015/2016' */ SELECT COUNT(*) FROM Match WHERE season = '2015/2016' /* Answer the following: Who is the tallest player? tallest player refers to MAX(height); player refers to player_name */ SELECT T1.player_name FROM Player AS T1 ORDER BY T1.height DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to COUNT(league_id); country refers to name */ SELECT T2.name, COUNT(T1.league_id) AS num_leagues FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T1.country_id ORDER BY num_leagues DESC LIMIT 1 /* Answer the following: What is the average overall rating of players who prefer right foot? prefer right foot refers to preferred_foot = 'right'; average overall rating refers to AVG(overall_rating) */ SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 WHERE T1.preferred_foot = 'right'
SELECT AVG(M.away_team_goal) FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id INNER JOIN League AS L ON M.league_id = L.id INNER JOIN Country AS C ON L.country_id = C.id WHERE T.team_long_name = 'Parma' AND C.name = 'Italy'
SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = 77 AND T1.date = '2016-06-23' ORDER BY T2.birthday LIMIT 1 /* Answer the following: Which team had the highest buildUpPlaySpeed on 2015/5/22? Give the name of the team. highest buildUpPlaySpeed refers to MAX(buildUpPlaySpeed); on 2015/5/22 refers to date = '2015-05-22' */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.date = '2015-05-22' ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Who is the player with the highest overall_rating who played in the match with match_api_id = 198992? Give the name of the player. highest overall_rating refers to MAX(overall_rating); played in the match with match_api_id = 198992 refers to match_api_id = 198992 */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 OR T2.player_api_id = T3.home_player_2 OR T2.player_api_id = T3.home_player_3 OR T2.player_api_id = T3.home_player_4 OR T2.player_api_id = T3.home_player_5 OR T2.player_api_id = T3.home_player_6 OR T2.player_api_id = T3.home_player_7 OR T2.player_api_id = T3.home_player_8 OR T2.player_api_id = T3.home_player_9 OR T2.player_api_id = T3.home_player_10 OR T2.player_api_id = T3.home_player_11 OR T2.player_api_id = T3.away_player_1 OR T2.player_api_id = T3.away_player_2 OR T2.player_api_id = T3.away_player_3 OR T2.player_api_id = T3.away_player_4 OR T2.player_api_id = T3.away_player_5 OR T2.player_api_id = T3.away_player_6 OR T2.player_api_id = T3.away_player_7 OR T2.player_api_id = T3.away_player_8 OR T2.player_api_id = T3.away_player_9 OR T2.player_api_id = T3.away_player_10 OR T2.player_api_id = T3.away_player_11 WHERE T3.match_api_id = 198992 ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which country had the most matches in the 2015/2016 season? Give the name of the country. most matches refers to COUNT(match_api_id); in the 2015/2016 season refers to season = '2015/2016' */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY COUNT(T1.match_api_id) DESC LIMIT 1 /* Answer the following: Which player had the most goals in the 2015/2016 season? Give the name of the player. most goals refers to SUM(home_team_goal) + SUM(away_team_goal); in the 2015/2016 season refers to season = '2015/2016' */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id OR T1.away_player_1 = T2.player_api_id OR T1.away_player_2 = T2.player_api_id OR T1.away_player_3 = T2.player_api_id OR T1.away_player_4 = T2.player_api_id OR T1.away_player_5 = T2.player_api_id OR T1.away_player_6 = T2.player_api_id OR T1.away_player_7 = T2.player_api_id OR T1.away_player_8 = T2.player_api_id OR T1.away_player_9 = T2.player_api_id OR T1.away_player_10 = T2.player_api_id OR T1.away_player_11 = T2.player_api_id WHERE T1.season = '2015/2016' GROUP BY T2.player_name ORDER BY SUM(T1.home_team_goal) + SUM(T1.away_team_goal) DESC LIMIT 1
SELECT T1.overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Mooy' AND T1.`date` = '2016-02-04 00:00:00' /* Answer the following: What is the average overall rating for all players in the team "FC Barcelona" on 2015/12/17? FC Barcelona refers to team_long_name = 'FC Barcelona'; on 2015/12/17 refers to date = '2015-12-17 00:00:00' */ SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 OR T2.player_api_id = T3.home_player_2 OR T2.player_api_id = T3.home_player_3 OR T2.player_api_id = T3.home_player_4 OR T2.player_api_id = T3.home_player_5 OR T2.player_api_id = T3.home_player_6 OR T2.player_api_id = T3.home_player_7 OR T2.player_api_id = T3.home_player_8 OR T2.player_api_id = T3.home_player_9 OR T2.player_api_id = T3.home_player_10 OR T2.player_api_id = T3.home_player_11 INNER JOIN Team AS T4 ON T3.home_team_api_id = T4.team_api_id WHERE T4.team_long_name = 'FC Barcelona' AND T1.`date` = '2015-12-17 00:00:00' /* Answer the following: What is the average buildUpPlaySpeed for all teams in the league "Premier League" on 2015/12/17? Premier League refers to name = 'Premier League'; on 2015/12/17 refers to date = '2015-12-17 00:00:00' */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Match AS T3 ON T2.team_api_id = T3.home_team_api_id OR T2.team_api_id = T3.away_team_api_id INNER JOIN League AS T4 ON T3.league_id = T4.id WHERE T4.name = 'Premier League' AND T1.`date` = '2015-12-17 00:00:00' /* Answer the following: What is the average overall rating for all players in the country "England" on 2015/12/17? England refers to name = 'England'; on 2015/12/17 refers to date = '2015-12-17 00:00:00' */ SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 OR T2.player_api_id = T3.home_player_2 OR T2.player_api_id = T3.home_player_3 OR T2.player_api_id = T3.home_player_4 OR T2.player_api_id = T3.home_player_5 OR T2.player_api_id = T3.home_player_6 OR T2.player_api_id = T3.home_player_7 OR T2.player_api_id = T3.home_player_8 OR T2.player_api_id = T3.home_player_9 OR T2.player_api_id = T3.home_player_10 OR T2.player_api_id = T3.home_player_11 INNER JOIN League AS T4 ON T3.league_id = T4.id INNER JOIN Country AS T5 ON T4.country_id = T5.id WHERE T5.name = 'England' AND T1.`date` = '2015-12-17 00:00:00' /* Answer the following: What is the average overall rating for all players in the match with match_api_id 1989923 on 2015/12/17? match_api_id 1989923 refers to match_api_id = 1989923; on 2015/12/17 refers to date = '2015-12-17 00:00:00' */ SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 OR T2.player_api_id = T3.home_player_2 OR T2.player_api_id = T3.home_player_3 OR T2.player_api_id = T3.home_player_4 OR T2.player_api_id = T3.home_player_5 OR T2.player_api_id = T3.home_player_6 OR T2.player_api_id = T3.home_player_7 OR T2.player_api_id = T3.home_player_8 OR T2.player_api_id = T3.home_player_9 OR T2.player_api_id = T3.home_player_10 OR T2.player_api_id = T3.home_player_11 WHERE T3.match_api_id = 1989923 AND T1.`date` = '2015-12-17 00:00:00'
SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Parravicini' AND T1.date = '2010-08-30 00:00:00'
SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Migliore' AND T1.date = '2015-05-01 00:00:00'
SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Berigaud') AND `date` = '2013-02-22 00:00:00' /* Answer the following: Provide the number of goals scored by the home team in the match between team 9987 and team 9993 on 2010/8/28. team 9987 refers to home_team_api_id = 9987; team 9993 refers to away_team_api_id = 9993; on 2010/8/28 refers to date = '2010-08-28 00:00:00' */ SELECT home_team_goal FROM Match WHERE home_team_api_id = 9987 AND away_team_api_id = 9993 AND `date` = '2010-08-28 00:00:00' /* Answer the following: What is the build up play speed of team 9987 on 2010/2/22? team 9987 refers to team_api_id = 9987; on 2010/2/22 refers to date = '2010-02-22 00:00:00' */ SELECT buildUpPlaySpeed FROM Team_Attributes WHERE team_api_id = 9987 AND `date` = '2010-02-22 00:00:00' /* Answer the following: How many matches were played in the league with id 1 in the 2008/2009 season? league with id 1 refers to league_id = 1; in the 2008/2009 season refers to season = '2008/2009' */ SELECT COUNT(*) FROM Match WHERE league_id = 1 AND season = '2008/2009' /* Answer the following: What is the height of the player with id 505942? player with id 505942 refers to player_api_id = 505942 */ SELECT height FROM Player WHERE player_api_id = 505942 /* Answer the following: What is the name of the country with id 1? country with id 1 refers to id = 1 */ SELECT name FROM Country WHERE id = 1 /* Answer the following: What is the name of the team with id 1? team with id 1 refers to team_api_id = 1 */ SELECT team_long_name FROM Team WHERE team_api_id = 1 /* Answer the following: What is the overall rating of the player with id 505942 on 2016/2/18? player with id 505942 refers to player_api_id = 505942; on 2016/2/18 refers to date = '2016-02-18 00:00:00' */ SELECT overall_rating FROM Player_Attributes WHERE player_api_id = 505942 AND `date` = '2016-02-18 00:00:00' /* Answer the following: What is the name of the league with id 1? league with id 1 refers to id = 1 */ SELECT name FROM League WHERE id = 1 /* Answer the following: What is the short name of the team with id 1? team with id 1 refers to team_api_id = 1 */ SELECT team_short_name FROM Team WHERE team_api_id = 1
SELECT date FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') ORDER BY crossing DESC LIMIT 1 /* Answer the following: Which team has the highest buildUpPlaySpeed in 2015? highest buildUpPlaySpeed refers to MAX(buildUpPlaySpeed); 2015 refers to date LIKE '2015%' */ SELECT team_api_id FROM Team_Attributes WHERE date LIKE '2015%' ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: What is the name of the country that has the most number of leagues? most number of leagues refers to MAX(COUNT(league_id)) */ SELECT name FROM Country WHERE id = (SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1) /* Answer the following: Which match has the highest total goals? highest total goals refers to MAX(home_team_goal + away_team_goal) */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Who is the player with the highest overall rating? highest overall rating refers to MAX(overall_rating) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1)
SELECT T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Willem II' AND T1.date = '2011-02-22 00:00:00'
SELECT T2.buildUpPlayDribblingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'LEI' AND T2.date = '2015-09-10 00:00:00'
SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'FC Lorient' AND T2.date = '2010-02-22'
SELECT T1.chanceCreationPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'PEC Zwolle' AND T1.date = '2013-09-20 00:00:00'
SELECT T1.chanceCreationCrossingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Hull City' AND T1.date = '2010-02-22 00:00:00'
SELECT T1.defenceAggressionClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Hannover 96' AND T1.date = '2015-09-10 00:00:00'
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT (CAST((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') AS REAL) - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery') AND date = '2013-07-12')) / (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') * 100 AS Percentage_Difference /* Answer the following: What is the average overall rating of all players in the 'England Premier League' on 2015/9/10? 'England Premier League' refers to name = 'England Premier League'; average overall rating refers to AVG(overall_rating) */ SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_6 OR T1.player_api_id = T2.home_player_7 OR T1.player_api_id = T2.home_player_8 OR T1.player_api_id = T2.home_player_9 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 OR T1.player_api_id = T2.away_player_1 OR T1.player_api_id = T2.away_player_2 OR T1.player_api_id = T2.away_player_3 OR T1.player_api_id = T2.away_player_4 OR T1.player_api_id = T2.away_player_5 OR T1.player_api_id = T2.away_player_6 OR T1.player_api_id = T2.away_player_7 OR T1.player_api_id = T2.away_player_8 OR T1.player_api_id = T2.away_player_9 OR T1.player_api_id = T2.away_player_10 OR T1.player_api_id = T2.away_player_11 INNER JOIN League AS T3 ON T2.league_id = T3.id WHERE T3.name = 'England Premier League' AND T1.date = '2015-09-10' /* Answer the following: What is the average height of all players in the 'England Premier League' on 2015/9/10? 'England Premier League' refers to name = 'England Premier League'; average height refers to AVG(height) */ SELECT AVG(T1.height) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_6 OR T1.player_api_id = T2.home_player_7 OR T1.player_api_id = T2.home_player_8 OR T1.player_api_id = T2.home_player_9 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 OR T1.player_api_id = T2.away_player_1 OR T1.player_api_id = T2.away_player_2 OR T1.player_api_id = T2.away_player_3 OR T1.player_api_id = T2.away_player_4 OR T1.player_api_id = T2.away_player_5 OR T1.player_api_id = T2.away_player_6 OR T1.player_api_id = T2.away_player_7 OR T1.player_api_id = T2.away_player_8 OR T1.player_api_id = T2.away_player_9 OR T1.player_api_id = T2.away_player_10 OR T1.player_api_id = T2.away_player_11 INNER JOIN League AS T3 ON T2.league_id = T3.id WHERE T3.name = 'England Premier League' AND T1.birthday <= '1997-09-10'
SELECT player_name FROM Player ORDER BY height DESC LIMIT 5 /* Answer the following: Who is the player with the highest overall rating? highest overall rating refers to MAX(overall_rating) */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY Team_Attributes.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to COUNT(league_id) */ SELECT name FROM Country INNER JOIN League ON Country.id = League.country_id GROUP BY League.country_id ORDER BY COUNT(League.id) DESC LIMIT 1 /* Answer the following: Which match had the most goals? most goals refers to SUM(home_team_goal + away_team_goal) */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Which player has played in the most matches? most matches refers to COUNT(match_api_id) */ SELECT player_name FROM Player INNER JOIN Match ON Player.player_api_id = Match.home_player_1 OR Player.player_api_id = Match.home_player_2 OR Player.player_api_id = Match.home_player_3 OR Player.player_api_id = Match.home_player_4 OR Player.player_api_id = Match.home_player_5 OR Player.player_api_id = Match.home_player_6 OR Player.player_api_id = Match.home_player_7 OR Player.player_api_id = Match.home_player_8 OR Player.player_api_id = Match.home_player_9 OR Player.player_api_id = Match.home_player_10 OR Player.player_api_id = Match.home_player_11 OR Player.player_api_id = Match.away_player_1 OR Player.player_api_id = Match.away_player_2 OR Player.player_api_id = Match.away_player_3 OR Player.player_api_id = Match.away_player_4 OR Player.player_api_id = Match.away_player_5 OR Player.player_api_id = Match.away_player_6 OR Player.player_api_id = Match.away_player_7 OR Player.player_api_id = Match.away_player_8 OR Player.player_api_id = Match.away_player_9 OR Player.player_api_id = Match.away_player_10 OR Player.player_api_id = Match.away_player_11 GROUP BY Player.player_api_id ORDER BY COUNT(Match.match_api_id) DESC LIMIT 1
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10
SELECT player_name FROM Player WHERE (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', birthday)) >= 35
SELECT SUM(home_team_goal) FROM Match WHERE home_player_1 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_2 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_3 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_4 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_5 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_6 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_7 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_8 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_9 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_10 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon') OR home_player_11 IN (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Lennon')
SELECT SUM(away_team_goal) FROM Match WHERE away_player_1 IN (SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira'))
SELECT SUM(home_team_goal) FROM Match AS M INNER JOIN Player AS P ON M.home_player_1 = P.player_api_id WHERE (strftime('%Y', 'now') - strftime('%Y', P.birthday)) <= 30
SELECT player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY overall_rating DESC LIMIT 10 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to MAX(league_id) */ SELECT name FROM Country WHERE id IN (SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1) /* Answer the following: Which match had the most goals? most goals refers to MAX(home_team_goal + away_team_goal) */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Which player has the highest potential? highest potential refers to MAX(potential) */ SELECT player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY potential DESC LIMIT 1 /* Answer the following: Which team has the best defence? best defence refers to MAX(defencePressure) */ SELECT team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY defencePressure DESC LIMIT 1 /* Answer the following: Which player has the best free kick accuracy? best free kick accuracy refers to MAX(free_kick_accuracy) */ SELECT player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the best chance creation shooting? best chance creation shooting refers to MAX(chanceCreationShooting) */ SELECT team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY chanceCreationShooting DESC LIMIT 1 /* Answer the following: Which player has the best reactions? best reactions refers to MAX(reactions) */ SELECT player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY reactions DESC LIMIT 1 /* Answer the following: Which team has the best build up play passing? best build up play passing refers to MAX(buildUpPlayPassing) */ SELECT team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id ORDER BY buildUpPlayPassing DESC LIMIT 1
SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE potential = ( SELECT MAX(potential) FROM Player_Attributes ) )
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.attacking_work_rate = 'high'
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T1.birthday LIMIT 1
SELECT T1.player_name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Belgium'
SELECT T2.player_name, T3.name AS country_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Country AS T3 ON T2.country_id = T3.id WHERE T1.vision > 89
SELECT T1.name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY AVG(T2.weight) DESC LIMIT 1 /* Answer the following: Which team has the highest average overall rating? highest average overall rating refers to MAX(AVG(overall_rating)) */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Player_Attributes AS T2 ON T1.team_api_id = T2.team_api_id GROUP BY T1.team_long_name ORDER BY AVG(T2.overall_rating) DESC LIMIT 1 /* Answer the following: Which league has the highest average home team goals? highest average home team goals refers to MAX(AVG(home_team_goal)) */ SELECT T1.name FROM League AS T1 INNER JOIN Match AS T2 ON T1.id = T2.league_id GROUP BY T1.name ORDER BY AVG(T2.home_team_goal) DESC LIMIT 1 /* Answer the following: Which season has the highest average away team goals? highest average away team goals refers to MAX(AVG(away_team_goal)) */ SELECT season FROM Match GROUP BY season ORDER BY AVG(away_team_goal) DESC LIMIT 1 /* Answer the following: Which player has the highest average overall rating? highest average overall rating refers to MAX(AVG(overall_rating)) */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY T1.player_name ORDER BY AVG(T2.overall_rating) DESC LIMIT 1 /* Answer the following: Which team has the highest average build up play speed? highest average build up play speed refers to MAX(AVG(buildUpPlaySpeed)) */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id GROUP BY T1.team_long_name ORDER BY AVG(T2.buildUpPlaySpeed) DESC LIMIT 1
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow' /* Answer the following: List down the player names who have a potential greater than 90. potential greater than 90 refers to potential > 90; player names refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential > 90 /* Answer the following: List down the countries where the league name is 'Premier League'. league name is 'Premier League' refers to name = 'Premier League'; countries refers to name */ SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Premier League' /* Answer the following: List down the matches where the home team scored more than 5 goals. home team scored more than 5 goals refers to home_team_goal > 5; matches refers to match_api_id */ SELECT T1.match_api_id FROM Match AS T1 WHERE T1.home_team_goal > 5 /* Answer the following: List down the teams where the defence pressure class is 'High'. defence pressure class is 'High' refers to defencePressureClass = 'High'; teams refers to team_long_name */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.defencePressureClass = 'High'
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe' /* Answer the following: Who are the players with overall rating above 85 and preferred foot is left? overall rating above 85 refers to overall_rating > 85; preferred foot is left refers to preferred_foot = 'Left'; players refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > 85 AND T2.preferred_foot = 'Left' /* Answer the following: What are the countries where the league's name contains 'Premier'? league's name contains 'Premier' refers to name LIKE '%Premier%'; countries refers to name */ SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name LIKE '%Premier%' /* Answer the following: What are the matches where home team scored more than 3 goals? home team scored more than 3 goals refers to home_team_goal > 3; matches refers to match_api_id */ SELECT match_api_id FROM Match WHERE home_team_goal > 3 /* Answer the following: Who are the players who played in the match with match_api_id of 19872? match_api_id of 19872 refers to match_api_id = 19872; players refers to player_name */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id IN (T2.home_player_1, T2.home_player_2, T2.home_player_3, T2.home_player_4, T2.home_player_5, T2.home_player_6, T2.home_player_7, T2.home_player_8, T2.home_player_9, T2.home_player_10, T2.home_player_11, T2.away_player_1, T2.away_player_2, T2.away_player_3, T2.away_player_4, T2.away_player_5, T2.away_player_6, T2.away_player_7, T2.away_player_8, T2.away_player_9, T2.away_player_10, T2.away_player_11) WHERE T2.match_api_id = 19872
SELECT AVG(T1.height) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Country AS T3 ON T2.country_id = T3.id WHERE T3.name = 'Italy'
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest overall rating. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest overall rating refers to MAX(overall_rating) */ SELECT P.player_name, PA.overall_rating FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.overall_rating DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest potential. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest potential refers to MAX(potential) */ SELECT P.player_name, PA.potential FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.potential DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest sprint speed. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest sprint speed refers to MAX(sprint_speed) */ SELECT P.player_name, PA.sprint_speed FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.sprint_speed DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest shot power. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest shot power refers to MAX(shot_power) */ SELECT P.player_name, PA.shot_power FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.shot_power DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest strength. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest strength refers to MAX(strength) */ SELECT P.player_name, PA.strength FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.strength DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest long shots. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest long shots refers to MAX(long_shots) */ SELECT P.player_name, PA.long_shots FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.long_shots DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest aggression. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest aggression refers to MAX(aggression) */ SELECT P.player_name, PA.aggression FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.aggression DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest interceptions. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest interceptions refers to MAX(interceptions) */ SELECT P.player_name, PA.interceptions FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.interceptions DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest positioning. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest positioning refers to MAX(positioning) */ SELECT P.player_name, PA.positioning FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.positioning DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest vision. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest vision refers to MAX(vision) */ SELECT P.player_name, PA.vision FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.vision DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest penalties. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest penalties refers to MAX(penalties) */ SELECT P.player_name, PA.penalties FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.penalties DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest marking. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest marking refers to MAX(marking) */ SELECT P.player_name, PA.marking FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.marking DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest standing tackle. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest standing tackle refers to MAX(standing_tackle) */ SELECT P.player_name, PA.standing_tackle FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.standing_tackle DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest sliding tackle. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest sliding tackle refers to MAX(sliding_tackle) */ SELECT P.player_name, PA.sliding_tackle FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.sliding_tackle DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest gk diving. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest gk diving refers to MAX(gk_diving) */ SELECT P.player_name, PA.gk_diving FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.gk_diving DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest gk handling. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest gk handling refers to MAX(gk_handling) */ SELECT P.player_name, PA.gk_handling FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.gk_handling DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest gk kicking. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest gk kicking refers to MAX(gk_kicking) */ SELECT P.player_name, PA.gk_kicking FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.gk_kicking DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest gk positioning. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest gk positioning refers to MAX(gk_positioning) */ SELECT P.player_name, PA.gk_positioning FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.gk_positioning DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest gk reflexes. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest gk reflexes refers to MAX(gk_reflexes) */ SELECT P.player_name, PA.gk_reflexes FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.gk_reflexes DESC LIMIT 3
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01' /* Answer the following: What is the average overall rating of all players in the FIFA database? overall rating refers to overall_rating */ SELECT AVG(overall_rating) FROM Player_Attributes /* Answer the following: Which team has the highest average build up play speed? highest average build up play speed refers to MAX(AVG(buildUpPlaySpeed)) */ SELECT team_api_id FROM Team_Attributes GROUP BY team_api_id ORDER BY AVG(buildUpPlaySpeed) DESC LIMIT 1 /* Answer the following: How many matches were played in the 2008/2009 season? 2008/2009 season refers to season = '2008/2009' */ SELECT COUNT(*) FROM Match WHERE season = '2008/2009' /* Answer the following: Which player has the highest potential in the FIFA database? highest potential refers to MAX(potential) */ SELECT player_api_id FROM Player_Attributes ORDER BY potential DESC LIMIT 1 /* Answer the following: How many teams are there in the FIFA database? */ SELECT COUNT(DISTINCT team_api_id) FROM Team /* Answer the following: Which country has the most leagues in the FIFA database? most leagues refers to MAX(COUNT(league_id)) */ SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: What is the average height of all players in the FIFA database? average height refers to AVG(height) */ SELECT AVG(height) FROM Player /* Answer the following: Which team has the highest average chance creation passing? highest average chance creation passing refers to MAX(AVG(chanceCreationPassing)) */ SELECT team_api_id FROM Team_Attributes GROUP BY team_api_id ORDER BY AVG(chanceCreationPassing) DESC LIMIT 1 /* Answer the following: How many matches were played by the team with team_api_id 9987 in the 2011/2012 season? team_api_id 9987 refers to home_team_api_id = 9987 or away_team_api_id = 9987; 2011/2012 season refers to season = '2011/2012' */ SELECT COUNT(*) FROM Match WHERE (home_team_api_id = 9987 OR away_team_api_id = 9987) AND season = '2011/2012'
SELECT ( SELECT jumping FROM Player_Attributes WHERE player_api_id = 6 ) - ( SELECT jumping FROM Player_Attributes WHERE player_api_id = 23 ) AS num /* Answer the following: What is the difference in overall rating between team 1 and team 5? difference in overall rating between team 1 and team 5 refers to SUBTRACT(AVG(overall_rating) AND team_api_id = 1, AVG(overall_rating) AND team_api_id = 5) */ SELECT ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Match WHERE home_team_api_id = 1 OR away_team_api_id = 1) ) - ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Match WHERE home_team_api_id = 5 OR away_team_api_id = 5) ) AS num /* Answer the following: What is the difference in average buildUpPlaySpeed between team 1 and team 5? difference in average buildUpPlaySpeed between team 1 and team 5 refers to SUBTRACT(AVG(buildUpPlaySpeed) AND team_api_id = 1, AVG(buildUpPlaySpeed) AND team_api_id = 5) */ SELECT ( SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_api_id = 1 ) - ( SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_api_id = 5 ) AS num /* Answer the following: What is the difference in average goals scored between team 1 and team 5? difference in average goals scored between team 1 and team 5 refers to SUBTRACT(AVG(home_team_goal) AND home_team_api_id = 1, AVG(home_team_goal) AND home_team_api_id = 5) */ SELECT ( SELECT AVG(home_team_goal) FROM Match WHERE home_team_api_id = 1 ) - ( SELECT AVG(home_team_goal) FROM Match WHERE home_team_api_id = 5 ) AS num /* Answer the following: What is the difference in average goals conceded between team 1 and team 5? difference in average goals conceded between team 1 and team 5 refers to SUBTRACT(AVG(away_team_goal) AND home_team_api_id = 1, AVG(away_team_goal) AND home_team_api_id = 5) */ SELECT ( SELECT AVG(away_team_goal) FROM Match WHERE home_team_api_id = 1 ) - ( SELECT AVG(away_team_goal) FROM Match WHERE home_team_api_id = 5 ) AS num
SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 3 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country has the most number of leagues? most number of leagues refers to COUNT(league_id); country refers to country_id */ SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: Which match had the most goals scored? most goals scored refers to MAX(home_team_goal + away_team_goal); match refers to match_api_id */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Which team has the most aggressive defence? most aggressive defence refers to MAX(defenceAggression); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY defenceAggression DESC LIMIT 1 /* Answer the following: Which player has the best goalkeeping skills? best goalkeeping skills refers to MAX(gk_diving + gk_handling + gk_kicking + gk_positioning + gk_reflexes); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY (gk_diving + gk_handling + gk_kicking + gk_positioning + gk_reflexes) DESC LIMIT 1 /* Answer the following: Which team has the best chance creation in shooting? best chance creation in shooting refers to MAX(chanceCreationShooting); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationShooting DESC LIMIT 1 /* Answer the following: Which player has the best shooting power? best shooting power refers to MAX(shot_power); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY shot_power DESC LIMIT 1 /* Answer the following: Which team has the widest defence? widest defence refers to MAX(defenceTeamWidth); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY defenceTeamWidth DESC LIMIT 1 /* Answer the following: Which player has the best reactions? best reactions refers to MAX(reactions); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY reactions DESC LIMIT 1 /* Answer the following: Which player has the best stamina? best stamina refers to MAX(stamina); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY stamina DESC LIMIT 1 /* Answer the following: Which player has the best strength? best strength refers to MAX(strength); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY strength DESC LIMIT 1 /* Answer the following: Which player has the best long shots? best long shots refers to MAX(long_shots); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY long_shots DESC LIMIT 1 /* Answer the following: Which player has the best aggression? best aggression refers to MAX(aggression); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY aggression DESC LIMIT 1 /* Answer the following: Which player has the best interceptions? best interceptions refers to MAX(interceptions); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY interceptions DESC LIMIT 1 /* Answer the following: Which player has the best positioning? best positioning refers to MAX(positioning); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY positioning DESC LIMIT 1 /* Answer the following: Which player has the best vision? best vision refers to MAX(vision); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY vision DESC LIMIT 1 /* Answer the following: Which player has the best penalties? best penalties refers to MAX(penalties); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY penalties DESC LIMIT 1 /* Answer the following: Which player has the best marking? best marking refers to MAX(marking); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY marking DESC LIMIT 1 /* Answer the following: Which player has the best standing tackle? best standing tackle refers to MAX(standing_tackle); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY standing_tackle DESC LIMIT 1 /* Answer the following: Which player has the best sliding tackle? best sliding tackle refers to MAX(sliding_tackle); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY sliding_tackle DESC LIMIT 1 /* Answer the following: Which player has the best goalkeeping diving? best goalkeeping diving refers to MAX(gk_diving); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY gk_diving DESC LIMIT 1 /* Answer the following: Which player has the best goalkeeping handling? best goalkeeping handling refers to MAX(gk_handling); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY gk_handling DESC LIMIT 1 /* Answer the following: Which player has the best goalkeeping kicking? best goalkeeping kicking refers to MAX(gk_kicking); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY gk_kicking DESC LIMIT 1 /* Answer the following: Which player has the best goalkeeping positioning? best goalkeeping positioning refers to MAX(gk_positioning); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY gk_positioning DESC LIMIT 1 /* Answer the following: Which player has the best goalkeeping reflexes? best goalkeeping reflexes refers to MAX(gk_reflexes); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY gk_reflexes DESC LIMIT 1
SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) /* Answer the following: How many teams had the highest build up play speed in 2015? highest build up play speed refers to MAX(buildUpPlaySpeed); in 2015 refers to date LIKE '2015%' */ SELECT COUNT(team_api_id) FROM Team_Attributes WHERE date LIKE '2015%' AND buildUpPlaySpeed = ( SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes WHERE date LIKE '2015%' ) /* Answer the following: How many matches were played in the season with the highest number of matches? highest number of matches refers to MAX(COUNT(match_api_id)) */ SELECT COUNT(match_api_id) FROM Match WHERE season = ( SELECT season FROM ( SELECT season, COUNT(match_api_id) AS num_matches FROM Match GROUP BY season ORDER BY num_matches DESC LIMIT 1 ) ) /* Answer the following: How many players had the highest overall rating in 2016? highest overall rating refers to MAX(overall_rating); in 2016 refers to date LIKE '2016%' */ SELECT COUNT(player_api_id) FROM Player_Attributes WHERE date LIKE '2016%' AND overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes WHERE date LIKE '2016%' ) /* Answer the following: How many countries had leagues with the highest number of teams? highest number of teams refers to MAX(COUNT(team_api_id)) */ SELECT COUNT(country_id) FROM League WHERE id IN ( SELECT league_id FROM ( SELECT league_id, COUNT(team_api_id) AS num_teams FROM Team GROUP BY league_id ORDER BY num_teams DESC LIMIT 1 ) )
SELECT CAST(SUM(CASE WHEN stamina > 80 AND strength > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Player_Attributes /* Answer the following: What percentage of matches resulted in a home team victory? home team victory refers to home_team_goal > away_team_goal */ SELECT CAST(SUM(CASE WHEN home_team_goal > away_team_goal THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Match /* Answer the following: What percentage of teams have a buildUpPlaySpeed score of more than 70? buildUpPlaySpeed score of more than 70 refers to buildUpPlaySpeed > 70 */ SELECT CAST(SUM(CASE WHEN buildUpPlaySpeed > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Team_Attributes /* Answer the following: What percentage of players have a preferred foot of 'left'? preferred foot of 'left' refers to preferred_foot = 'left' */ SELECT CAST(SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Player_Attributes /* Answer the following: What percentage of leagues are from the country 'Spain'? country 'Spain' refers to country_id where country name is 'Spain' */ SELECT CAST(SUM(CASE WHEN country_id = (SELECT id FROM Country WHERE name = 'Spain') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM League /* Answer the following: What percentage of matches were played in the season '2008/2009'? season '2008/2009' refers to season = '2008/2009' */ SELECT CAST(SUM(CASE WHEN season = '2008/2009' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Match /* Answer the following: What percentage of players have an overall rating of more than 85? overall rating of more than 85 refers to overall_rating > 85 */ SELECT CAST(SUM(CASE WHEN overall_rating > 85 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Player_Attributes /* Answer the following: What percentage of teams have a team_short_name that starts with 'A'? team_short_name that starts with 'A' refers to team_short_name LIKE 'A%' */ SELECT CAST(SUM(CASE WHEN team_short_name LIKE 'A%' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Team /* Answer the following: What percentage of matches resulted in a draw? draw refers to home_team_goal = away_team_goal */ SELECT CAST(SUM(CASE WHEN home_team_goal = away_team_goal THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Match /* Answer the following: What percentage of players have a height of more than 200? height of more than 200 refers to height > 200 */ SELECT CAST(SUM(CASE WHEN height > 200 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Player
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa' /* Answer the following: What is the overall rating of the player with the player_api_id of 505942? */ SELECT overall_rating FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the name of the team with the team_api_id of 9987? */ SELECT team_long_name FROM Team WHERE team_api_id = 9987 /* Answer the following: What is the build up play speed of the team with the team_api_id of 9987? */ SELECT buildUpPlaySpeed FROM Team_Attributes WHERE team_api_id = 9987 /* Answer the following: How many goals did the home team score in the match with the match_api_id of 1989923? */ SELECT home_team_goal FROM Match WHERE match_api_id = 1989923 /* Answer the following: Who is the first home player in the match with the match_api_id of 1989923? */ SELECT home_player_1 FROM Match WHERE match_api_id = 1989923 /* Answer the following: What is the name of the player with the player_api_id of 505942? */ SELECT player_name FROM Player WHERE player_api_id = 505942 /* Answer the following: What is the height of the player with the player_api_id of 505942? */ SELECT height FROM Player WHERE player_api_id = 505942 /* Answer the following: What is the weight of the player with the player_api_id of 505942? */ SELECT weight FROM Player WHERE player_api_id = 505942 /* Answer the following: What is the birthday of the player with the player_api_id of 505942? */ SELECT birthday FROM Player WHERE player_api_id = 505942 /* Answer the following: What is the preferred foot of the player with the player_api_id of 505942? */ SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the attacking work rate of the player with the player_api_id of 505942? */ SELECT attacking_work_rate FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the defensive work rate of the player with the player_api_id of 505942? */ SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the crossing ability of the player with the player_api_id of 505942? */ SELECT crossing FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the finishing ability of the player with the player_api_id of 505942? */ SELECT finishing FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the heading accuracy of the player with the player_api_id of 505942? */ SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the short passing ability of the player with the player_api_id of 505942? */ SELECT short_passing FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the volleys ability of the player with the player_api_id of 505942? */ SELECT volleys FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the dribbling ability of the player with the player_api_id of 505942? */ SELECT dribbling FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the curve ability of the player with the player_api_id of 505942? */ SELECT curve FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the free kick accuracy of the player with the player_api_id of 505942? */ SELECT free_kick_accuracy FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the long passing ability of the player with the player_api_id of 505942? */ SELECT long_passing FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the ball control ability of the player with the player_api_id of 505942? */ SELECT ball_control FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the acceleration ability of the player with the player_api_id of 505942? */ SELECT acceleration FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the sprint speed ability of the player with the player_api_id of 505942? */ SELECT sprint_speed FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the agility ability of the player with the player_api_id of 505942? */ SELECT agility FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the reactions ability of the player with the player_api_id of 505942? */ SELECT reactions FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the balance ability of the player with the player_api_id of 505942? */ SELECT balance FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the shot power ability of the player with the player_api_id of 505942? */ SELECT shot_power FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the jumping ability of the player with the player_api_id of 505942? */ SELECT jumping FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the stamina ability of the player with the player_api_id of 505942? */ SELECT stamina FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the strength ability of the player with the player_api_id of 505942? */ SELECT strength FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the long shots ability of the player with the player_api_id of 505942? */ SELECT long_shots FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the aggression ability of the player with the player_api_id of 505942? */ SELECT aggression FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the interceptions ability of the player with the player_api_id of 505942? */ SELECT interceptions FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the positioning ability of the player with the player_api_id of 505942? */ SELECT positioning FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the vision ability of the player with the player_api_id of 505942? */ SELECT vision FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the penalties ability of the player with the player_api_id of 505942? */ SELECT penalties FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the marking ability of the player with the player_api_id of 505942? */ SELECT marking FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the standing tackle ability of the player with the player_api_id of 505942? */ SELECT standing_tackle FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the sliding tackle ability of the player with the player_api_id of 505942? */ SELECT sliding_tackle FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the gk diving ability of the player with the player_api_id of 505942? */ SELECT gk_diving FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the gk handling ability of the player with the player_api_id of 505942? */ SELECT gk_handling FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the gk kicking ability of the player with the player_api_id of 505942? */ SELECT gk_kicking FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the gk positioning ability of the player with the player_api_id of 505942? */ SELECT gk_positioning FROM Player_Attributes WHERE player_api_id = 505942 /* Answer the following: What is the gk reflexes ability of the player with the player_api_id of 505942? */ SELECT gk_reflexes FROM Player_Attributes WHERE player_api_id = 505942
SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League') /* Answer the following: What is the name of the player with the highest overall rating in 2010? 2010 refers to date like '2010%'; highest overall rating refers to max(overall_rating); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '2010%' ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest build up play speed in 2010? 2010 refers to date like '2010%'; highest build up play speed refers to max(buildUpPlaySpeed); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.date LIKE '2010%' ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: What is the name of the country where the match with the highest number of home team goals was played in 2010? 2010 refers to date like '2010%'; highest number of home team goals refers to max(home_team_goal); */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.date LIKE '2010%' ORDER BY T1.home_team_goal DESC LIMIT 1 /* Answer the following: What is the name of the league where the match with the highest number of away team goals was played in 2010? 2010 refers to date like '2010%'; highest number of away team goals refers to max(away_team_goal); */ SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.date LIKE '2010%' ORDER BY T1.away_team_goal DESC LIMIT 1 /* Answer the following: What is the name of the player who played in the position with the highest average rating in 2010? 2010 refers to date like '2010%'; highest average rating refers to max(avg(overall_rating)); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '2010%' GROUP BY T1.player_api_id ORDER BY AVG(T1.overall_rating) DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest average build up play speed in 2010? 2010 refers to date like '2010%'; highest average build up play speed refers to max(avg(buildUpPlaySpeed)); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.date LIKE '2010%' GROUP BY T1.team_api_id ORDER BY AVG(T1.buildUpPlaySpeed) DESC LIMIT 1 /* Answer the following: What is the name of the country where the match with the highest average number of home team goals was played in 2010? 2010 refers to date like '2010%'; highest average number of home team goals refers to max(avg(home_team_goal)); */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.date LIKE '2010%' GROUP BY T1.country_id ORDER BY AVG(T1.home_team_goal) DESC LIMIT 1 /* Answer the following: What is the name of the league where the match with the highest average number of away team goals was played in 2010? 2010 refers to date like '2010%'; highest average number of away team goals refers to max(avg(away_team_goal)); */ SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.date LIKE '2010%' GROUP BY T1.league_id ORDER BY AVG(T1.away_team_goal) DESC LIMIT 1
SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )
SELECT T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'KSV Cercle Brugge'
SELECT COUNT(*) FROM Match INNER JOIN League ON Match.league_id = League.id WHERE season = '2015/2016' AND League.name = 'Italian Serie A'
SELECT MAX(home_team_goal) FROM Match INNER JOIN League ON Match.league_id = League.id INNER JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands' AND League.name = 'Eredivisie' /* Answer the following: Who is the player with the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY Team_Attributes.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: What was the highest number of goals scored by an away team in a single match? highest number of goals scored by an away team refers to MAX(away_team_goal); */ SELECT MAX(away_team_goal) FROM Match /* Answer the following: Which country has the most leagues? most leagues refers to COUNT(league_id); */ SELECT name FROM Country INNER JOIN League ON Country.id = League.country_id GROUP BY Country.name ORDER BY COUNT(League.id) DESC LIMIT 1 /* Answer the following: Which player has the highest potential? highest potential refers to MAX(potential); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.potential DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation shooting? highest chance creation shooting refers to MAX(chanceCreationShooting); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY Team_Attributes.chanceCreationShooting DESC LIMIT 1 /* Answer the following: What was the highest number of goals scored by a home team in a single match? highest number of goals scored by a home team refers to MAX(home_team_goal); */ SELECT MAX(home_team_goal) FROM Match /* Answer the following: Which player has the highest free kick accuracy? highest free kick accuracy refers to MAX(free_kick_accuracy); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest build up play passing? highest build up play passing refers to MAX(buildUpPlayPassing); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY Team_Attributes.buildUpPlayPassing DESC LIMIT 1
SELECT T1.finishing, T1.curve FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.weight = ( SELECT MAX(weight) FROM Player ) LIMIT 1 /* Answer the following: What is the name of the team with the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeed = ( SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes ) LIMIT 1 /* Answer the following: What is the name of the country where the league with the most matches played is located? most matches played refers to MAX(count(match_api_id)) */ SELECT T3.name FROM (SELECT COUNT(T1.match_api_id) AS match_count, T2.country_id FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id GROUP BY T2.country_id ORDER BY match_count DESC LIMIT 1) AS T1 INNER JOIN Country AS T3 ON T1.country_id = T3.id /* Answer the following: What is the name of the player with the highest overall rating? highest overall rating refers to MAX(overall_rating) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes ) LIMIT 1 /* Answer the following: What is the name of the team with the highest home team goal? highest home team goal refers to MAX(home_team_goal) */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.home_team_goal = ( SELECT MAX(home_team_goal) FROM Match ) LIMIT 1 /* Answer the following: What is the name of the player with the highest penalties score? highest penalties score refers to MAX(penalties) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.penalties = ( SELECT MAX(penalties) FROM Player_Attributes ) LIMIT 1 /* Answer the following: What is the name of the team with the highest defence pressure? highest defence pressure refers to MAX(defencePressure) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.defencePressure = ( SELECT MAX(defencePressure) FROM Team_Attributes ) LIMIT 1
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which team scored the most goals in the 2014–2015 season? in the 2014–2015 season season = '2014/2015'; team with most goals refers to team_long_name where MAX(home_team_goal + away_team_goal) */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id OR T1.away_team_api_id = T2.team_api_id WHERE T1.season = '2014/2015' GROUP BY T2.team_long_name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to MAX(COUNT(league_id)) */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which player has the highest penalties score? highest penalties score refers to MAX(penalties) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.penalties DESC LIMIT 1 /* Answer the following: Which team has the most aggressive defence? most aggressive defence refers to MAX(defenceAggression) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defenceAggression DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? highest free kick accuracy refers to MAX(free_kick_accuracy) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the widest defence? widest defence refers to MAX(defenceTeamWidth) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defenceTeamWidth DESC LIMIT 1 /* Answer the following: Which player has the highest sprint speed? highest sprint speed refers to MAX(sprint_speed) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.sprint_speed DESC LIMIT 1
SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id ORDER BY T1.away_team_goal DESC LIMIT 1 /* Answer the following: Please provide the full name of the home team that scored the most goals. full name refers to team_long_name; home team refers to home_team_api_id; scored the most goals refers to MAX(home_team_goal) */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id ORDER BY T1.home_team_goal DESC LIMIT 1 /* Answer the following: Please provide the name of the player with the highest overall rating. player's name refers to player_name; the highest overall rating refers to MAX(overall_rating) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Please provide the name of the league with the most matches played. league's name refers to name; the most matches played refers to MAX(count(match_api_id)) */ SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id GROUP BY T1.league_id ORDER BY COUNT(T1.match_api_id) DESC LIMIT 1 /* Answer the following: Please provide the name of the country with the most matches played. country's name refers to name; the most matches played refers to MAX(count(match_api_id)) */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T1.country_id ORDER BY COUNT(T1.match_api_id) DESC LIMIT 1 /* Answer the following: Please provide the name of the team with the highest build up play speed. team's name refers to team_long_name; the highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Please provide the name of the player with the highest potential. player's name refers to player_name; the highest potential refers to MAX(potential) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.potential DESC LIMIT 1 /* Answer the following: Please provide the name of the team with the highest defence pressure. team's name refers to team_long_name; the highest defence pressure refers to MAX(defencePressure) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defencePressure DESC LIMIT 1
SELECT player_name FROM Player WHERE player_api_id = ( SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1 )
SELECT CAST(SUM(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id /* Answer the following: What is the percentage of matches where the home team scored more than 3 goals? percentage refers to DIVIDE(COUNT(home_team_goal > 3), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN home_team_goal > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM Match /* Answer the following: What is the percentage of teams that have a build up play speed of over 60? percentage refers to DIVIDE(COUNT(buildUpPlaySpeed > 60), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN buildUpPlaySpeed > 60 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM Team_Attributes /* Answer the following: What is the percentage of players who have a sprint speed of over 80 and are over 200 cm tall? percentage refers to DIVIDE(COUNT(sprint_speed > 80 AND height > 200), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN T1.height > 200 AND T2.sprint_speed > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id /* Answer the following: What is the percentage of leagues where the majority of matches had more than 2 goals scored? percentage refers to DIVIDE(COUNT(AVG(home_team_goal + away_team_goal) > 2), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN AVG(home_team_goal + away_team_goal) > 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT league_id) FROM Match /* Answer the following: What is the percentage of countries where the majority of teams have a build up play speed of over 60? percentage refers to DIVIDE(COUNT(AVG(buildUpPlaySpeed) > 60), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN AVG(T2.buildUpPlaySpeed) > 60 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.id) FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id INNER JOIN Match AS T3 ON T2.id = T3.league_id INNER JOIN Team AS T4 ON T3.home_team_api_id = T4.team_api_id INNER JOIN Team_Attributes AS T5 ON T4.team_api_id = T5.team_api_id
SELECT SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) AS InPatient, SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END) AS OutPatient, (SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END)) * 100 / COUNT(ID) AS Deviation FROM Patient
SELECT CAST(SUM(CASE WHEN strftime('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE SEX = 'F'
SELECT (COUNT(DISTINCT CASE WHEN Admission = '+' THEN ID END) * 100.0 / COUNT(DISTINCT ID)) AS percentage FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940'
SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS ratio FROM Patient WHERE Diagnosis = 'SLE'
SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609
SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.ID = '163109'
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500
SELECT ID, YEAR(CURRENT_TIMESTAMP) - YEAR(Birthday) AS age FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE RVVT = '+'
SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2
SELECT DISTINCT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE YEAR(P.Birthday) = 1937 AND L.`T-CHO` >= 250
SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5
SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
SELECT AVG(T1.`aCL IgG`) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', T2.Birthday)) >= 50
SELECT COUNT(T1.ID) FROM Patient AS T1 WHERE T1.SEX = 'F' AND STRFTIME('%Y', T1.Description) = '1997' AND T1.Admission = '-'
SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.`Examination Date`) = '1997' AND T1.SEX = 'F' AND T2.Thrombosis = 1
SELECT MAX(STRFTIME('%Y', T1.Birthday)) - MIN(STRFTIME('%Y', T1.Birthday)) AS AgeGap FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200
SELECT T1.Symptoms, T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID ORDER BY T2.Birthday DESC LIMIT 1
SELECT CAST(COUNT(DISTINCT T2.ID) AS REAL) / 12 FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1998-01-01' AND '1998-12-31' AND T2.SEX = 'M'
SELECT MAX(T2.Date), STRFTIME('%Y', T1.`First Date`) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' ORDER BY T1.Birthday LIMIT 1
SELECT CAST(SUM(CASE WHEN P.SEX = 'M' AND L.UA > 8.0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN P.SEX = 'F' AND L.UA > 6.5 THEN 1 ELSE 0 END) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 LEFT JOIN Examination AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.`Examination Date`) - strftime('%Y', T1.`First Date`) >= 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND strftime('%Y', T1.Birthday) > strftime('%Y', T2.`Examination Date`) - 18
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-BIL` > 2.0
SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1
SELECT AVG(strftime('%Y', '1991-10-01') - strftime('%Y', Birthday)) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE Date BETWEEN '1991-10-01' AND '1991-10-31')
SELECT STRFTIME('%Y', T1.`Examination Date`) - STRFTIME('%Y', T2.Birthday) AS Age, T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.HGB = (SELECT MAX(HGB) FROM Laboratory) LIMIT 1
SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'
SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Above Normal' END AS `Cholesterol Status` FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'
SELECT T2.SEX FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'AORTITIS' ORDER BY T1.`Examination Date` ASC LIMIT 1
SELECT T2.`aCL IgM` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T1.Description = '1994-02-19' AND T2.`Examination Date` = '1993-11-12'
SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9 AND T2.Date = '1992-06-12'
SELECT '1991' - STRFTIME('%Y', T2.Birthday) AS age FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.UA = 8.4 AND STRFTIME('%Y-%m-%d', T1.Date) = '1991-10-21'
SELECT COUNT(T2.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` = '1991-06-13' AND T1.Diagnosis = 'SJS' AND STRFTIME('%Y', T2.Date) = '1995'
SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` = '1997-01-27' AND T1.Diagnosis = 'SLE' AND T2.`First Date` = ( SELECT MIN(`First Date`) FROM Patient WHERE ID = T2.ID )
SELECT T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-03-01' AND T1.`Examination Date` = '1993-09-27'
SELECT CAST((SUM(CASE WHEN strftime('%m', T2.Date) = '11' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN strftime('%m', T2.Date) = '12' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN strftime('%m', T2.Date) = '11' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18' AND strftime('%Y', T2.Date) = '1981'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Behcet' AND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1997' AND '1997'
SELECT DISTINCT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND T2.GPT > 30 AND T2.ALB < 4
SELECT ID FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Birthday) = '1964' AND Admission = '+'
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2 AND T1.`ANA Pattern` = 'S' AND T1.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination)
SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE NULL END) FROM Laboratory
SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND strftime('%Y-%m', T2.Date) = '1991-10' AND T2.`T-BIL` < 2.0
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND T1.SEX = 'F' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989'
SELECT T2.SEX FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID WHERE T1.Diagnosis = 'PSS' AND T3.CRP > 2 AND T3.CRE = 1 AND T3.LDH = 123
SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.PLT > 400 AND T1.Diagnosis = 'SLE'
SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the average age of patients with SLE disease? 'SLE' refers to diagnosis; age refers to the difference between the current date and the birthday */ SELECT AVG(DATE('now') - Birthday) FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'SLE') /* Answer the following: What is the gender distribution of patients with SLE disease? 'SLE' refers to diagnosis; gender distribution refers to COUNT(SEX) */ SELECT SEX, COUNT(*) FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'SLE') GROUP BY SEX /* Answer the following: What is the most common laboratory result for patients with SLE disease? 'SLE' refers to diagnosis; the most common laboratory result refers to the mode of each column in the Laboratory table */ SELECT (SELECT MODE(GOT) FROM Laboratory WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'SLE')) AS GOT_MODE, (SELECT MODE(GPT) FROM Laboratory WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'SLE')) AS GPT_MODE, ... (repeat for each column in the Laboratory table) /* Answer the following: What is the average time between the first date and the examination date for patients with SLE disease? 'SLE' refers to diagnosis; the average time refers to AVG(`Examination Date` - `First Date`) */ SELECT AVG(`Examination Date` - `First Date`) FROM Examination WHERE ID IN (SELECT ID FROM Patient WHERE Diagnosis = 'SLE')
SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.Diagnosis = 'APS'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.Date) = '1997' AND (T2.TP < 6 OR T2.TP > 8.5)
SELECT CAST(SUM(CASE WHEN T1.Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Symptoms LIKE '%thrombocytopenia%'
SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(SEX) FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`Examination Date` BETWEEN '1995' AND '1997' AND T2.Diagnosis = 'BEHCET' AND T1.Admission = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5
SELECT DATEDIFF(`Examination Date`, `First Date`) AS days FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 821298 ORDER BY `Examination Date` LIMIT 1
SELECT CASE WHEN T1.SEX = 'M' AND T2.UA > 8.0 THEN 'Yes' WHEN T1.SEX = 'F' AND T2.UA > 6.5 THEN 'Yes' ELSE 'No' END AS 'Is_Uric_Acid_Normal' FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266
SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60
SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1994' AND T2.GOT < 60
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500
SELECT Patient.ID, YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday) AS Age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH BETWEEN 600 AND 800
SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300
SELECT T1.ID, CASE WHEN T2.ALP < 300 THEN 'Yes' ELSE 'No' END AS ALP_Normal_Range FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'
SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0
SELECT T1.ID, T2.TP - 8.5 AS Deviation FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5
SELECT T1.ID, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB < 3.5 OR T2.ALB > 5.5) ORDER BY T1.Birthday DESC
SELECT T1.ID, CASE WHEN T2.ALB BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END AS Albumin_Level FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) = '1982'
SELECT CAST(COUNT(T1.ID) AS REAL) * 100 / ( SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' ) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5
SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T1.SEX = 'M' AND T2.UA < 8.0) OR (T1.SEX = 'F' AND T2.UA < 6.5) AND T2.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = T1.ID)
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'RA' AND T2.UN < 30
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5
SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory )
SELECT T2.SEX, COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`T-BIL` >= 2.0 GROUP BY T2.SEX
SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T1.Birthday, T2.`T-CHO` DESC LIMIT 1
SELECT CAST(SUM(strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) AS REAL) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-CHO` >= 250
SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) > 50
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.CPK < 250
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250
SELECT T1.ID, T1.SEX, YEAR(CURRENT_TIMESTAMP) - YEAR(T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250
SELECT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU < 180 AND STRFTIME('%Y', T1.Description) >= '1991'
SELECT T2.ID, T2.SEX, T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.WBC <= 3.5 OR T1.WBC >= 9.0 GROUP BY T2.SEX ORDER BY T2.Birthday ASC
SELECT T1.ID, T1.Diagnosis, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5
SELECT P.ID, P.SEX, P.Admission, L.RBC FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50 AND (L.RBC <= 3.5 OR L.RBC >= 6.0)
SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.HGB < 10
SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB BETWEEN 10 AND 17 ORDER BY T1.Birthday ASC LIMIT 1
SELECT T1.ID, YEAR(CURRENT_TIMESTAMP) - YEAR(T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT >= 52 GROUP BY T1.ID HAVING COUNT(T2.ID) >= 2
SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29
SELECT SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS LowerThanNormal, SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS HigherThanNormal, SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS Difference FROM Laboratory WHERE PLT IS NOT NULL
SELECT T2.ID, T2.SEX, T2.Birthday, T2.Description, T2.`First Date`, T2.Admission, T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Date) = '1984' AND (strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', T2.Birthday)) < 50 AND T1.PLT BETWEEN 100 AND 400
SELECT CAST(SUM(CASE WHEN T1.PT >= 14 AND T2.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.PT >= 14 THEN 1 ELSE 0 END) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE (strftime('%Y', 'now') - strftime('%Y', T2.Birthday)) > 55
SELECT T1.ID, T1.SEX, T1.Birthday, T1.Description, T1.`First Date`, T1.Admission, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE YEAR(T1.`First Date`) > 1992 AND T2.PT < 14
SELECT COUNT(ID) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT < 45
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.APTT > 45 AND T2.Thrombosis = 3
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC BETWEEN 3.5 AND 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1980-01-01' AND (T2.FG < 150 OR T2.FG > 450)
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` BETWEEN 0 AND 30 AND T1.Diagnosis = 'SLE'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.IGG < 900 AND T2.Symptoms = 'abortion'
SELECT COUNT(DISTINCT T2.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.IGG BETWEEN 900 AND 2000 AND T2.Symptoms IS NOT NULL
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.IGA BETWEEN 80 AND 500 ORDER BY T1.IGA DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND strftime('%Y', T1.`First Date`) >= '1990'
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.IGM NOT BETWEEN 40 AND 400 GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1
SELECT COUNT(ID) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE (CRP LIKE '+' OR CRP LIKE '-' OR CRP < 1.0)) AND Description IS NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP NOT IN('+-', '-') AND T2.CRP >= 1.0 AND (YEAR(CURDATE()) - YEAR(T1.Birthday)) < 18
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.RA IN('-', '+-') AND T2.KCT = '+'
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) >= '1995' AND T2.RA IN ('-', '+-')
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND (STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday)) > 60
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.RF < 20 AND T3.Thrombosis = 0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.C3 > 35 AND T3.`ANA Pattern` = 'P'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.HCT < 29 OR T3.HCT > 52 ORDER BY T2.`aCL IgA` DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'APS' AND T2.C4 > 10
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP IN ('-', '+-') AND T1.Admission = '+';
SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP NOT IN('-', '+-') ORDER BY T1.Birthday DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SM IN ('-', '+-') AND T2.Thrombosis = 1
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN('-', '+-') ORDER BY T1.Birthday DESC LIMIT 3;
SELECT ID FROM Examination WHERE `Examination Date` >= '1997-01-01' AND SC170 IN('-', '+-')
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SC170 IN('-', '+-') AND T1.SEX = 'M' AND T2.Symptoms = 'vertigo'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN('-', '+-') AND STRFTIME('%Y', T1.`First Date`) < '1990'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA NOT IN('-', '+-') ORDER BY T1.`First Date` ASC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SSB IN('negative', '0') AND T2.Diagnosis = 'SLE'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SSB IN('-', '+-') AND T2.Symptoms IS NOT NULL
SELECT COUNT(T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.CENTROMEA IN('-', '+-') AND T1.SSB IN('-', '+-') AND T2.SEX = 'M'
SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`DNA-II` >= 8 AND T1.Admission = '+'
SELECT CAST(SUM(CASE WHEN T1.GOT >= 60 AND T2.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GOT >= 60
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60
SELECT MAX(Birthday) FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE GOT >= 60 )
SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3
SELECT COUNT(DISTINCT T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GOT < 60 AND T2.SEX = 'M'
SELECT MIN(`First Date`) FROM Patient WHERE ID = ( SELECT ID FROM Laboratory WHERE LDH = ( SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500 ) )
SELECT ID, MAX(`First Date`) FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE LDH >= 500 )
SELECT COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ALP >= 300 AND T2.Admission = '+'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5
SELECT T1.`Examination Date` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB BETWEEN 3.5 AND 5.5 ORDER BY T2.ALB DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB >= 3.5 AND T2.ALB <= 5.5 AND T2.TP >= 6.0 AND T2.TP <= 8.5
SELECT T2.`aCL IgG`, T2.`aCL IgM`, T2.`aCL IgA` FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.UA <= 7.2 AND T1.UA >= 3.7 AND T1.ID IN (SELECT ID FROM Patient WHERE SEX = 'F') ORDER BY T1.UA DESC LIMIT 1
SELECT MAX(T1.ANA) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CRE < 1.5 ORDER BY T3.`aCL IgA` DESC LIMIT 1
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2.0 AND T3.`ANA Pattern` LIKE '%P%'
SELECT T1.ANA FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0 ) LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` >= 250 AND T3.KCT = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` < 250 AND T3.`ANA Pattern` = 'P'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.TG < 200 AND T3.Symptoms IS NOT NULL
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.TG < 200 ORDER BY T1.TG DESC LIMIT 1 /* Answer the following: What is the sex of the patient who has the highest level of glucose? sex refers to SEX; highest level of glucose refers to MAX(GLU); */ SELECT T2.SEX FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID ORDER BY T1.GLU DESC LIMIT 1 /* Answer the following: What is the description of the patient who has the highest level of white blood cells? description refers to Description; highest level of white blood cells refers to MAX(WBC); */ SELECT T2.Description FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID ORDER BY T1.WBC DESC LIMIT 1 /* Answer the following: What is the diagnosis of the patient who has the highest level of red blood cells? diagnosis refers to Diagnosis; highest level of red blood cells refers to MAX(RBC); */ SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID ORDER BY T1.RBC DESC LIMIT 1 /* Answer the following: What is the admission date of the patient who has the highest level of hemoglobin? admission date refers to Admission; highest level of hemoglobin refers to MAX(HGB); */ SELECT T2.Admission FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID ORDER BY T1.HGB DESC LIMIT 1 /* Answer the following: What is the first date of the patient who has the highest level of platelets? first date refers to `First Date`; highest level of platelets refers to MAX(PLT); */ SELECT T2.`First Date` FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID ORDER BY T1.PLT DESC LIMIT 1
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Thrombosis = 0 AND T3.CPK < 250
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CPK < 250 AND (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+')
SELECT T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GLU > 180 ORDER BY T2.Birthday ASC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND T1.Admission = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL
SELECT T1.ID, T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis = 'MCTD'
SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.PT < 14
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis IN (1, 2) AND T2.PT < 14
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'
SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design'
SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = "Women's Soccer"
SELECT T2.phone FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = "Women's Soccer"
SELECT COUNT(*) FROM "attendance" AS T1 INNER JOIN "event" AS T2 ON T1.link_to_event = T2.event_id INNER JOIN "member" AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id ORDER BY COUNT(T2.link_to_member) DESC LIMIT 1 /* Answer the following: What is the total income of the Student_Club? total income refers to SUM(income.amount) */ SELECT SUM(amount) AS total_income FROM income /* Answer the following: What is the total expense of the Student_Club? total expense refers to SUM(expense.cost) */ SELECT SUM(cost) AS total_expense FROM expense /* Answer the following: What is the net income of the Student_Club? net income refers to SUM(income.amount) - SUM(expense.cost) */ SELECT (SELECT SUM(amount) FROM income) - (SELECT SUM(cost) FROM expense) AS net_income /* Answer the following: Which member has the highest income contribution to the Student_Club? highest income contribution refers to MAX(SUM(income.amount)) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY SUM(T2.amount) DESC LIMIT 1 /* Answer the following: Which member has the highest expense in the Student_Club? highest expense refers to MAX(SUM(expense.cost)) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY SUM(T2.cost) DESC LIMIT 1 /* Answer the following: What is the most common major among the members of the Student_Club? most common major refers to MAX(COUNT(member.link_to_major)) */ SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.major_id ORDER BY COUNT(T2.link_to_major) DESC LIMIT 1 /* Answer the following: What is the most common zip code among the members of the Student_Club? most common zip code refers to MAX(COUNT(member.zip)) */ SELECT T1.zip_code FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip GROUP BY T1.zip_code ORDER BY COUNT(T2.zip) DESC LIMIT 1 /* Answer the following: What is the most common position among the members of the Student_Club? most common position refers to MAX(COUNT(member.position)) */ SELECT position FROM member GROUP BY position ORDER BY COUNT(position) DESC LIMIT 1 /* Answer the following: What is the most common t-shirt size among the members of the Student_Club? most common t-shirt size refers to MAX(COUNT(member.t_shirt_size)) */ SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'
SELECT COUNT(*) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Student_Club' AND STRFTIME('%Y', T1.event_date) = '2019' AND T3.first_name = 'Sacha' AND T3.last_name = 'Harrison'
SELECT COUNT(*) FROM ( SELECT T1.event_id FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' GROUP BY T1.link_to_event HAVING COUNT(T1.link_to_member) > 10 ) T3
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 20 /* Answer the following: List the names of all members who have spent more than $500 on expenses. names of members refers to first_name and last_name; spent more than $500 refers to SUM(cost) > 500 */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING SUM(T2.cost) > 500 /* Answer the following: List the names of all members who have a remaining budget of less than $100. names of members refers to first_name and last_name; remaining budget of less than $100 refers to remaining < 100 */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event WHERE T2.remaining < 100 /* Answer the following: List the names of all members who live in the state of California. names of members refers to first_name and last_name; state of California refers to state = 'CA' */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'CA' /* Answer the following: List the names of all members who are majoring in Computer Science. names of members refers to first_name and last_name; majoring in Computer Science refers to major_name = 'Computer Science' */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Computer Science'
SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T1.event_name) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' AND STRFTIME('%Y', T1.event_date) = '2020'
SELECT expense_description FROM expense WHERE cost = ( SELECT MAX(cost) FROM expense )
SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT T3.first_name, T3.last_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Laugh Out Loud'
SELECT last_name FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies' )
SELECT county FROM zip_code WHERE zip_code = ( SELECT zip FROM member WHERE first_name = 'Sherri' AND last_name = 'Ramsey' ) /* Answer the following: How much was spent on the "Food" category for the "Annual Picnic" event? */ SELECT spent FROM budget WHERE category = 'Food' AND link_to_event = ( SELECT event_id FROM event WHERE event_name = 'Annual Picnic' ) /* Answer the following: Who approved the expense for "DJ Services"? */ SELECT first_name, last_name FROM member WHERE member_id = ( SELECT link_to_member FROM expense WHERE expense_description = 'DJ Services' ) /* Answer the following: How many members attended the "Career Fair" event? */ SELECT COUNT(link_to_member) FROM attendance WHERE link_to_event = ( SELECT event_id FROM event WHERE event_name = 'Career Fair' ) /* Answer the following: What is the total income received from "Sponsorship" source? */ SELECT SUM(amount) FROM income WHERE source = 'Sponsorship' /* Answer the following: Which members are from the "Computer Science" major? */ SELECT first_name, last_name FROM member WHERE link_to_major = ( SELECT major_id FROM major WHERE major_name = 'Computer Science' )
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'
SELECT SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President' /* Answer the following: How much money did the club spend on the event named 'Spring Festival'? 'Spring Festival' is an event name; money spent refers to cost; */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Spring Festival' /* Answer the following: How many members from the 'Computer Science' department attended the 'Spring Festival'? 'Computer Science' is a department; 'Spring Festival' is an event name; */ SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id INNER JOIN major AS T4 ON T3.link_to_major = T4.major_id WHERE T2.event_name = 'Spring Festival' AND T4.department = 'Computer Science' /* Answer the following: What is the total budget for the events held in 'Los Angeles'? 'Los Angeles' is a city; total budget refers to amount; */ SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN zip_code AS T3 ON T2.location = T3.zip_code WHERE T3.city = 'Los Angeles' /* Answer the following: Who is the member that has the highest income? highest income refers to MAX(amount); */ SELECT T2.first_name, T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id GROUP BY T2.first_name, T2.last_name ORDER BY SUM(T1.amount) DESC LIMIT 1 /* Answer the following: What is the total expense for the events that are 'Completed'? 'Completed' is a status of event; total expense refers to cost; */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Completed'
SELECT T1.spent FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food' AND T2.event_name = 'September Meeting'
SELECT T3.city, T3.state FROM member AS T1 INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T1.position = 'President'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'
SELECT T1.spent FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'September Meeting'
SELECT T1.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.last_name = 'Pierce' OR T2.last_name = 'Guidi'
SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'
SELECT T2.expense_description, T2.approved FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Meeting' AND T1.event_date = '2019-10-08'
SELECT AVG(cost) FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen') AND (STRFTIME('%m', expense_date) = '09' OR STRFTIME('%m', expense_date) = '10')
SELECT SUM(CASE WHEN strftime('%Y', T2.event_date) = '2020' THEN T1.spent ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.event_date) = '2019' THEN T1.spent ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id
SELECT location FROM event WHERE event_name = 'Spring Budget Review' /* Answer the following: List all members who attended the event with event_id 'E001'. 'E001' is an event_id; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T2.link_to_event = 'E001' /* Answer the following: What is the total cost of expenses approved for budget_id 'B001'? 'B001' is a budget_id; */ SELECT SUM(cost) FROM expense WHERE link_to_budget = 'B001' AND approved = 'Yes' /* Answer the following: List all income sources and amounts received by member with member_id 'M001'. 'M001' is a member_id; */ SELECT source, amount FROM income WHERE link_to_member = 'M001' /* Answer the following: What is the major and college of member with member_id 'M002'? 'M002' is a member_id; */ SELECT T2.major_name, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.member_id = 'M002' /* Answer the following: What is the city and state of member with member_id 'M003'? 'M003' is a member_id; */ SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.member_id = 'M003'
SELECT T1.cost FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Posters' AND T2.event_date = '2019-09-04'
SELECT remaining FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1 /* Answer the following: Who is the member with the highest income? highest income refers to MAX(income.amount) */ SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, SUM(T2.amount) AS total_income FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.total_income DESC LIMIT 1 /* Answer the following: What is the event with the highest expense? highest expense refers to MAX(expense.cost) */ SELECT T.event_name FROM ( SELECT T1.event_name, SUM(T2.cost) AS total_expense FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ) AS T ORDER BY T.total_expense DESC LIMIT 1 /* Answer the following: What is the major of the member who attended the most events? most events refers to MAX(COUNT(attendance.link_to_event)) */ SELECT T3.major_name FROM ( SELECT T1.link_to_major, COUNT(T2.link_to_event) AS num_events FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.link_to_major ) AS T INNER JOIN major AS T3 ON T.link_to_major = T3.major_id ORDER BY T.num_events DESC LIMIT 1 /* Answer the following: What is the zip code of the member who has the highest position? highest position refers to position = 'President' */ SELECT zip FROM member WHERE position = 'President'
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'
SELECT COUNT(major_id) FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'
SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'
SELECT COUNT(*) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0;
SELECT SUM(amount) FROM budget WHERE link_to_event = ( SELECT event_id FROM event WHERE event_name = 'September Speaker' )
SELECT T3.status FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.expense_description = 'Post Cards, Posters' AND T1.expense_date = '2019-8-20'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development and Family Studies' AND T1.t_shirt_size = 'Large'
SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'
SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.source = 'Dues' /* Answer the following: What is the total amount of expenses approved for the event named 'Spring Festival'? */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Spring Festival' AND T1.approved = 'Yes' /* Answer the following: How many members are from the zip code 94107? */ SELECT COUNT(*) FROM member WHERE zip = 94107 /* Answer the following: What is the remaining budget for the event named 'Summer Camp'? */ SELECT T1.remaining FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Summer Camp' /* Answer the following: Who is the member with the position 'President'? */ SELECT first_name, last_name FROM member WHERE position = 'President' /* Answer the following: What is the total income received from 'Sponsorship'? */ SELECT SUM(amount) FROM income WHERE source = 'Sponsorship' /* Answer the following: What is the major of the member named 'John Doe'? */ SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'John' AND T1.last_name = 'Doe' /* Answer the following: How many members attended the event named 'Winter Gala'? */ SELECT COUNT(*) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Winter Gala' /* Answer the following: What is the total cost of expenses for the event named 'Fall Festival'? */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Fall Festival' /* Answer the following: What is the total amount of income received from 'Donations'? */ SELECT SUM(amount) FROM income WHERE source = 'Donations'
SELECT T2.first_name, T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.source = 'Dues' ORDER BY T1.date_received ASC LIMIT 1 /* Answer the following: What is the total amount of budget spent on events? total amount refers to SUM(spent) */ SELECT SUM(spent) FROM budget /* Answer the following: Who is the member with the most expenses? Include the full name. most expenses refers to MAX(cost); full name refers to first_name, last_name */ SELECT T2.first_name, T2.last_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id GROUP BY T2.first_name, T2.last_name ORDER BY SUM(T1.cost) DESC LIMIT 1 /* Answer the following: What is the total income received from 'Sponsorship'? total income refers to SUM(amount) where source = 'Sponsorship' */ SELECT SUM(amount) FROM income WHERE source = 'Sponsorship' /* Answer the following: What is the most common major among the members? most common major refers to MAX(COUNT(major_id)) */ SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_name ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the total remaining budget for events that are 'Pending'? total remaining budget refers to SUM(remaining) where event_status = 'Pending' */ SELECT SUM(remaining) FROM budget WHERE event_status = 'Pending'
SELECT CAST(SUM(CASE WHEN T2.category = 'Advertisement' AND T1.event_name = 'Yearly Kickoff' THEN T2.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.category = 'Advertisement' AND T1.event_name = 'October Meeting' THEN T2.amount ELSE 0 END) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event
SELECT CAST(SUM(CASE WHEN T2.category = 'Parking' THEN T2.amount ELSE 0 END) AS REAL) * 100 / SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'November Speaker'
SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'
SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'
SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining ASC LIMIT 1 /* Answer the following: What is the name of the member who has the lowest income? lowest income refers to MIN(amount); */ SELECT T2.first_name, T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id ORDER BY T1.amount ASC LIMIT 1 /* Answer the following: What is the name of the event with the lowest budget? lowest budget refers to MIN(amount); */ SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount ASC LIMIT 1 /* Answer the following: What is the name of the major with the least number of members? least number of members refers to COUNT(member_id); */ SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_name ORDER BY COUNT(T1.member_id) ASC LIMIT 1 /* Answer the following: What is the name of the event with the least number of attendees? least number of attendees refers to COUNT(link_to_member); */ SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id GROUP BY T2.event_name ORDER BY COUNT(T1.link_to_member) ASC LIMIT 1 /* Answer the following: What is the name of the city with the least number of members? least number of members refers to COUNT(member_id); */ SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code GROUP BY T2.city ORDER BY COUNT(T1.member_id) ASC LIMIT 1
SELECT T2.first_name, T2.last_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'
SELECT T.college FROM ( SELECT T2.college, COUNT(T1.member_id) AS num FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.college ) T ORDER BY T.num DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount) */ SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1 /* Answer the following: Who is the member with the highest income? highest income refers to MAX(income.amount) */ SELECT T2.first_name, T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id ORDER BY T1.amount DESC LIMIT 1 /* Answer the following: Which event has the most attendees? most attendees refers to MAX(COUNT(attendance.link_to_event)) */ SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id GROUP BY T2.event_name ORDER BY COUNT(T1.link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most expenses? most expenses refers to MAX(COUNT(expense.link_to_member)) */ SELECT T2.first_name, T2.last_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id GROUP BY T2.member_id ORDER BY COUNT(T1.link_to_member) DESC LIMIT 1 /* Answer the following: Which event has the most expenses? most expenses refers to MAX(COUNT(expense.link_to_budget)) where budget.link_to_event = event.event_id */ SELECT T3.event_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id GROUP BY T3.event_id ORDER BY COUNT(T1.link_to_budget) DESC LIMIT 1 /* Answer the following: Which member has attended the most events? most events attended refers to MAX(COUNT(attendance.link_to_member)) */ SELECT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id GROUP BY T2.member_id ORDER BY COUNT(T1.link_to_member) DESC LIMIT 1 /* Answer the following: Which event has the most income? most income refers to MAX(COUNT(income.link_to_member)) where member.link_to_major = major.major_id and major.college = 'event' */ SELECT T3.event_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T2.link_to_major = T3.event_id GROUP BY T3.event_id ORDER BY COUNT(T1.link_to_member) DESC LIMIT 1
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Who is the member with the highest income? member refers to first_name and last_name; highest income refers to MAX(amount) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: What is the most expensive expense? most expensive expense refers to MAX(cost); expense refers to expense_description */ SELECT T1.expense_description FROM expense AS T1 ORDER BY T1.cost DESC LIMIT 1 /* Answer the following: Which major has the most members? major refers to major_name; most members refers to COUNT(member_id) */ SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.major_name ORDER BY COUNT(T2.member_id) DESC LIMIT 1 /* Answer the following: Which zip code has the most members? zip code refers to zip; most members refers to COUNT(member_id) */ SELECT T1.zip FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip GROUP BY T1.zip ORDER BY COUNT(T2.member_id) DESC LIMIT 1 /* Answer the following: Which event has the most attendees? event refers to event_name; most attendees refers to COUNT(link_to_member) */ SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_member) DESC LIMIT 1 /* Answer the following: Which event has the most remaining budget? event refers to event_name; most remaining budget refers to MAX(remaining) */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.remaining DESC LIMIT 1 /* Answer the following: Which member has the most expenses? member refers to first_name and last_name; most expenses refers to COUNT(expense_id) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(T2.expense_id) DESC LIMIT 1
SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'
SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women's Soccer' /* Answer the following: How much was the total expense for the "Music Festival" event? 'Music Festival' is the event name; */ SELECT SUM(T2.cost) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T1.event_name = 'Music Festival' /* Answer the following: How many members are from the zip code 12345? 12345 is the zip code; */ SELECT COUNT(*) FROM member WHERE zip = 12345 /* Answer the following: How much income was received from the source "Ticket Sales"? 'Ticket Sales' is the source; */ SELECT SUM(amount) FROM income WHERE source = 'Ticket Sales' /* Answer the following: How many members are majoring in "Computer Science"? 'Computer Science' is the major_name; */ SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Computer Science' /* Answer the following: How many events were held in the location "City Park"? 'City Park' is the location; */ SELECT COUNT(*) FROM event WHERE location = 'City Park' /* Answer the following: How much budget is remaining for the "Art Exhibition" event? 'Art Exhibition' is the event name; */ SELECT T2.remaining FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Art Exhibition' /* Answer the following: How many members have the position "President"? 'President' is the position; */ SELECT COUNT(*) FROM member WHERE position = 'President' /* Answer the following: How many events are of the type "Fundraiser"? 'Fundraiser' is the type; */ SELECT COUNT(*) FROM event WHERE type = 'Fundraiser' /* Answer the following: How many members are in the "Engineering" department? 'Engineering' is the department; */ SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.department = 'Engineering'
SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason'
SELECT COUNT(DISTINCT T1.member_id) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland'
SELECT COUNT(link_to_event) FROM attendance WHERE link_to_member = ( SELECT member_id FROM member WHERE phone = '954-555-6240' )
SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.department = 'School of Applied Sciences, Technology and Education'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' ORDER BY (T2.spent / T2.amount) DESC LIMIT 1 /* Answer the following: Please list the full names of all the members who have attended the event with the highest spend-to-budget ratio. full name refers to first_name, last_name; highest spend-to-budget ratio refers to MAX(DIVIDE(spent, amount)) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id INNER JOIN budget AS T4 ON T3.event_id = T4.link_to_event ORDER BY (T4.spent / T4.amount) DESC LIMIT 1 /* Answer the following: Please list the full names of all the members who have contributed to the income of the event with the highest spend-to-budget ratio. full name refers to first_name, last_name; highest spend-to-budget ratio refers to MAX(DIVIDE(spent, amount)) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id INNER JOIN budget AS T4 ON T3.event_id = T4.link_to_event ORDER BY (T4.spent / T4.amount) DESC LIMIT 1 /* Answer the following: Please list the full names of all the members who have approved the expenses of the event with the highest spend-to-budget ratio. full name refers to first_name, last_name; highest spend-to-budget ratio refers to MAX(DIVIDE(spent, amount)) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id INNER JOIN budget AS T4 ON T3.event_id = T4.link_to_event ORDER BY (T4.spent / T4.amount) DESC LIMIT 1 /* Answer the following: Please list the full names of all the members who live in the same zip code as the member who has approved the most expenses. full name refers to first_name, last_name; the most expenses refers to MAX(count(expense_id)) */ SELECT T1.first_name, T1.last_name FROM member AS T1 WHERE T1.zip = ( SELECT T2.zip FROM member AS T2 INNER JOIN expense AS T3 ON T2.member_id = T3.link_to_member GROUP BY T2.member_id ORDER BY COUNT(T3.expense_id) DESC LIMIT 1 )
SELECT COUNT(member_id) FROM member WHERE position = 'President'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.spent DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(amount) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(cost) */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has attended the most events? most events refers to COUNT(link_to_event) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1 /* Answer the following: Which major has the most members? most members refers to COUNT(link_to_major) */ SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.major_id ORDER BY COUNT(T2.link_to_major) DESC LIMIT 1 /* Answer the following: Which zip code has the most members? most members refers to COUNT(zip) */ SELECT T1.zip_code FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip GROUP BY T1.zip_code ORDER BY COUNT(T2.zip) DESC LIMIT 1
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND STRFTIME('%Y', event_date) = '2020'
SELECT SUM(spent) FROM budget WHERE category = 'Food'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(T2.link_to_event) > 7
SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN major AS T3 ON T3.major_id = T4.link_to_major INNER JOIN member AS T4 ON T4.member_id = T2.link_to_member WHERE T1.event_name = 'Community Theater' AND T3.major_name = 'Interior Design'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'
SELECT SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Grant' AND T2.last_name = 'Gilmour'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40
SELECT SUM(cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Yearly Kickoff' /* Answer the following: How many members attended the event 'Baseball game'? 'Baseball game' is an event name; number of members refers to COUNT(link_to_member) */ SELECT COUNT(link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Baseball game' /* Answer the following: What is the total income from the source 'Donation'? 'Donation' is a source; total income refers to SUM(amount) */ SELECT SUM(amount) FROM income WHERE source = 'Donation' /* Answer the following: What is the remaining budget for the event 'Yearly Kickoff'? 'Yearly Kickoff' is an event name; remaining budget refers to remaining */ SELECT remaining FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Yearly Kickoff' /* Answer the following: How many members are from the zip code 12345? 12345 is a zip code; number of members refers to COUNT(member_id) */ SELECT COUNT(member_id) FROM member WHERE zip = 12345 /* Answer the following: What is the total expense for the event 'Baseball game' approved by the member 'John Doe'? 'Baseball game' is an event name; 'John Doe' is a member name; total expense refers to SUM(cost) */ SELECT SUM(cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Baseball game' AND T3.first_name = 'John' AND T3.last_name = 'Doe'
SELECT T2.first_name, T2.last_name FROM budget AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff'
SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest budget? State the event name along with the budget amount. event name refers to event_name; highest budget refers to MAX(budget.amount); */ SELECT T1.event_name, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest expense? State his/her full name along with the expense description. full name refers to first_name, last_name; highest expense refers to MAX(expense.cost); */ SELECT T1.first_name, T1.last_name, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest attendance? State the event name along with the number of attendees. event name refers to event_name; highest attendance refers to MAX(COUNT(attendance.link_to_member)); */ SELECT T1.event_name, COUNT(T2.link_to_member) AS attendees FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY attendees DESC LIMIT 1 /* Answer the following: Which major has the most number of members? State the major name along with the number of members. major name refers to major_name; most number of members refers to MAX(COUNT(member.link_to_major)); */ SELECT T1.major_name, COUNT(T2.link_to_major) AS members FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.major_name ORDER BY members DESC LIMIT 1
SELECT T2.event_name FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.cost ASC LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T2.cost ELSE 0 END) AS REAL) * 100 / SUM(T2.cost) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event
SELECT CAST(SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) FROM major /* Answer the following: What is the ratio between the number of events held in 2019 and 2020? DIVIDE(SUM(event_date LIKE '2019%'), SUM(event_date LIKE '2020%')) */ SELECT CAST(SUM(CASE WHEN event_date LIKE '2019%' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN event_date LIKE '2020%' THEN 1 ELSE 0 END) FROM event /* Answer the following: What is the ratio between the number of members living in California and Texas? DIVIDE(SUM(short_state = 'CA'), SUM(short_state = 'TX')) */ SELECT CAST(SUM(CASE WHEN short_state = 'CA' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN short_state = 'TX' THEN 1 ELSE 0 END) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code /* Answer the following: What is the ratio between the total income received from 'Donation' and 'Sponsorship'? DIVIDE(SUM(amount WHERE source = 'Donation'), SUM(amount WHERE source = 'Sponsorship')) */ SELECT CAST(SUM(CASE WHEN source = 'Donation' THEN amount ELSE 0 END) AS REAL) / SUM(CASE WHEN source = 'Sponsorship' THEN amount ELSE 0 END) FROM income /* Answer the following: What is the ratio between the total expenses approved and not approved? DIVIDE(SUM(cost WHERE approved = 'Yes'), SUM(cost WHERE approved = 'No')) */ SELECT CAST(SUM(CASE WHEN approved = 'Yes' THEN cost ELSE 0 END) AS REAL) / SUM(CASE WHEN approved = 'No' THEN cost ELSE 0 END) FROM expense /* Answer the following: What is the ratio between the total budget spent and remaining? DIVIDE(SUM(spent), SUM(remaining)) */ SELECT CAST(SUM(spent) AS REAL) / SUM(remaining) FROM budget
SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC LIMIT 1
SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'
SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching'
SELECT COUNT(DISTINCT T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND STRFTIME('%Y', T1.event_date) = '2019'
SELECT COUNT(T1.link_to_event), T4.major_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN major AS T4 ON T2.link_to_major = T4.major_id WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'
SELECT AVG(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.spent DESC LIMIT 1
SELECT CASE WHEN EXISTS (SELECT 1 FROM "attendance" AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN "member" AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women's Soccer' AND T3.first_name = 'Maya' AND T3.last_name = 'Mclean') THEN 'Yes' ELSE 'No' END AS attended /* Answer the following: How much was spent on the 'Annual Picnic' event? 'Annual Picnic' is an event name */ SELECT T2.spent FROM event AS T1 INNER JOIN "budget" AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Annual Picnic' /* Answer the following: How many members are from the 'Computer Science' major? 'Computer Science' is a major name */ SELECT COUNT(member_id) FROM "member" WHERE link_to_major = ( SELECT major_id FROM major WHERE major_name = 'Computer Science' ) /* Answer the following: What is the total income from 'Sponsorship' source? 'Sponsorship' is a source name */ SELECT SUM(amount) FROM "income" WHERE source = 'Sponsorship' /* Answer the following: How many members live in 'Los Angeles' city? 'Los Angeles' is a city name */ SELECT COUNT(member_id) FROM "member" WHERE zip = ( SELECT zip_code FROM zip_code WHERE city = 'Los Angeles' )
SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'
SELECT T1.cost FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.expense_description = 'Posters' AND T2.event_name = 'September Speaker'
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: How much money has been spent on each event? */ SELECT link_to_event, SUM(spent) FROM budget GROUP BY link_to_event /* Answer the following: How many members attended each event? */ SELECT link_to_event, COUNT(link_to_member) FROM attendance GROUP BY link_to_event /* Answer the following: What is the total income of the club? */ SELECT SUM(amount) FROM income /* Answer the following: What is the total expense of the club? */ SELECT SUM(cost) FROM expense /* Answer the following: What is the net income of the club? net income refers to total income - total expense */ SELECT (SELECT SUM(amount) FROM income) - (SELECT SUM(cost) FROM expense) AS net_income /* Answer the following: Which event has the highest budget? highest budget refers to MAX(amount) */ SELECT link_to_event FROM budget ORDER BY amount DESC LIMIT 1 /* Answer the following: Which member has contributed the most to the club? most contribution refers to MAX(amount) in income table */ SELECT link_to_member FROM income ORDER BY amount DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(cost) in expense table */ SELECT link_to_member FROM expense ORDER BY cost DESC LIMIT 1 /* Answer the following: Which event has the most attendees? most attendees refers to MAX(COUNT(link_to_member)) */ SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which major has the most members? most members refers to MAX(COUNT(link_to_major)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which zip code has the most members? most members refers to MAX(COUNT(zip)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which event has the most remaining budget? most remaining budget refers to MAX(remaining) */ SELECT link_to_event FROM budget ORDER BY remaining DESC LIMIT 1 /* Answer the following: Which event has the most spent budget? most spent budget refers to MAX(spent) */ SELECT link_to_event FROM budget ORDER BY spent DESC LIMIT 1 /* Answer the following: Which event has the most approved expenses? most approved expenses refers to MAX(COUNT(approved)) where approved = 'Yes' */ SELECT link_to_budget FROM expense WHERE approved = 'Yes' GROUP BY link_to_budget ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which event has the most unapproved expenses? most unapproved expenses refers to MAX(COUNT(approved)) where approved = 'No' */ SELECT link_to_budget FROM expense WHERE approved = 'No' GROUP BY link_to_budget ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most approved expenses? most approved expenses refers to MAX(COUNT(approved)) where approved = 'Yes' */ SELECT link_to_member FROM expense WHERE approved = 'Yes' GROUP BY link_to_member ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most unapproved expenses? most unapproved expenses refers to MAX(COUNT(approved)) where approved = 'No' */ SELECT link_to_member FROM expense WHERE approved = 'No' GROUP BY link_to_member ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most income contributions? most income contributions refers to MAX(COUNT(amount)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most income amount? most income amount refers to MAX(SUM(amount)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY SUM(amount) DESC LIMIT 1 /* Answer the following: Which member has the most expense amount? most expense amount refers to MAX(SUM(cost)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY SUM(cost) DESC LIMIT 1 /* Answer the following: Which member has the most expense transactions? most expense transactions refers to MAX(COUNT(expense_id)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most income transactions? most income transactions refers to MAX(COUNT(income_id)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances? most event attendances refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has attended the most unique events? most unique events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in a single event? most event attendances in a single event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to MAX(COUNT(DISTINCT link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(DISTINCT link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in the same event? most event attendances in the same event refers to MAX(COUNT(link_to_event)) where link_to_event is the same */ SELECT link_to_member, link_to_event FROM attendance GROUP BY link_to_member, link_to_event ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances in different events? most event attendances in different events refers to
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.remaining < 0 ORDER BY T2.remaining ASC LIMIT 1
SELECT T2.expense_description, SUM(T2.cost) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Meeting' AND T2.approved = 'Yes' GROUP BY T2.expense_description
SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' ORDER BY T2.amount ASC
SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1
SELECT budget_id, amount FROM budget WHERE category = 'Advertising' ORDER BY amount DESC LIMIT 3 /* Answer the following: Which member has the highest income? highest income refers to MAX(amount) */ SELECT T2.first_name, T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id ORDER BY T1.amount DESC LIMIT 1 /* Answer the following: What are the top 3 events with the most attendance? most attendance refers to MAX(COUNT(link_to_event)) */ SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id GROUP BY T2.event_name ORDER BY COUNT(T1.link_to_event) DESC LIMIT 3 /* Answer the following: Which major has the most members? most members refers to MAX(COUNT(link_to_major)) */ SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_name ORDER BY COUNT(T1.link_to_major) DESC LIMIT 1 /* Answer the following: What is the total cost of all approved expenses? approved expenses refers to approved = 'Yes' */ SELECT SUM(cost) FROM expense WHERE approved = 'Yes' /* Answer the following: Which zip code has the most members? most members refers to MAX(COUNT(zip)) */ SELECT T2.zip_code FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code GROUP BY T2.zip_code ORDER BY COUNT(T1.zip) DESC LIMIT 1 /* Answer the following: What are the top 3 events with the highest budget? highest budget refers to MAX(amount) */ SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 3 /* Answer the following: Which member has the most expenses? most expenses refers to MAX(COUNT(link_to_member)) */ SELECT T2.first_name, T2.last_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id GROUP BY T2.member_id ORDER BY COUNT(T1.link_to_member) DESC LIMIT 1
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'
SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name
SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large'
SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen'
SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'
SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'
SELECT DISTINCT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30 /* Answer the following: List the names of members who have approved expenses. approved expenses refers to approved = 'Yes' */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.approved = 'Yes' /* Answer the following: List the names of members who have received income from 'Donation'. received income from 'Donation' refers to source = 'Donation' */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Donation' /* Answer the following: List the names of members who live in the state of 'California'. live in the state of 'California' refers to state = 'California' */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'California' /* Answer the following: List the names of members who are majoring in 'Computer Science'. majoring in 'Computer Science' refers to major_name = 'Computer Science' */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Computer Science'
SELECT DISTINCT type FROM event WHERE location = 'MU 215'
SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_date = '2020-03-24T12:00:00'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT CAST(SUM(CASE WHEN T1.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member'
SELECT category FROM event WHERE location = 'MU 215'
SELECT COUNT(income_id) FROM income WHERE amount = 50 /* Answer the following: How many members have a zip code of 90210? zip code of 90210 refers to zip = 90210 */ SELECT COUNT(member_id) FROM member WHERE zip = 90210 /* Answer the following: How many events have a status of 'Completed'? status of 'Completed' refers to status = 'Completed' */ SELECT COUNT(event_id) FROM event WHERE status = 'Completed' /* Answer the following: How many expenses have a cost of less than 100? cost of less than 100 refers to cost < 100 */ SELECT COUNT(expense_id) FROM expense WHERE cost < 100 /* Answer the following: How many budgets have a remaining amount of more than 500? remaining amount of more than 500 refers to remaining > 500 */ SELECT COUNT(budget_id) FROM budget WHERE remaining > 500 /* Answer the following: How many members are linked to the major with major_id 'CS'? linked to the major with major_id 'CS' refers to link_to_major = 'CS' */ SELECT COUNT(member_id) FROM member WHERE link_to_major = 'CS'
SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'
SELECT COUNT(major_id) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'
SELECT T1.last_name, T2.department, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T1.type = 'Guest Speaker' AND T2.spent = 0
SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T3.department = 'Electrical and Computer Engineering Department' AND T1.position = 'Member'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Social' AND T3.position = 'Vice President' AND T1.location = '900 E. Washington St.'
SELECT T2.last_name, T2.position FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'
SELECT T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Women's Soccer' AND T2.position = 'Member'
SELECT CAST(COUNT(CASE WHEN T2.amount = 50 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium' AND T1.position = 'Member'
SELECT DISTINCT T2.country FROM zip_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.type = 'PO Box'
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND city = 'San Juan Municipio' AND state = 'Puerto Rico'
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'
SELECT T1.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 50
SELECT T1.link_to_member, T2.link_to_event FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.approved = 'true' AND T1.expense_date BETWEEN '2019-01-10' AND '2019-11-19'
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T1.link_to_major = 'rec1N0upiVLy5esTO'
SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'
SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'education' AND T2.college = 'College of Education & Human Services' AND T1.position = 'Member'
SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'
SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'
SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code
SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0 /* Answer the following: List the name and email of members who attended event_id 'E001'. name refers to first_name, last_name; email refers to email; event_id 'E001' refers to link_to_event = 'E001' */ SELECT T1.first_name, T1.last_name, T1.email FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T2.link_to_event = 'E001' /* Answer the following: List the name and cost of expenses that are not approved. name of expense refers to expense_description; cost refers to cost; not approved refers to approved = 'No' */ SELECT T1.expense_description, T1.cost FROM expense AS T1 WHERE T1.approved = 'No' /* Answer the following: List the name and amount of income from source 'Donation'. name refers to source; amount refers to amount; source 'Donation' refers to source = 'Donation' */ SELECT T1.source, T1.amount FROM income AS T1 WHERE T1.source = 'Donation' /* Answer the following: List the name and phone of members who live in zip code 12345. name refers to first_name, last_name; phone refers to phone; zip code 12345 refers to zip = 12345 */ SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 WHERE T1.zip = 12345 /* Answer the following: List the name and department of majors in college 'Engineering'. name refers to major_name; department refers to department; college 'Engineering' refers to college = 'Engineering' */ SELECT T1.major_name, T1.department FROM major AS T1 WHERE T1.college = 'Engineering'
SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.expense_description = 'Pizza' AND T2.cost > 50 AND T2.cost < 100
SELECT T2.first_name, T2.last_name, T4.major_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN major AS T4 ON T2.link_to_major = T4.major_id WHERE T1.cost > 100 /* Answer the following: What is the name and email of members who attended the event 'Annual Gala'? name refers to first_name, last_name; email refers to email; 'Annual Gala' is the event_name */ SELECT T2.first_name, T2.last_name, T2.email FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Annual Gala' /* Answer the following: What is the total income received from the source 'Donation'? total income refers to SUM(amount); 'Donation' is the source */ SELECT SUM(T1.amount) FROM income AS T1 WHERE T1.source = 'Donation' /* Answer the following: What is the total expense cost for the event 'Annual Gala'? total expense cost refers to SUM(cost); 'Annual Gala' is the event_name */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Annual Gala' /* Answer the following: What is the name and position of members who live in the state 'CA'? name refers to first_name, last_name; position refers to position; 'CA' is the short_state */ SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.short_state = 'CA'
SELECT T1.location, T3.city, T3.county FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN zip_code AS T3 ON T1.location = T3.zip_code INNER JOIN income AS T4 ON T2.budget_id = T4.link_to_member GROUP BY T1.event_id, T1.location, T3.city, T3.county HAVING COUNT(T4.income_id) > 40
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN ( SELECT T2.link_to_member, SUM(T2.cost) AS total_cost FROM expense AS T2 INNER JOIN budget AS T3 ON T2.link_to_budget = T3.budget_id GROUP BY T2.link_to_member HAVING COUNT(DISTINCT T3.link_to_event) > 1 ) AS T4 ON T1.member_id = T4.link_to_member ORDER BY T4.total_cost DESC LIMIT 1
SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position != 'Member'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < ( SELECT SUM(T4.cost) / COUNT(T5.event_id) FROM expense AS T4 INNER JOIN budget AS T5 ON T4.link_to_budget = T5.budget_id WHERE T5.category = 'Parking' )
SELECT CAST(SUM(T2.cost) AS REAL) * 100 / COUNT(T1.event_id) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Game'
SELECT T1.budget_id FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Water, chips, cookies' ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(amount) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(amount) */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the most attendees? most attendees refers to COUNT(link_to_member) */ SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_member) DESC LIMIT 1 /* Answer the following: Which member attended the most events? most events refers to COUNT(link_to_event) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1 /* Answer the following: Which major has the most members? most members refers to COUNT(link_to_major) */ SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.major_name ORDER BY COUNT(T2.link_to_major) DESC LIMIT 1 /* Answer the following: Which zip code has the most members? most members refers to COUNT(zip) */ SELECT T1.zip_code FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip GROUP BY T1.zip_code ORDER BY COUNT(T2.zip) DESC LIMIT 1
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 5
SELECT T2.first_name, T2.last_name, T2.phone FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > ( SELECT AVG(cost) FROM expense )
SELECT (CAST(SUM(CASE WHEN T2.state = 'Maine' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.position = 'Member') * 100) - (CAST(SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.position = 'Member') * 100) AS DIFFERENCE FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code
SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
SELECT T1.first_name, T1.last_name, T2.cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'
SELECT last_name, phone FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE major_name = 'Elementary Education' )
SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'
SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'
SELECT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'
SELECT T1.first_name, T1.last_name, T3.college FROM member AS T1 INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.position = 'Secretary'
SELECT T1.event_name, SUM(T2.spent) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Speaker Gifts' GROUP BY T1.event_name /* Answer the following: How many members attended the event 'Annual Gala'? COUNT(link_to_member) where link_to_event = 'Annual Gala' */ SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Annual Gala' /* Answer the following: Calculate the total income received from 'Ticket Sales'. total income = SUM(amount) where source = 'Ticket Sales' */ SELECT SUM(T1.amount) FROM income AS T1 WHERE T1.source = 'Ticket Sales' /* Answer the following: List the names of members who live in the state of 'California'. */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'California' /* Answer the following: Calculate the total cost of expenses approved by 'John Doe'. total cost = SUM(cost) where approved = 'John Doe' */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'John' AND T2.last_name = 'Doe'
SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Girke'
SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T1.zip = 28092
SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'
SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS REAL) / SUM(IIF(Currency = 'CZK', 1, 0)) FROM customers
SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM' AND T1.Date BETWEEN '201201' AND '201212' ORDER BY T1.Consumption ASC LIMIT 1
SELECT AVG(Consumption) / 12 FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME')
SELECT T1.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND STRFTIME('%Y', T2.Date) = '2011' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1
SELECT COUNT(DISTINCT CustomerID) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND Consumption < 30000 AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM')
SELECT (SELECT SUM(Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date BETWEEN '201201' AND '201212') - (SELECT SUM(Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Date BETWEEN '201201' AND '201212')
SELECT STRFTIME('%Y', T2.Date) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY STRFTIME('%Y', T2.Date) ORDER BY SUM(T2.Amount) DESC LIMIT 1
SELECT Segment FROM yearmonth GROUP BY Segment ORDER BY SUM(Consumption) ASC LIMIT 1
SELECT SUBSTR(Date, 1, 4) AS Year FROM yearmonth WHERE Currency = 'CZK' GROUP BY Year ORDER BY SUM(Consumption) DESC LIMIT 1
SELECT SUBSTR(Date, 6, 2) AS Month, SUM(Consumption) AS TotalConsumption FROM yearmonth AS ym INNER JOIN customers AS c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND SUBSTR(ym.Date, 1, 4) = '2013' GROUP BY Month ORDER BY TotalConsumption DESC LIMIT 1
SELECT (SELECT AVG(T3.Consumption) FROM yearmonth AS T3 INNER JOIN customers AS T4 ON T3.CustomerID = T4.CustomerID WHERE T4.Segment = 'SME' AND T4.Currency = 'CZK' AND SUBSTR(T3.Date, 1, 4) = '2013' ORDER BY T3.Consumption ASC LIMIT 1) - (SELECT AVG(T5.Consumption) FROM yearmonth AS T5 INNER JOIN customers AS T6 ON T5.CustomerID = T6.CustomerID WHERE T6.Segment = 'LAM' AND T6.Currency = 'CZK' AND SUBSTR(T5.Date, 1, 4) = '2013' ORDER BY T5.Consumption ASC LIMIT 1) AS 'SME-LAM', (SELECT AVG(T7.Consumption) FROM yearmonth AS T7 INNER JOIN customers AS T8 ON T7.CustomerID = T8.CustomerID WHERE T8.Segment = 'LAM' AND T8.Currency = 'CZK' AND SUBSTR(T7.Date, 1, 4) = '2013' ORDER BY T7.Consumption ASC LIMIT 1) - (SELECT AVG(T9.Consumption) FROM yearmonth AS T9 INNER JOIN customers AS T10 ON T9.CustomerID = T10.CustomerID WHERE T10.Segment = 'KAM' AND T10.Currency = 'CZK' AND SUBSTR(T9.Date, 1, 4) = '2013' ORDER BY T9.Consumption ASC LIMIT 1) AS 'LAM-KAM', (SELECT AVG(T11.Consumption) FROM yearmonth AS T11 INNER JOIN customers AS T12 ON T11.CustomerID = T12.CustomerID WHERE T12.Segment = 'KAM' AND T12.Currency = 'CZK' AND SUBSTR(T11.Date, 1, 4) = '2013' ORDER BY T11.Consumption ASC LIMIT 1) - (SELECT AVG(T13.Consumption) FROM yearmonth AS T13 INNER JOIN customers AS T14 ON T13.CustomerID = T14.CustomerID WHERE T14.Segment = 'SME' AND T14.Currency = 'CZK' AND SUBSTR(T13.Date, 1, 4) = '2013' ORDER BY T13.Consumption ASC LIMIT 1) AS 'KAM-SME'
SELECT Segment, MAX((Consumption_2013 - Consumption_2012) / Consumption_2012 * 100) AS Max_Increase_Percentage, MIN((Consumption_2013 - Consumption_2012) / Consumption_2012 * 100) AS Min_Increase_Percentage FROM ( SELECT c.Segment, SUM(CASE WHEN SUBSTR(y.Date, 1, 4) = '2012' THEN y.Consumption ELSE 0 END) AS Consumption_2012, SUM(CASE WHEN SUBSTR(y.Date, 1, 4) = '2013' THEN y.Consumption ELSE 0 END) AS Consumption_2013 FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'EUR' AND c.Segment IN ('SME', 'LAM', 'KAM') AND SUBSTR(y.Date, 1, 4) IN ('2012', '2013') GROUP BY c.Segment ) t GROUP BY Segment
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND SUBSTR(Date, 1, 4) = '2013' AND SUBSTR(Date, 5, 2) BETWEEN '08' AND '11';
SELECT ( SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount' ) - ( SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount' ) AS More_Discount_Gas_Stations
SELECT ( SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304' ) - ( SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304' ) AS Difference
SELECT (SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'SME' AND Currency = 'Czech koruna') - (SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'SME' AND Currency = 'Euro') AS MoreSMEs
SELECT T2.Segment, T1.CustomerID, T2.Currency, T1.Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201310' AND T2.Segment = 'LAM' AND T2.Currency = 'Euro' ORDER BY T1.Consumption DESC LIMIT 1
SELECT T1.CustomerID, SUM(T2.Consumption) AS Total_Consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T1.CustomerID ORDER BY Total_Consumption DESC LIMIT 1
SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201305' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'KAM' )
SELECT CAST(COUNT(CASE WHEN T1.Consumption > 46.73 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM'
SELECT Country, COUNT(*) as NumberOfValueForMoneyStations FROM gasstations WHERE Segment = 'Value for Money' GROUP BY Country /* Answer the following: What is the total consumption of each customer in each month? */ SELECT CustomerID, Date, SUM(Consumption) as TotalConsumption FROM yearmonth GROUP BY CustomerID, Date /* Answer the following: What is the total amount of transactions made by each customer? */ SELECT CustomerID, SUM(Amount) as TotalAmount FROM transactions_1k GROUP BY CustomerID /* Answer the following: What is the average price of each product sold? */ SELECT ProductID, AVG(Price) as AveragePrice FROM transactions_1k GROUP BY ProductID /* Answer the following: Which customer has made the most transactions? */ SELECT CustomerID, COUNT(*) as NumberOfTransactions FROM transactions_1k GROUP BY CustomerID ORDER BY NumberOfTransactions DESC LIMIT 1 /* Answer the following: Which product is the most popular among customers? */ SELECT ProductID, COUNT(*) as NumberOfTransactions FROM transactions_1k GROUP BY ProductID ORDER BY NumberOfTransactions DESC LIMIT 1 /* Answer the following: Which gas station has the most transactions? */ SELECT GasStationID, COUNT(*) as NumberOfTransactions FROM transactions_1k GROUP BY GasStationID ORDER BY NumberOfTransactions DESC LIMIT 1 /* Answer the following: What is the total revenue of each gas station? */ SELECT GasStationID, SUM(Price * Amount) as TotalRevenue FROM transactions_1k GROUP BY GasStationID /* Answer the following: What is the total revenue of each product? */ SELECT ProductID, SUM(Price * Amount) as TotalRevenue FROM transactions_1k GROUP BY ProductID /* Answer the following: What is the total revenue of each customer? */ SELECT CustomerID, SUM(Price * Amount) as TotalRevenue FROM transactions_1k GROUP BY CustomerID
SELECT CAST(SUM(CASE WHEN Currency = 'Euro' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customers WHERE Segment = 'KAM'
SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'
SELECT CAST(COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE Country = 'Slovakia'
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1
SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1
SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption ASC LIMIT 1
SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'
SELECT MAX(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'euro'
SELECT T2.Description FROM "transactions_1k" AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID WHERE SUBSTR(T1.Date, 1, 6) = '201309';
SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE SUBSTR(T1.Date, 1, 6) = '201306'
SELECT DISTINCT T2.ChainID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'euro'
SELECT DISTINCT T3.Description FROM "transactions_1k" AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'Euro'
SELECT AVG(Price * Amount) AS AverageTotalPrice FROM "transactions_1k" WHERE strftime('%Y-%m', Date) = '2012-01'
SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'euro' AND T2.Consumption > 1000
SELECT DISTINCT T3.Description FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'
SELECT DISTINCT T2.Time FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ChainID = 11
SELECT COUNT(T1.TransactionID) FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000
SELECT COUNT(T1.TransactionID) FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'
SELECT AVG(T1.Price * T1.Amount) AS AverageTotalPrice FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'
SELECT AVG(T4.Price) FROM customers AS T1 INNER JOIN transactions_1k AS T4 ON T1.CustomerID = T4.CustomerID WHERE T1.Currency = 'Euro'
SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1
SELECT T2.Country FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time ASC LIMIT 1
SELECT T1.Currency FROM customers AS T1 INNER JOIN "transactions_1k" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'
SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT COUNT(TransactionID) FROM "transactions_1k" AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Date = '2012-08-26' AND T1.Time < '13:00:00'
SELECT Segment FROM customers ORDER BY CustomerID ASC LIMIT 1 /* Answer the following: What is the description of the first product sold? */ SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Date ASC, T1.Time ASC LIMIT 1 /* Answer the following: What is the country of the gas station where the first transaction took place? */ SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID ORDER BY T1.Date ASC, T1.Time ASC LIMIT 1 /* Answer the following: What is the consumption of the first customer in the earliest date? */ SELECT Consumption FROM yearmonth ORDER BY Date ASC, CustomerID ASC LIMIT 1 /* Answer the following: What is the currency of the earliest customer? */ SELECT Currency FROM customers ORDER BY CustomerID ASC LIMIT 1 /* Answer the following: What is the segment of the gas station where the first transaction took place? */ SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID ORDER BY T1.Date ASC, T1.Time ASC LIMIT 1
SELECT T2.Country FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'
SELECT T1.ProductID FROM "transactions_1k" AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT T1.Date, T1.Consumption FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Price = 124.05 AND STRFTIME('%Y-%m-%d', T2.Date) = '2012-08-24' AND STRFTIME('%Y-%m', T1.Date) = '2012-01'
SELECT COUNT(T1.TransactionID) FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'
SELECT T1.Currency FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date LIKE '201306%' AND T2.Consumption = 214582.17
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = 667467
SELECT T2.Country FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Amount = 548.4
SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN "transactions_1k" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25'
SELECT (CAST((SELECT Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price = 634.8) AND Date LIKE '2012%') AS REAL) - (SELECT Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price = 634.8) AND Date LIKE '2013%')) / (SELECT Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price = 634.8) AND Date LIKE '2012%') AS DecreaseRate
SELECT T2.ChainID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID GROUP BY T2.ChainID ORDER BY SUM(T1.Amount * T1.Price) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE Country = 'SVK'
SELECT SUM(Amount*Price) FROM transactions_1k WHERE CustomerID = 38508 AND STRFTIME('%Y%m', Date) = '201201'
SELECT T1.Description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID = T2.ProductID GROUP BY T1.Description ORDER BY SUM(T2.Amount) DESC LIMIT 5
SELECT T1.CustomerID, T1.Currency, AVG(T2.Price / T2.Amount) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID, T1.Currency ORDER BY SUM(T2.Price) DESC LIMIT 1
SELECT T2.Country FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1
SELECT T3.CustomerID, T3.Consumption FROM "transactions_1k" AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.ProductID = 5 AND T1.Price / T1.Amount > 29.00 AND T3.Date LIKE '201208%'
