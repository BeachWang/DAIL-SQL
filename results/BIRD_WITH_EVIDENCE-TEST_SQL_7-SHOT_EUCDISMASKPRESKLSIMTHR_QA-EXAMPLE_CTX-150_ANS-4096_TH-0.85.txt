SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS Highest_Eligible_Free_Rate_K_12 FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda'
SELECT `School Name`, `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS FreeRate FROM frpm WHERE `School Type` = 'Continuation' ORDER BY FreeRate ASC LIMIT 3
SELECT DISTINCT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 AND T2.County = 'Fresno County Office of Education'
SELECT MailStreet, MailCity, MailState, MailZip FROM schools WHERE CDSCode = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 )
SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'
SELECT COUNT(DISTINCT T1.CDSCode) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath < 400 AND T2.Virtual = 'F'
SELECT T1.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr > 500 AND T2.Magnet = 1
SELECT Phone FROM schools WHERE CDSCode = ( SELECT cds FROM satscores ORDER BY NumGE1500 DESC LIMIT 1 )
SELECT SUM(T2.NumTstTakr) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1
SELECT COUNT(T1.CDSCode) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.FundingType = 'Directly funded'
SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead DESC LIMIT 1
SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500 /* Answer the following: Please list the names of the schools with an average SAT Math score of over 600. */ SELECT sname FROM satscores WHERE AvgScrMath > 600 /* Answer the following: Please list the names of the schools with a charter status. Charter status can be represented by `Charter School (Y/N)` = 1 */ SELECT `School Name` FROM frpm WHERE `Charter School (Y/N)` = 1 /* Answer the following: Please list the names of the schools with a total FRPM count of over 1000. Total FRPM count can be represented by `FRPM Count (K-12)` + `FRPM Count (Ages 5-17)` */ SELECT `School Name` FROM frpm WHERE (`FRPM Count (K-12)` + `FRPM Count (Ages 5-17)`) > 1000 /* Answer the following: Please list the names of the schools with a total free meal count of over 500. Total free meal count can be represented by `Free Meal Count (K-12)` + `Free Meal Count (Ages 5-17)` */ SELECT `School Name` FROM frpm WHERE (`Free Meal Count (K-12)` + `Free Meal Count (Ages 5-17)`) > 500 /* Answer the following: Please list the names of the schools with an average SAT Reading score of over 600. */ SELECT sname FROM satscores WHERE AvgScrRead > 600 /* Answer the following: Please list the names of the schools with an average SAT Writing score of over 600. */ SELECT sname FROM satscores WHERE AvgScrWrite > 600 /* Answer the following: Please list the names of the schools with a total number of test takers of over 100. Total number of test takers can be represented by NumTstTakr */ SELECT sname FROM satscores WHERE NumTstTakr > 100 /* Answer the following: Please list the names of the schools with a total enrollment of over 1000 in the 12th grade. Total enrollment in the 12th grade can be represented by enroll12 */ SELECT sname FROM satscores WHERE enroll12 > 1000 /* Answer the following: Please list the names of the schools with a total number of students scoring over 1500 on the SAT of over 100. Total number of students scoring over 1500 on the SAT can be represented by NumGE1500 */ SELECT sname FROM satscores WHERE NumGE1500 > 100
SELECT MAX(T1.`Percent (%) Eligible Free (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 / T2.NumTstTakr > 0.3
SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3
SELECT NCESSchool, `School Name`, `Enrollment (Ages 5-17)` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 5
SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' GROUP BY T1.District ORDER BY AVG(T2.AvgScrRead) DESC LIMIT 1
SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Alameda' AND T2.NumTstTakr < 100
SELECT T2.CharterNum FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite = 499
SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Contra Costa' AND T1.FundingType = 'Directly Funded' AND T2.NumTstTakr <= 250
SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1
SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12'
SELECT COUNT(schools.CDSCode) FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.City = 'Los Angeles' AND frpm.`Free Meal Count (K-12)` > 500 AND frpm.`FRPM Count (K-12)` < 700
SELECT `School Name` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`County Name` = 'Contra Costa' ORDER BY T2.NumTstTakr DESC LIMIT 1
SELECT `School Name`, `Street` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE ABS(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) > 30
SELECT T1.`School Name` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Percent (%) Eligible Free (K-12)` > 0.1 AND T2.NumGE1500 >= 1500
SELECT T1.School, T1.FundingType FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Riverside' GROUP BY T1.School, T1.FundingType HAVING AVG(T2.AvgScrMath) > 400
SELECT T1.`School Name`, T1.`Street`, T1.`City`, T1.`State`, T1.`Zip` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`County Name` = 'Monterey' AND T1.`FRPM Count (Ages 5-17)` > 800 AND T2.`School Type` = 'High School'
SELECT T1.sname, T1.AvgScrWrite, T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.OpenDate > '1991-12-31' OR T2.ClosedDate < '2000-01-01'
SELECT T2.School, T2.DOCTYPE FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)` > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Local') AND T2.FundingType = 'Local'
SELECT OpenDate FROM schools WHERE CDSCode = ( SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` = ( SELECT MAX(`Enrollment (K-12)`) FROM frpm ) )
SELECT City FROM schools WHERE CDSCode IN ( SELECT CDSCode FROM frpm ORDER BY `Enrollment (K-12)` ASC LIMIT 5 )
SELECT `School Name`, `Free Meal Count (K-12)` / `Enrollment (K-12)` AS `Eligible Free Rate` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2 /* Answer the following: What is the average SAT score for the school with the highest number of test takers? highest number of test takers refers to MAX(NumTstTakr); average SAT score = (AvgScrRead + AvgScrMath + AvgScrWrite) / 3; */ SELECT sname, (AvgScrRead + AvgScrMath + AvgScrWrite) / 3 AS `Average SAT Score` FROM satscores WHERE NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores) /* Answer the following: What is the name of the school that was last updated? last updated refers to MAX(LastUpdate); */ SELECT School FROM schools WHERE LastUpdate = (SELECT MAX(LastUpdate) FROM schools) /* Answer the following: What is the name of the school with the highest latitude? highest latitude refers to MAX(Latitude); */ SELECT School FROM schools WHERE Latitude = (SELECT MAX(Latitude) FROM schools) /* Answer the following: What is the name of the school with the highest number of students eligible for free meals in grades 1 through 12? highest number of students eligible for free meals in grades 1 through 12 refers to MAX(`Free Meal Count (K-12)`); */ SELECT `School Name` FROM frpm WHERE `Free Meal Count (K-12)` = (SELECT MAX(`Free Meal Count (K-12)`) FROM frpm)
SELECT `School Name`, `FRPM Count (K-12)`, `Enrollment (K-12)`, (`FRPM Count (K-12)` / `Enrollment (K-12)`) AS `Eligible FRPM Rate` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.DOC = '66' ORDER BY `FRPM Count (K-12)` DESC LIMIT 5
SELECT `School Name`, Website FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE `Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000
SELECT (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) as FreeRate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Kacey' AND T2.AdmLName1 = 'Gibson'
SELECT T1.AdmEmail1 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 ORDER BY T2.`Enrollment (K-12)` ASC LIMIT 1 /* Answer the following: What is the average SAT math score of the schools in the district with the highest number of students eligible for free meals in grades K through 12? District refers to `District Name` in the table frpm; Highest number of students eligible for free meals in grades K through 12 refers to MAX(`Free Meal Count (K-12)`) in the table frpm; Average SAT math score refers to AvgScrMath in the table satscores; */ SELECT AVG(T1.AvgScrMath) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` = ( SELECT T3.`District Name` FROM frpm AS T3 ORDER BY T3.`Free Meal Count (K-12)` DESC LIMIT 1 ) /* Answer the following: What is the name of the school with the highest percentage of students eligible for free or reduced price meals in grades 5 through 17? School name refers to `School Name` in the table frpm; Highest percentage of students eligible for free or reduced price meals in grades 5 through 17 refers to MAX(`Percent (%) Eligible FRPM (Ages 5-17)`) in the table frpm; */ SELECT T1.`School Name` FROM frpm AS T1 ORDER BY T1.`Percent (%) Eligible FRPM (Ages 5-17)` DESC LIMIT 1 /* Answer the following: What is the name of the county with the highest average SAT reading score? County name refers to cname in the table satscores; Highest average SAT reading score refers to MAX(AvgScrRead) in the table satscores; */ SELECT T1.cname FROM satscores AS T1 GROUP BY T1.cname ORDER BY AVG(T1.AvgScrRead) DESC LIMIT 1 /* Answer the following: What is the name of the school with the lowest number of students taking the SAT? School name refers to sname in the table satscores; Lowest number of students taking the SAT refers to MIN(NumTstTakr) in the table satscores; */ SELECT T1.sname FROM satscores AS T1 ORDER BY T1.NumTstTakr ASC LIMIT 1 /* Answer the following: What is the name of the school with the highest number of students enrolled in grades K through 12 and also has the highest percentage of students eligible for free or reduced price meals in grades K through 12? School name refers to `School Name` in the table frpm; Highest number of students enrolled in grades K through 12 refers to MAX(`Enrollment (K-12)`) in the table frpm; Highest percentage of students eligible for free or reduced price meals in grades K through 12 refers to MAX(`Percent (%) Eligible FRPM (K-12)`) in the table frpm; */ SELECT T1.`School Name` FROM frpm AS T1 ORDER BY T1.`Enrollment (K-12)` DESC, T1.`Percent (%) Eligible FRPM (K-12)` DESC LIMIT 1
SELECT T1.AdmFName1, T1.AdmLName1, T1.AdmFName2, T1.AdmLName2, T1.AdmFName3, T1.AdmLName3 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.NumGE1500 DESC LIMIT 1
SELECT T2.Street, T2.City, T2.Zip, T2.State FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY (T1.NumGE1500 / T1.NumTstTakr) ASC LIMIT 1
SELECT T1.Website FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Los Angeles' AND T2.NumTstTakr BETWEEN 2000 AND 3000
SELECT AVG(satscores.NumTstTakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Fresno' AND schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31'
SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'Fresno Unified' ORDER BY T2.AvgScrRead ASC LIMIT 1
SELECT T1.School, T2.AvgScrRead FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' ORDER BY T2.AvgScrRead DESC LIMIT 5
SELECT EILName FROM schools WHERE CDSCode = ( SELECT cds FROM satscores ORDER BY AvgScrMath DESC LIMIT 1 )
SELECT satscores.AvgScrMath, schools.County FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY (satscores.AvgScrMath + satscores.AvgScrRead + satscores.AvgScrWrite) LIMIT 1
SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = ( SELECT MAX(NumGE1500) FROM satscores )
SELECT T1.School, AVG(T2.AvgScrWrite) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.AdmFName1 = 'Ricci' AND T1.AdmLName1 = 'Ulrich' GROUP BY T1.School
SELECT `School`, `Enrollment (K-12)` FROM frpm WHERE `CDSCode` IN (SELECT `CDSCode` FROM schools WHERE `DOC` = 31) ORDER BY `Enrollment (K-12)` DESC LIMIT 1 /* Answer the following: Which school has the highest average SAT score in reading? */ SELECT `sname`, `AvgScrRead` FROM satscores ORDER BY `AvgScrRead` DESC LIMIT 1 /* Answer the following: Which school has the highest number of students who scored 1500 or more on the SAT? */ SELECT `sname`, `NumGE1500` FROM satscores ORDER BY `NumGE1500` DESC LIMIT 1 /* Answer the following: Which school has the highest percentage of students eligible for free meals? */ SELECT `School Name`, `Percent (%) Eligible Free (K-12)` FROM frpm ORDER BY `Percent (%) Eligible Free (K-12)` DESC LIMIT 1 /* Answer the following: Which school has the highest number of students eligible for free or reduced-price meals? */ SELECT `School Name`, `FRPM Count (K-12)` FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 /* Answer the following: Which school has the highest enrollment in grades K-12? */ SELECT `School Name`, `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 1 /* Answer the following: Which school has the highest number of students taking the SAT? */ SELECT `sname`, `NumTstTakr` FROM satscores ORDER BY `NumTstTakr` DESC LIMIT 1 /* Answer the following: Which school has the highest average SAT score in math? */ SELECT `sname`, `AvgScrMath` FROM satscores ORDER BY `AvgScrMath` DESC LIMIT 1 /* Answer the following: Which school has the highest average SAT score in writing? */ SELECT `sname`, `AvgScrWrite` FROM satscores ORDER BY `AvgScrWrite` DESC LIMIT 1 /* Answer the following: Which school has the highest number of students eligible for free meals in the age group 5-17? */ SELECT `School Name`, `Free Meal Count (Ages 5-17)` FROM frpm ORDER BY `Free Meal Count (Ages 5-17)` DESC LIMIT 1 /* Answer the following: Which school has the highest number of students eligible for free or reduced-price meals in the age group 5-17? */ SELECT `School Name`, `FRPM Count (Ages 5-17)` FROM frpm ORDER BY `FRPM Count (Ages 5-17)` DESC LIMIT 1 /* Answer the following: Which school has the highest enrollment in the age group 5-17? */ SELECT `School Name`, `Enrollment (Ages 5-17)` FROM frpm ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 1 /* Answer the following: Which school has the highest percentage of students eligible for free meals in the age group 5-17? */ SELECT `School Name`, `Percent (%) Eligible Free (Ages 5-17)` FROM frpm ORDER BY `Percent (%) Eligible Free (Ages 5-17)` DESC LIMIT 1 /* Answer the following: Which school has the highest percentage of students eligible for free or reduced-price meals in the age group 5-17? */ SELECT `School Name`, `Percent (%) Eligible FRPM (Ages 5-17)` FROM frpm ORDER BY `Percent (%) Eligible FRPM (Ages 5-17)` DESC LIMIT 1
SELECT COUNT(*)/12 AS Monthly_Average FROM schools WHERE STRFTIME('%Y', OpenDate) = '1980' AND County = 'Alameda' AND DOC = '52'
SELECT (SELECT COUNT(*) FROM schools WHERE DOC = 54 AND County = 'Orange') / (SELECT COUNT(*) FROM schools WHERE DOC = 52 AND County = 'Orange') AS Ratio
SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1
SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1 OFFSET 5 /* Answer the following: What is the name of the school with the highest percentage of students eligible for free meals? Indicate the school's district. */ SELECT T1.School, T1.District FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Percent (%) Eligible Free (K-12)` DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest average SAT score? Indicate the school's county. */ SELECT T1.School, T1.County FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY (T2.AvgScrRead + T2.AvgScrMath + T2.AvgScrWrite) / 3 DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest number of students taking the SAT? Indicate the school's city. */ SELECT T1.School, T1.City FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.NumTstTakr DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest number of students eligible for free meals? Indicate the school's website. */ SELECT T1.School, T1.Website FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Free Meal Count (K-12)` DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest percentage of students eligible for free meals in the 2013-14 academic year? Indicate the school's phone number. */ SELECT T1.School, T1.Phone FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Academic Year` = '2013-14' ORDER BY T2.`Percent (%) Eligible Free (K-12)` DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest average SAT score in reading? Indicate the school's administrative contact's first and last name. */ SELECT T1.School, T1.AdmFName1, T1.AdmLName1 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest average SAT score in math? Indicate the school's latitude and longitude. */ SELECT T1.School, T1.Latitude, T1.Longitude FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest average SAT score in writing? Indicate the school's district and county. */ SELECT T1.School, T1.District, T1.County FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrWrite DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest number of students taking the SAT in the 12th grade? Indicate the school's city and zip code. */ SELECT T1.School, T1.City, T1.Zip FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.enroll12 DESC LIMIT 1
SELECT T1.MailStreet, T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrRead ASC LIMIT 1
SELECT COUNT(DISTINCT s.CDSCode) FROM satscores AS sat INNER JOIN schools AS s ON sat.cds = s.CDSCode WHERE (sat.AvgScrRead + sat.AvgScrMath + sat.AvgScrWrite) >= 1500 AND s.MailCity = 'Lakeport' /* Answer the following: What is the average percentage of students eligible for free meals in schools where the average SAT score is above 1500? Average SAT score can be computed by (AvgScrRead + AvgScrMath + AvgScrWrite)/3 */ SELECT AVG(f.`Percent (%) Eligible Free (K-12)`) FROM frpm AS f INNER JOIN satscores AS sat ON f.CDSCode = sat.cds WHERE ((sat.AvgScrRead + sat.AvgScrMath + sat.AvgScrWrite)/3) > 1500 /* Answer the following: How many schools in the district 'Los Angeles Unified' have an average SAT score above 1500? Average SAT score can be computed by (AvgScrRead + AvgScrMath + AvgScrWrite)/3 */ SELECT COUNT(DISTINCT s.CDSCode) FROM satscores AS sat INNER JOIN schools AS s ON sat.cds = s.CDSCode WHERE ((sat.AvgScrRead + sat.AvgScrMath + sat.AvgScrWrite)/3) > 1500 AND s.District = 'Los Angeles Unified' /* Answer the following: What is the total number of students who took the SAT in schools where the percentage of students eligible for free meals is above 50%? */ SELECT SUM(sat.NumTstTakr) FROM satscores AS sat INNER JOIN frpm AS f ON sat.cds = f.CDSCode WHERE f.`Percent (%) Eligible Free (K-12)` > 50 /* Answer the following: What is the average SAT score in schools where the percentage of students eligible for free meals is above 50%? Average SAT score can be computed by (AvgScrRead + AvgScrMath + AvgScrWrite)/3 */ SELECT AVG((sat.AvgScrRead + sat.AvgScrMath + sat.AvgScrWrite)/3) FROM satscores AS sat INNER JOIN frpm AS f ON sat.cds = f.CDSCode WHERE f.`Percent (%) Eligible Free (K-12)` > 50
SELECT SUM(T2.NumTstTakr) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.MailCity = 'Fresno'
SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'
SELECT CAST(COUNT(CASE WHEN County = 'Colusa' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN County = 'Humboldt' THEN 1 ELSE NULL END) AS ratio FROM schools WHERE MailState = 'California'
SELECT COUNT(CDSCode) FROM schools WHERE MailState = 'CA' AND StatusType = 'Active' AND County = 'San Joaquin'
SELECT Phone, Ext FROM schools WHERE CDSCode = ( SELECT cds FROM satscores ORDER BY AvgScrWrite DESC LIMIT 332, 1 )
SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704'
SELECT Website FROM schools WHERE AdmFName1 = 'Mike' AND AdmLName1 = 'Larson' OR AdmFName2 = 'Dante' AND AdmLName2 = 'Alvarez' OR AdmFName3 = 'Dante' AND AdmLName3 = 'Alvarez'
SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin'
SELECT COUNT(CDSCode) FROM schools WHERE City = 'Hickman' AND DOC = 52 AND Charter = 1
SELECT COUNT(DISTINCT s.CDSCode) FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.Charter = 0 AND s.County = 'Los Angeles' AND (f.`Free Meal Count (K-12)` * 100 / f.`Enrollment (K-12)`) < 0.18
SELECT School, City, AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3 FROM schools WHERE Charter = 1 AND CharterNum = '00D2'
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'
SELECT CAST(SUM(CASE WHEN FundingType = 'Locally Funded' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(FundingType) FROM schools WHERE County = 'Santa Clara' /* Answer the following: What is the percentage of schools in Los Angeles County that have an average SAT Math score above 600? Percentage = (count(schools with AvgScrMath > 600 in Los Angeles) / count(all schools in Los Angeles) * 100% */ SELECT CAST(SUM(CASE WHEN AvgScrMath > 600 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(AvgScrMath) FROM satscores WHERE cname = 'Los Angeles' /* Answer the following: What is the ratio of schools in San Diego County that are charter schools compared to non-charter schools? Ratio = (count(charter schools in San Diego) / count(non-charter schools in San Diego)) */ SELECT CAST(SUM(CASE WHEN Charter = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Charter = 0 THEN 1 ELSE 0 END) FROM schools WHERE County = 'San Diego' /* Answer the following: What is the percentage of schools in San Francisco County that have a Free Meal Count (K-12) above 500? Percentage = (count(schools with Free Meal Count (K-12) > 500 in San Francisco) / count(all schools in San Francisco) * 100% */ SELECT CAST(SUM(CASE WHEN `Free Meal Count (K-12)` > 500 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`Free Meal Count (K-12)`) FROM frpm WHERE `County Name` = 'San Francisco' /* Answer the following: What is the ratio of schools in Orange County that have a Percent (%) Eligible Free (K-12) above 50% compared to those below 50%? Ratio = (count(schools with Percent (%) Eligible Free (K-12) > 50 in Orange) / count(schools with Percent (%) Eligible Free (K-12) < 50 in Orange)) */ SELECT CAST(SUM(CASE WHEN `Percent (%) Eligible Free (K-12)` > 50 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN `Percent (%) Eligible Free (K-12)` < 50 THEN 1 ELSE 0 END) FROM frpm WHERE `County Name` = 'Orange' /* Answer the following: What is the percentage of schools in Sacramento County that have an enrollment (K-12) above 1000? Percentage = (count(schools with Enrollment (K-12) > 1000 in Sacramento) / count(all schools in Sacramento) * 100% */ SELECT CAST(SUM(CASE WHEN `Enrollment (K-12)` > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`Enrollment (K-12)`) FROM frpm WHERE `County Name` = 'Sacramento' /* Answer the following: What is the ratio of schools in Alameda County that have a FRPM Count (K-12) above 500 compared to those below 500? Ratio = (count(schools with FRPM Count (K-12) > 500 in Alameda) / count(schools with FRPM Count (K-12) < 500 in Alameda)) */ SELECT CAST(SUM(CASE WHEN `FRPM Count (K-12)` > 500 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN `FRPM Count (K-12)` < 500 THEN 1 ELSE 0 END) FROM frpm WHERE `County Name` = 'Alameda' /* Answer the following: What is the percentage of schools in Riverside County that have an average SAT Reading score above 500? Percentage = (count(schools with AvgScrRead > 500 in Riverside) / count(all schools in Riverside) * 100% */ SELECT CAST(SUM(CASE WHEN AvgScrRead > 500 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(AvgScrRead) FROM satscores WHERE cname = 'Riverside' /* Answer the following: What is the ratio of schools in San Bernardino County that are charter schools compared to non-charter schools? Ratio = (count(charter schools in San Bernardino) / count(non-charter schools in San Bernardino)) */ SELECT CAST(SUM(CASE WHEN Charter = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Charter = 0 THEN 1 ELSE 0 END) FROM schools WHERE County = 'San Bernardino' /* Answer the following: What is the percentage of schools in San Mateo County that have a Free Meal Count (K-12) above 500? Percentage = (count(schools with Free Meal Count (K-12) > 500 in San Mateo) / count(all schools in San Mateo) * 100% */ SELECT CAST(SUM(CASE WHEN `Free Meal Count (K-12)` > 500 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`Free Meal Count (K-12)`) FROM frpm WHERE `County Name` = 'San Mateo'
SELECT COUNT(*) FROM schools WHERE OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND FundingType = 'Directly Funded' AND County = 'Stanislaus'
SELECT COUNT(*) FROM schools WHERE ClosedDate LIKE '1989%' AND City = 'San Francisco' AND DOCType = 'Community College District'
SELECT County FROM schools WHERE SOC = '11' AND STRFTIME('%Y', ClosedDate) BETWEEN '1980' AND '1989' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1
SELECT NCESSchool FROM schools WHERE SOC = '31'
SELECT COUNT(DISTINCT District) FROM schools WHERE County = 'Alpine' AND DOCType = 'District Community Day School' AND (StatusType = 'Active' OR StatusType = 'Closed')
SELECT `District Code` FROM frpm WHERE `School Code` IN ( SELECT CDSCode FROM schools WHERE City = 'Fresno' AND Magnet = 0 )
SELECT `Enrollment (Ages 5-17)` FROM frpm WHERE `School Name` = 'State Special School' AND `City` = 'Fremont' AND `Academic Year` = '2014-2015' AND EdOpsCode = 'SSS'
SELECT `FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.School = 'Youth Authority School' AND T2.MailStreet = 'PO Box 1040'
SELECT `Low Grade` FROM frpm WHERE `District Type` = 'SPECON' AND `District Code` = 613360 ORDER BY `Low Grade` ASC LIMIT 1
SELECT T1.`School Name`, T1.`Educational Option Type` FROM frpm AS T1 WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = '37'
SELECT City FROM schools WHERE CDSCode IN ( SELECT CDSCode FROM frpm WHERE `Low Grade` = '9' AND `High Grade` = '12' AND `NSLP Provision Status` = '2' AND `County Name` = 'Merced' ) AND EILCode = 'HS'
SELECT T1.School, (T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) * 100 AS 'Percent (%) Eligible FRPM (Ages 5-17)' FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T1.GSoffered = 'K-9'
SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1
SELECT County, COUNT(*) as NumberOfSchools FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY NumberOfSchools DESC LIMIT 1
SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Latitude = ( SELECT MAX(Latitude) FROM schools )
SELECT T1.City, T1.School, T1.GSoffered FROM schools AS T1 WHERE T1.State = 'CA' ORDER BY T1.Latitude ASC LIMIT 1
SELECT GSoffered FROM schools ORDER BY Longitude DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest number of students who took the SAT? */ SELECT sname FROM satscores ORDER BY NumTstTakr DESC LIMIT 1 /* Answer the following: What is the name of the district with the highest enrollment in K-12? */ SELECT `District Name` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest average SAT math score? */ SELECT sname FROM satscores ORDER BY AvgScrMath DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest percentage of students eligible for free meals? */ SELECT `School Name` FROM frpm ORDER BY `Percent (%) Eligible Free (K-12)` DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest number of students who scored 1500 or more on the SAT? */ SELECT sname FROM satscores ORDER BY NumGE1500 DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest enrollment of students aged 5-17? */ SELECT `School Name` FROM frpm ORDER BY `Enrollment (Ages 5-17)` DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest percentage of students eligible for free meals among students aged 5-17? */ SELECT `School Name` FROM frpm ORDER BY `Percent (%) Eligible Free (Ages 5-17)` DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest average SAT reading score? */ SELECT sname FROM satscores ORDER BY AvgScrRead DESC LIMIT 1 /* Answer the following: What is the name of the school with the highest average SAT writing score? */ SELECT sname FROM satscores ORDER BY AvgScrWrite DESC LIMIT 1
SELECT City, COUNT(School) FROM schools WHERE Magnet = 1 AND GSoffered = 'K-8' AND EdOpsName = 'Multiple Provision Types' GROUP BY City
SELECT AdmFName1, District, COUNT(*) as count FROM schools GROUP BY AdmFName1, District ORDER BY count DESC LIMIT 2 /* Answer the following: What is the average SAT score in Math for each district? */ SELECT dname, AVG(AvgScrMath) as average_math_score FROM satscores GROUP BY dname /* Answer the following: What is the total number of students enrolled in each district? */ SELECT `District Name`, SUM(`Enrollment (K-12)`) as total_enrollment FROM frpm GROUP BY `District Name` /* Answer the following: What is the percentage of students eligible for free meals in each district? */ SELECT `District Name`, AVG(`Percent (%) Eligible Free (K-12)`) as average_free_meal_percentage FROM frpm GROUP BY `District Name` /* Answer the following: What is the average SAT score in Reading for each district? */ SELECT dname, AVG(AvgScrRead) as average_reading_score FROM satscores GROUP BY dname /* Answer the following: What is the total number of students who took the SAT in each district? */ SELECT dname, SUM(NumTstTakr) as total_test_takers FROM satscores GROUP BY dname /* Answer the following: What is the average SAT score in Writing for each district? */ SELECT dname, AVG(AvgScrWrite) as average_writing_score FROM satscores GROUP BY dname /* Answer the following: What is the percentage of students eligible for reduced-price meals in each district? */ SELECT `District Name`, AVG(`Percent (%) Eligible FRPM (K-12)`) as average_reduced_meal_percentage FROM frpm GROUP BY `District Name`
SELECT T1.`District Code`, (T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)`) * 100 AS `Percent (%) Eligible Free (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'
SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '40'
SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = '62' OR DOC = '54')
SELECT T1.School, T1.AdmEmail1 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.NumGE1500 DESC LIMIT 1
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.A3 = 'east Bohemia'
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'Prague'
SELECT IIF(AVG(A12) > AVG(A13), '1995', '1996') FROM district /* Answer the following: How many clients have a loan that is currently in default? status = 'D' refers to loan in default */ SELECT COUNT(DISTINCT client_id) FROM disp INNER JOIN loan ON disp.account_id = loan.account_id WHERE loan.status = 'D' /* Answer the following: What is the average amount of withdrawal transactions? type = 'withdrawal' refers to withdrawal transactions */ SELECT AVG(amount) FROM trans WHERE type = 'withdrawal' /* Answer the following: How many clients have a credit card issued? */ SELECT COUNT(DISTINCT client_id) FROM disp INNER JOIN card ON disp.disp_id = card.disp_id /* Answer the following: What is the total amount of loan for clients who have a loan duration of 24 months? duration = 24 refers to loan duration of 24 months */ SELECT SUM(amount) FROM loan WHERE duration = 24 /* Answer the following: What is the average balance of clients who have a loan that is currently in default? status = 'D' refers to loan in default */ SELECT AVG(balance) FROM trans INNER JOIN loan ON trans.account_id = loan.account_id WHERE loan.status = 'D' /* Answer the following: What is the total amount of all orders for clients who have a loan that is currently in default? status = 'D' refers to loan in default */ SELECT SUM(amount) FROM `order` INNER JOIN loan ON `order`.account_id = loan.account_id WHERE loan.status = 'D' /* Answer the following: What is the average amount of all transactions for clients who have a loan that is currently in default? status = 'D' refers to loan in default */ SELECT AVG(amount) FROM trans INNER JOIN loan ON trans.account_id = loan.account_id WHERE loan.status = 'D' /* Answer the following: What is the total amount of all transactions for clients who have a loan that is currently in default? status = 'D' refers to loan in default */ SELECT SUM(amount) FROM trans INNER JOIN loan ON trans.account_id = loan.account_id WHERE loan.status = 'D' /* Answer the following: What is the average amount of all transactions for clients who have a loan that is currently in default and have a credit card issued? status = 'D' refers to loan in default */ SELECT AVG(amount) FROM trans INNER JOIN loan ON trans.account_id = loan.account_id INNER JOIN card ON card.disp_id = trans.account_id WHERE loan.status = 'D'
SELECT COUNT(DISTINCT T1.district_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 > 6000 AND T2.A11 < 10000
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000 /* Answer the following: How many male customers have a loan with duration more than 24 months? Male means that gender = 'M'; duration more than 24 months refers to duration > 24; */ SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T3.duration > 24 /* Answer the following: How many male customers have a credit card of type 'classic'? Male means that gender = 'M'; type 'classic' refers to type = 'classic'; */ SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'M' AND T3.type = 'classic' /* Answer the following: How many male customers have made a transaction with operation 'withdrawal in cash'? Male means that gender = 'M'; operation 'withdrawal in cash' refers to operation = 'withdrawal in cash'; */ SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T3.operation = 'withdrawal in cash' /* Answer the following: How many male customers have made an order with k_symbol 'household'? Male means that gender = 'M'; k_symbol 'household' refers to k_symbol = 'household'; */ SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN `order` AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T3.k_symbol = 'household'
SELECT T1.account_id, MIN(T3.A11) - MAX(T3.A11) AS Gap FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T2.gender = 'F' GROUP BY T1.account_id ORDER BY T2.birth_date DESC, T3.A11 ASC LIMIT 1
SELECT T1.account_id FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id ORDER BY T2.birth_date DESC, T3.A11 DESC LIMIT 1
SELECT COUNT(*) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'
SELECT T1.client_id, T1.gender, T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T2.type = 'Disponent' AND T3.frequency = 'POPLATEK PO OBRATU'
SELECT T1.account_id, T1.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount ASC LIMIT 1
SELECT T1.account_id, T1.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND STRFTIME('%Y', T2.date) = '1993' ORDER BY T1.amount DESC LIMIT 1
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' AND T3.birth_date < '1950-01-01' AND T4.A2 = 'Sokolov'
SELECT account_id FROM account WHERE date = (SELECT MIN(date) FROM account WHERE STRFTIME('%Y', date) = '1995')
SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.amount > 3000
SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.issued = '1994-03-03'
SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'
SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'
SELECT MAX(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1996-10-21'
SELECT T3.gender FROM client AS T3 INNER JOIN disp AS T2 ON T3.client_id = T2.client_id INNER JOIN account AS T1 ON T2.account_id = T1.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T4.A11 = ( SELECT MAX(A11) FROM district ) ORDER BY T3.birth_date LIMIT 1
SELECT T5.amount FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN account AS T4 ON T3.account_id = T4.account_id INNER JOIN trans AS T5 ON T4.account_id = T5.account_id WHERE T3.amount = ( SELECT MAX(amount) FROM loan ) ORDER BY T5.date ASC LIMIT 1
SELECT COUNT(DISTINCT T2.client_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.A2 = 'Jesenik' AND T4.gender = 'F'
SELECT T1.disp_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 5100 AND STRFTIME('%Y-%m-%d', T2.date) = '1998-09-02'
SELECT COUNT(account_id) FROM account AS a INNER JOIN district AS d ON a.district_id = d.district_id WHERE d.A2 = 'Litomerice' AND STRFTIME('%Y', a.date) = '1996'
SELECT T3.A2 FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'
SELECT T3.birth_date FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.amount = 98832 AND T1.date = '1996-01-03'
SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1
SELECT CAST(SUM(CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'south Bohemia' AND T1.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia')
SELECT (CAST((SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1998-12-27') AS REAL) - (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1993-03-22')) / (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1993-03-22') * 100 AS increase_rate FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1)
SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan /* Answer the following: What is the percentage of clients who have a credit card? Having a credit card refers to having a record in the card table; Percentage of clients by condition = [(total(client_id) & condition) / (total client_id)] * 100% */ SELECT CAST(COUNT(DISTINCT T2.client_id) AS REAL) * 100 / COUNT(DISTINCT T1.client_id) FROM client AS T1 LEFT JOIN disp AS T2 ON T1.client_id = T2.client_id LEFT JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.card_id IS NOT NULL /* Answer the following: What is the percentage of transactions that are withdrawal in cash? Withdrawal in cash refers to operation = 'Withdrawal in Cash'; Percentage of transactions by condition = [(total(trans_id) & condition) / (total trans_id)] * 100% */ SELECT CAST(SUM(CASE WHEN operation = 'Withdrawal in Cash' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(trans_id) FROM trans /* Answer the following: What is the percentage of accounts that have a loan? Having a loan refers to having a record in the loan table; Percentage of accounts by condition = [(total(account_id) & condition) / (total account_id)] * 100% */ SELECT CAST(COUNT(DISTINCT T2.account_id) AS REAL) * 100 / COUNT(DISTINCT T1.account_id) FROM account AS T1 LEFT JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.loan_id IS NOT NULL /* Answer the following: What is the percentage of clients who are female? Female refers to gender = 'Female'; Percentage of clients by condition = [(total(client_id) & condition) / (total client_id)] * 100% */ SELECT CAST(SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(client_id) FROM client /* Answer the following: What is the percentage of orders that are remittance to another bank? Remittance to another bank refers to k_symbol = 'Remittance to Another Bank'; Percentage of orders by condition = [(total(order_id) & condition) / (total order_id)] * 100% */ SELECT CAST(SUM(CASE WHEN k_symbol = 'Remittance to Another Bank' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(order_id) FROM `order`
SELECT CAST(SUM(CASE WHEN T1.status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM loan AS T1 WHERE T1.amount < 100000
SELECT T1.account_id, T4.A2 AS district_name, T4.A3 AS district_region FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE STRFTIME('%Y', T1.date) = '1993' AND T3.type = 'POPLATEK PO OBRATU'
SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN 1995 AND 2000
SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'
SELECT T2.A2 AS district, T2.A3 AS region FROM loan AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.loan_id = 4990 /* Answer the following: What is the type of card issued to the client with client_id '2876'? */ SELECT T2.type FROM client AS T1 INNER JOIN card AS T2 ON T1.client_id = T2.disp_id WHERE T1.client_id = 2876 /* Answer the following: What is the balance of the account with account_id '1256' on the date '1998-12-31'? */ SELECT T1.balance FROM trans AS T1 WHERE T1.account_id = 1256 AND T1.date = '1998-12-31' /* Answer the following: What is the amount of loan taken by the account with account_id '1256'? */ SELECT T1.amount FROM loan AS T1 WHERE T1.account_id = 1256 /* Answer the following: What is the frequency of transactions for the account with account_id '1256'? */ SELECT T1.frequency FROM account AS T1 WHERE T1.account_id = 1256 /* Answer the following: What is the status of the loan with loan_id '4990'? */ SELECT T1.status FROM loan AS T1 WHERE T1.loan_id = 4990 /* Answer the following: What is the gender of the client with client_id '2876'? */ SELECT T1.gender FROM client AS T1 WHERE T1.client_id = 2876 /* Answer the following: What is the birth date of the client with client_id '2876'? */ SELECT T1.birth_date FROM client AS T1 WHERE T1.client_id = 2876 /* Answer the following: What is the type of disposition for the account with account_id '1256'? */ SELECT T1.type FROM disp AS T1 WHERE T1.account_id = 1256 /* Answer the following: What is the amount of the order with order_id '5678'? */ SELECT T1.amount FROM `order` AS T1 WHERE T1.order_id = 5678 /* Answer the following: What is the bank to which the order with order_id '5678' is made? */ SELECT T1.bank_to FROM `order` AS T1 WHERE T1.order_id = 5678 /* Answer the following: What is the account to which the order with order_id '5678' is made? */ SELECT T1.account_to FROM `order` AS T1 WHERE T1.order_id = 5678 /* Answer the following: What is the type of transaction for the transaction with trans_id '7890'? */ SELECT T1.type FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the operation of the transaction with trans_id '7890'? */ SELECT T1.operation FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the amount of the transaction with trans_id '7890'? */ SELECT T1.amount FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the balance of the account after the transaction with trans_id '7890'? */ SELECT T1.balance FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the bank of the transaction with trans_id '7890'? */ SELECT T1.bank FROM trans AS T1 WHERE T1.trans_id = 7890 /* Answer the following: What is the account of the transaction with trans_id '7890'? */ SELECT T1.account FROM trans AS T1 WHERE T1.trans_id = 7890
SELECT T1.account_id, T2.A2 AS district, T2.A3 AS region FROM loan AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.amount > 300000
SELECT T1.loan_id, T3.A3 AS district, T3.A11 AS average_salary FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 60
SELECT T3.A3 AS district, T3.A2 AS state, ((T3.A13 - T3.A12) / T3.A12) * 100 AS unemployment_rate_increment FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'
SELECT CAST(COUNT(CASE WHEN T2.A2 = 'Decin' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) = '1993'
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE' /* Answer the following: List the card IDs of the clients who are male and were born after 1980. */ SELECT card_id FROM card INNER JOIN disp ON card.disp_id = disp.disp_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M' AND client.birth_date > '1980-12-31' /* Answer the following: List the loan IDs of the accounts that have a loan duration of more than 24 months and a loan amount of more than 50000. */ SELECT loan_id FROM loan WHERE duration > 24 AND amount > 50000 /* Answer the following: List the order IDs of the accounts that have made orders to the bank 'YZ' with an amount of more than 5000. */ SELECT order_id FROM `order` WHERE bank_to = 'YZ' AND amount > 5000 /* Answer the following: List the transaction IDs of the accounts that have made a withdrawal of more than 10000. 'VYBER' stands for withdrawal */ SELECT trans_id FROM trans WHERE type = 'VYBER' AND amount > 10000
SELECT T2.A2 FROM disp AS T1 INNER JOIN client AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T4 ON T1.account_id = T4.account_id INNER JOIN district AS T2 ON T4.district_id = T2.district_id WHERE T3.gender = 'F' GROUP BY T2.A2 ORDER BY COUNT(T1.disp_id) DESC LIMIT 10
SELECT T2.A2, T1.amount FROM trans AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.type = 'VYDAJ' AND STRFTIME('%Y-%m', T1.date) = '1996-01' ORDER BY T1.amount DESC LIMIT 10
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id LEFT JOIN disp AS T3 ON T1.account_id = T3.account_id LEFT JOIN card AS T4 ON T3.disp_id = T4.disp_id WHERE T2.A3 = 'South Bohemia' AND T4.card_id IS NULL
SELECT A3 FROM district WHERE district_id = ( SELECT district_id FROM account WHERE account_id = ( SELECT account_id FROM loan WHERE status IN ('C', 'D') GROUP BY account_id ORDER BY COUNT(loan_id) DESC LIMIT 1 ) )
SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'
SELECT A2 AS district_name, A4 AS branch_location FROM district WHERE A13 = ( SELECT MAX(A13) FROM district )
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1 )
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.operation = 'VYBER KARTOU' AND T1.frequency = 'POPLATEK MESICNE' AND T2.balance < 0
SELECT COUNT(DISTINCT T2.loan_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T2.amount >= 250000 AND T1.frequency = 'POPLATEK MESICNE' AND T2.status = 'approved'
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A2 = 'Branch location 1' AND (T2.status = 'C' OR T2.status = 'D')
SELECT COUNT(T3.gender) FROM district AS T1 INNER JOIN disp AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.A15 = (SELECT MAX(A15) FROM district WHERE A15 < (SELECT MAX(A15) FROM district)) AND T3.gender = 'M' /* Answer the following: How many male clients have a credit card issued in 1996? Male refers to gender = 'M'; 1996 refers to year(issued) = 1996; */ SELECT COUNT(T3.gender) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE strftime('%Y', T1.issued) = '1996' AND T3.gender = 'M' /* Answer the following: How many male clients have a loan with duration more than 24 months? Male refers to gender = 'M'; duration more than 24 months refers to duration > 24; */ SELECT COUNT(T3.gender) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.duration > 24 AND T3.gender = 'M' /* Answer the following: How many male clients have made transactions with operation type 'withdrawal in cash'? Male refers to gender = 'M'; 'withdrawal in cash' refers to operation = 'withdrawal in cash'; */ SELECT COUNT(T3.gender) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.operation = 'withdrawal in cash' AND T3.gender = 'M' /* Answer the following: How many male clients have made transactions with operation type 'credit in cash'? Male refers to gender = 'M'; 'credit in cash' refers to operation = 'credit in cash'; */ SELECT COUNT(T3.gender) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.operation = 'credit in cash' AND T3.gender = 'M'
SELECT COUNT(DISTINCT T2.card_id) FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'disponent' AND T2.type = 'gold'
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A2 = 'Pisek' )
SELECT DISTINCT T3.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T1.amount > 10000
SELECT account_id FROM `order` WHERE k_symbol = 'SIPO' AND bank_to = 'Pisek'
SELECT T1.account_id FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T2.type IN ('gold', 'junior') GROUP BY T1.account_id HAVING COUNT(DISTINCT T2.type) = 2 /* Answer the following: What are the clients who have taken a loan and have a credit card? */ SELECT T1.client_id FROM disp AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id GROUP BY T1.client_id /* Answer the following: What are the clients who have made a transaction of more than 5000? */ SELECT T1.client_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount > 5000 GROUP BY T1.client_id /* Answer the following: What are the clients who have an account in the same district as they live? */ SELECT T1.client_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.district_id = T2.district_id /* Answer the following: What are the clients who have an account but do not have a credit card? */ SELECT T1.client_id FROM disp AS T1 LEFT JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T2.card_id IS NULL /* Answer the following: What are the clients who have made a transaction of type 'withdrawal' and the amount is more than 5000? */ SELECT T1.client_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'withdrawal' AND T2.amount > 5000 GROUP BY T1.client_id /* Answer the following: What are the clients who have a loan that is 'running contract' and payments are more than 2000? */ SELECT T1.client_id FROM disp AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status = 'running contract' AND T2.payments > 2000 GROUP BY T1.client_id /* Answer the following: What are the clients who have made a transaction of type 'credit' and the amount is less than 1000? */ SELECT T1.client_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'credit' AND T2.amount < 1000 GROUP BY T1.client_id /* Answer the following: What are the clients who have an account and have made an order? */ SELECT T1.client_id FROM disp AS T1 INNER JOIN `order` AS T2 ON T1.account_id = T2.account_id GROUP BY T1.client_id /* Answer the following: What are the clients who have a loan and the loan amount is more than 50000? */ SELECT T1.client_id FROM disp AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.amount > 50000 GROUP BY T1.client_id
SELECT AVG(T1.amount) FROM trans AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.disp_id WHERE T1.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T1.date) = '2021' AND STRFTIME('%m', T1.date) = '01'
SELECT T1.disp_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T2.date) = '1998' GROUP BY T1.disp_id HAVING AVG(T2.amount) < (SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND STRFTIME('%Y', date) = '1998')
SELECT DISTINCT T1.client_id, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN account AS T4 ON T2.account_id = T4.account_id INNER JOIN loan AS T5 ON T4.account_id = T5.account_id WHERE T1.gender = 'F' AND T3.type = 'credit'
SELECT COUNT(DISTINCT T2.account_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'F' AND T3.A3 = 'south Bohemia'
SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.A2 = 'Tabor' AND T3.type = 'OWNER'
SELECT DISTINCT account.frequency FROM account JOIN district ON account.district_id = district.district_id LEFT JOIN loan ON account.account_id = loan.account_id WHERE loan.account_id IS NULL AND district.A11 > 8000 AND district.A11 <= 9000
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'North Bohemia' AND T3.bank = 'AB'
SELECT DISTINCT T2.A2 FROM trans AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.type = 'VYDAJ'
SELECT A3, AVG(A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE A15 > 4000 AND YEAR(T2.date) >= 1997 GROUP BY A3
SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'
SELECT CAST(SUM(CASE WHEN type = 'Gold' AND STRFTIME('%Y', issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM card
SELECT T3.gender, T3.birth_date FROM client AS T3 INNER JOIN disp AS T2 ON T3.client_id = T2.client_id INNER JOIN loan AS T1 ON T2.account_id = T1.account_id ORDER BY T1.amount DESC LIMIT 1
SELECT A15 FROM district WHERE district_id = ( SELECT district_id FROM account WHERE account_id = 532 )
SELECT T1.district_id FROM account AS T1 INNER JOIN `order` AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 33333
SELECT T1.trans_id, T1.date, T1.amount, T1.balance FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 3356 AND T1.operation = 'VYBER'
SELECT COUNT(DISTINCT A.account_id) FROM account AS A INNER JOIN loan AS L ON A.account_id = L.account_id WHERE A.frequency = 'POPLATEK TYDNE' AND L.amount < 200000
SELECT T2.type FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.client_id = 13539
SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541 /* Answer the following: What is the type of the card issued to the client with the id 3541? */ SELECT T2.type FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.client_id = 3541 /* Answer the following: What is the amount of the loan taken by the client with the id 3541? */ SELECT T2.amount FROM disp AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.client_id = 3541 /* Answer the following: What is the total amount of transactions made by the client with the id 3541? */ SELECT SUM(T2.amount) FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.client_id = 3541 /* Answer the following: What is the bank to which the client with the id 3541 made the most orders? */ SELECT T2.bank_to, COUNT(*) AS count FROM disp AS T1 INNER JOIN `order` AS T2 ON T1.account_id = T2.account_id WHERE T1.client_id = 3541 GROUP BY T2.bank_to ORDER BY count DESC LIMIT 1
SELECT T.district_id FROM ( SELECT T1.district_id, COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status = 'A' GROUP BY T1.district_id ) AS T ORDER BY COUNT(T1.account_id) DESC LIMIT 1
SELECT T2.client_id FROM `order` AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 32423
SELECT * FROM trans WHERE account_id IN ( SELECT account_id FROM account WHERE district_id = 5 )
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A3 = 'Jesenik' )
SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T3.issued >= '1997-01-01'
SELECT CAST(SUM(IIF(T3.gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T2.client_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.district_id IN (SELECT district_id FROM district WHERE A11 > 10000)
SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', T2.date) = '1997' THEN T2.amount ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.date) = '1996' THEN T2.amount ELSE 0 END)) / SUM(CASE WHEN strftime('%Y', T2.date) = '1996' THEN T2.amount ELSE 0 END) FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'M' AND strftime('%Y', T2.date) BETWEEN '1996' AND '1997'
SELECT COUNT(trans_id) FROM trans WHERE operation = 'VYBER KARTOU' AND STRFTIME('%Y', date) > '1995'
SELECT (SELECT A16 FROM district WHERE A3 = 'North Bohemia') - (SELECT A16 FROM district WHERE A3 = 'East Bohemia') AS difference_in_crimes FROM district WHERE A3 IN ('North Bohemia', 'East Bohemia') AND A14 = 1996 /* Answer the following: How many clients are there in the district with the highest crime rate? The highest crime rate refers to max(A13) */ SELECT COUNT(client_id) FROM client WHERE district_id = (SELECT district_id FROM district ORDER BY A13 DESC LIMIT 1) /* Answer the following: What is the average loan amount for clients who have a credit card? clients who have a credit card refers to disp_id in card table */ SELECT AVG(amount) FROM loan WHERE account_id IN (SELECT account_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card)) /* Answer the following: How many transactions were made by clients who are owners of their accounts? clients who are owners of their accounts refers to type = 'OWNER' in disp table */ SELECT COUNT(trans_id) FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE type = 'OWNER') /* Answer the following: What is the total amount of loan taken by clients who do not have a credit card? clients who do not have a credit card refers to disp_id not in card table */ SELECT SUM(amount) FROM loan WHERE account_id IN (SELECT account_id FROM disp WHERE disp_id NOT IN (SELECT disp_id FROM card))
SELECT type, COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 GROUP BY type
SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.amount = 3539
SELECT T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.account_id = 130
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'
SELECT T1.amount, T2.status FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 992 /* Answer the following: What is the type of card that client number 992 has? */ SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 992 /* Answer the following: What is the total amount of transactions made by client number 992? */ SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 992 /* Answer the following: What is the total amount of orders made by client number 992? */ SELECT SUM(T1.amount) FROM `order` AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 992 /* Answer the following: What is the frequency of account updates for client number 992? */ SELECT T1.frequency FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 992 /* Answer the following: What is the district of client number 992? */ SELECT T1.A2, T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 992
SELECT T1.balance, T3.gender FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.trans_id = 851 AND T3.client_id = 4 /* Answer the following: What is the total amount of loan that account number 5 has? */ SELECT SUM(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id = 5 /* Answer the following: What is the total amount of orders that account number 6 has made? */ SELECT SUM(T1.amount) FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id = 6 /* Answer the following: What is the type of card that client number 7 has? */ SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 7 /* Answer the following: What is the total amount of transactions that account number 8 has made? */ SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id = 8 /* Answer the following: What is the gender of the client who owns the account with the most transactions? */ SELECT T3.gender FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id GROUP BY T1.account_id ORDER BY COUNT(T1.trans_id) DESC LIMIT 1 /* Answer the following: What is the total amount of loan that the client with the most transactions has? */ SELECT SUM(T4.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id GROUP BY T1.account_id ORDER BY COUNT(T1.trans_id) DESC LIMIT 1
SELECT T2.type FROM client AS T1 INNER JOIN card AS T2 ON T1.client_id = T2.disp_id WHERE T1.client_id = 9
SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 617 AND STRFTIME('%Y', T1.date) = '1998'
SELECT T1.client_id, T1.birth_date, T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND T2.A3 = 'East Bohemia'
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3 /* Answer the following: Please provide the IDs of the 3 male clients with the smallest loans. Male refers to gender = 'M' */ SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' ORDER BY T3.amount ASC LIMIT 3 /* Answer the following: Please provide the IDs of the 3 clients with the most transactions. */ SELECT T1.client_id, COUNT(T3.trans_id) AS transaction_count FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id GROUP BY T1.client_id ORDER BY transaction_count DESC LIMIT 3 /* Answer the following: Please provide the IDs of the 3 clients with the least transactions. */ SELECT T1.client_id, COUNT(T3.trans_id) AS transaction_count FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id GROUP BY T1.client_id ORDER BY transaction_count ASC LIMIT 3 /* Answer the following: Please provide the IDs of the 3 clients with the highest balance. */ SELECT T1.client_id, MAX(T3.balance) AS max_balance FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id GROUP BY T1.client_id ORDER BY max_balance DESC LIMIT 3 /* Answer the following: Please provide the IDs of the 3 clients with the lowest balance. */ SELECT T1.client_id, MIN(T3.balance) AS min_balance FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id GROUP BY T1.client_id ORDER BY min_balance ASC LIMIT 3
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1974' AND '1976' AND T3.k_symbol = 'SIPO' AND T3.amount > 4000
SELECT COUNT(account_id) FROM account AS a INNER JOIN district AS d ON a.district_id = d.district_id WHERE d.A3 = 'Beroun' AND STRFTIME('%Y', a.date) > '1996'
SELECT COUNT(DISTINCT T2.client_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.type = 'junior' AND T3.gender = 'F'
SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A3 = 'Prague'
SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE' AND T2.type = 'USER'
SELECT T1.account_id, T1.date, T2.amount FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration > 24 AND T1.date < '1997-01-01' ORDER BY T2.amount ASC LIMIT 1
SELECT account.account_id FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' GROUP BY account.account_id HAVING AVG(district.A11) = (SELECT MIN(AVG(district.A11)) FROM district JOIN client ON district.district_id = client.district_id WHERE client.gender = 'F') ORDER BY client.birth_date DESC LIMIT 1
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE strftime('%Y', T1.birth_date) LIKE '192%' AND T2.A3 = 'east Bohemia'
SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE'
SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.status IN ('C', 'D') AND T2.k_symbol = 'POPLATEK PO OBRATU'
SELECT T1.client_id, T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'OWNER'
SELECT T1.client_id, DATE_PART('year', AGE(T1.birth_date)) AS age FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T3.type = 'gold'
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'cl'
SELECT AVG(CASE WHEN T1.element = 'O' THEN 1 ELSE 0 END) AS avg_oxygen FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T1.molecule_id WHERE T3.label = '+'
SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.element = 'na'
SELECT molecule_id FROM molecule WHERE label = '+' AND molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '#' )
SELECT CAST(SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '='
SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#'
SELECT COUNT(atom_id) FROM atom WHERE element != 'br'
SELECT COUNT(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'
SELECT molecule_id FROM atom WHERE element = 'si'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'
SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = 'double'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1
SELECT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'Te'
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.label = '-'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1
SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE (T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20') OR (T1.atom_id = 'TR004_20' AND T1.atom_id2 = 'TR004_8')
SELECT label FROM molecule WHERE molecule_id NOT IN ( SELECT molecule_id FROM atom WHERE element = 'sn' )
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element IN ('i', 's') AND b.bond_type = '-'
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'
SELECT T3.atom_id2 FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = 'TR181'
SELECT CAST(SUM(CASE WHEN T2.element != 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T1.bond_id = T3.bond_id WHERE T2.molecule_id = 'TR001' AND T3.bond_id = 'TR001_2_6'
SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS DIFF FROM molecule
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5'
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' ORDER BY T1.label ASC LIMIT 5
SELECT CAST(SUM(CASE WHEN T1.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 WHERE T1.molecule_id = 'TR008'
SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) FROM molecule
SELECT CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom_id) FROM atom WHERE molecule_id = 'TR206'
SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000'
SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'
SELECT T2.bond_type, T3.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T1.molecule_id = 'TR018' GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_type) DESC LIMIT 1
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T2.bond_type = 'single' AND T1.label != 'carcinogenic' GROUP BY T1.label ORDER BY T1.label ASC LIMIT 3
SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR006' ORDER BY T2.bond_type ASC LIMIT 2
SELECT COUNT(bond_id) FROM connected WHERE (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12') AND bond_id LIKE 'TR009_%'
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'br'
SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9'
SELECT T2.label, CASE WHEN T2.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS Carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'
SELECT COUNT(bond_id) FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19'
SELECT element FROM atom WHERE molecule_id = 'TR004'
SELECT COUNT(molecule_id) FROM molecule WHERE label = '-'
SELECT molecule_id FROM molecule WHERE label = '+' AND molecule_id IN (SELECT molecule_id FROM atom WHERE SUBSTRING(atom_id, 7, 2) BETWEEN 21 AND 25)
SELECT T3.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'p' AND T1.atom_id IN ( SELECT atom_id FROM atom WHERE element = 'n' )
SELECT CASE WHEN (SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id ORDER BY COUNT(bond_id) DESC LIMIT 1)) = '+' THEN 'Yes' ELSE 'No' END AS IsCarcinogenic
SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'I'
SELECT T2.bond_type, T2.bond_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45
SELECT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id FROM connected )
SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T4.label = 'TR447' AND T3.bond_type = '#'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR144_8_19'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '=' GROUP BY T1.label ORDER BY COUNT(T2.bond_type) DESC LIMIT 1
SELECT element FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1
SELECT T2.atom_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T1.atom_id IN ( SELECT atom_id FROM atom WHERE element = 'pb' )
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#'
SELECT CAST(COUNT(T1.bond_id) AS REAL) * 100 / (SELECT COUNT(T2.atom_id) FROM atom AS T2 INNER JOIN connected AS T3 ON T2.atom_id = T3.atom_id GROUP BY T2.element ORDER BY COUNT(T2.atom_id) DESC LIMIT 1) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id
SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
SELECT COUNT(atom_id) FROM atom WHERE element IN ('c', 'h')
SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'sulfur'
SELECT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'sn'
SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')
SELECT T2.bond_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT T3.molecule_id, T3.label FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.bond_type = '-' AND T3.label = '-'
SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')
SELECT molecule_id FROM molecule WHERE label = '-'
SELECT COUNT(molecule_id) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030'
SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_10_11'
SELECT COUNT(bond_id) FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'I'
SELECT CASE WHEN SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.label = '-' THEN 1 ELSE 0 END) THEN 'Carcinogenic' ELSE 'Non-Carcinogenic' END FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'
SELECT CASE WHEN COUNT(DISTINCT T1.element) = 2 THEN 'yes' ELSE 'no' END AS yn FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR001_1_8' AND T1.element IN ('cl', 'c')
SELECT molecule_id FROM ( SELECT molecule_id, COUNT(*) as triple_bond_count FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE element = 'c' AND bond_type = '#' GROUP BY molecule_id ) AS subquery INNER JOIN molecule ON subquery.molecule_id = molecule.molecule_id WHERE label = '-' AND triple_bond_count >= 2 LIMIT 2
SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR001'
SELECT molecule_id FROM bond WHERE bond_type = ' = '
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR005_16_26' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.label = '-'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_10_11'
SELECT T1.bond_id, CASE WHEN T2.label = '+' THEN 'Carcinogenic' WHEN T2.label = '-' THEN 'Non-carcinogenic' END AS Carcinogenic FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
SELECT T1.element, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, 7, 1) = '4' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') GROUP BY T1.element
SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.element), T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'
SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END AS Is_Carcinogenic FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'Ca'
SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'Te'
SELECT CASE WHEN T1.element = 'cl' THEN 'Chlorine' WHEN T1.element = 'c' THEN 'Carbon' WHEN T1.element = 'h' THEN 'Hydrogen' WHEN T1.element = 'o' THEN 'Oxygen' WHEN T1.element = 's' THEN 'Sulfur' WHEN T1.element = 'n' THEN 'Nitrogen' WHEN T1.element = 'p' THEN 'Phosphorus' WHEN T1.element = 'na' THEN 'Sodium' WHEN T1.element = 'br' THEN 'Bromine' WHEN T1.element = 'f' THEN 'Fluorine' WHEN T1.element = 'i' THEN 'Iodine' WHEN T1.element = 'sn' THEN 'Tin' WHEN T1.element = 'pb' THEN 'Lead' WHEN T1.element = 'te' THEN 'Tellurium' WHEN T1.element = 'ca' THEN 'Calcium' END AS 'Chemical Element' FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id
SELECT CAST(SUM(CASE WHEN T2.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR047'
SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END AS Carcinogenic FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_1'
SELECT CASE WHEN label = '+' THEN 'YES' ELSE 'NO' END FROM molecule WHERE molecule_id = 'TR151'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR151' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT COUNT(molecule_id) FROM molecule WHERE label = '+'
SELECT atom_id FROM atom WHERE element = 'c' AND CAST(SUBSTR(molecule_id, 3) AS INTEGER) BETWEEN 10 AND 50
SELECT COUNT(atom_id) FROM atom WHERE molecule_id = ( SELECT molecule_id FROM molecule WHERE label = '+' )
SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='
SELECT COUNT(atom_id) FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' ) AND element = 'H'
SELECT T2.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.atom_id = 'TR00_1' AND T3.bond_id = 'TR00_1_2'
SELECT atom_id FROM atom WHERE element = 'c' AND molecule_id NOT IN ( SELECT molecule_id FROM molecule WHERE label != '-' )
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END FROM molecule WHERE molecule_id = 'TR124'
SELECT atom.atom_id, atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = 'TR186'
SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR007_4_19' OR T2.atom_id2 = 'TR007_4_19'
SELECT CASE WHEN T1.element = 'cl' THEN 'Chlorine' WHEN T1.element = 'c' THEN 'Carbon' WHEN T1.element = 'h' THEN 'Hydrogen' WHEN T1.element = 'o' THEN 'Oxygen' WHEN T1.element = 's' THEN 'Sulfur' WHEN T1.element = 'n' THEN 'Nitrogen' WHEN T1.element = 'p' THEN 'Phosphorus' WHEN T1.element = 'na' THEN 'Sodium' WHEN T1.element = 'br' THEN 'Bromine' WHEN T1.element = 'f' THEN 'Fluorine' WHEN T1.element = 'i' THEN 'Iodine' WHEN T1.element = 'sn' THEN 'Tin' WHEN T1.element = 'pb' THEN 'Lead' WHEN T1.element = 'te' THEN 'Tellurium' WHEN T1.element = 'ca' THEN 'Calcium' END AS 'Element' FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_2_4'
SELECT COUNT(T2.bond_type), T3.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T1.molecule_id = 'TR006' AND T2.bond_type = ' = '
SELECT T1.label, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT T1.bond_id, T2.atom_id, T3.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN connected AS T3 ON T1.bond_id = T3.bond_id WHERE T1.bond_type = '-'
SELECT T4.label, T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T3.bond_type = '#' GROUP BY T4.label, T1.element
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_2_3'
SELECT COUNT(bond_id) FROM bond WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element = 'cl' )
SELECT T1.atom_id, COUNT(DISTINCT T3.bond_type) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.label = 'TR346' GROUP BY T1.atom_id
SELECT COUNT(DISTINCT T1.molecule_id), COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 LEFT JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN connected c ON a.atom_id = c.atom_id LEFT JOIN bond b ON c.bond_id = b.bond_id WHERE a.element != 's' AND b.bond_type != '='
SELECT T4.label FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T1.bond_id = 'TR001_2_4' AND T4.label = '+'
SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR005'
SELECT COUNT(bond_id) FROM bond WHERE bond_type = '-'
SELECT T3.label FROM atom AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'cl' AND T3.label = '+'
SELECT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'Cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'
SELECT COUNT(T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'
SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'
SELECT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id2 = 'TR000_4' AND T1.atom_id = 'TR000_2'
SELECT element FROM atom WHERE atom_id = 'TR000_1'
SELECT CASE WHEN label = '+' THEN 'Yes' WHEN label = '-' THEN 'No' ELSE 'Unknown' END AS Is_Carcinogenic FROM molecule WHERE molecule_id = 'TR000'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'
SELECT T4.label FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 's' AND T3.bond_type = '='
SELECT T1.molecule_id, T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '=' AND T1.molecule_id = 'TR024'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T4.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 'H' AND T3.bond_type = '#'
SELECT COUNT(molecule_id) FROM molecule WHERE label = '+'
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.molecule_id BETWEEN 'TR004' AND 'TR010'
SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'
SELECT COUNT(DISTINCT molecule_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE element = 'o' AND bond_type = ' = '
SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'
SELECT T1.element, T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.molecule_id = 'TR016'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'C' AND T3.bond_type = 'double' AND T1.molecule_id = 'TR012'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'
SELECT name FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT name FROM cards WHERE borderColor = 'borderless' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL)
SELECT name FROM cards WHERE faceConvertedManaCost = ( SELECT MAX(faceConvertedManaCost) FROM cards )
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100
SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'
SELECT T1.name, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.types = 'Artifact' AND T1.side IS NULL AND T2.format = 'vintage'
SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE (T1.power = '*' OR T1.power IS NULL) AND T2.format = 'commander' AND T2.status = 'Legal'
SELECT T1.name, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'
SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T2.uuid ORDER BY COUNT(T2.uuid) DESC LIMIT 1
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = '29'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'
SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
SELECT T1.setCode, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'
SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd'
SELECT keywords FROM cards WHERE name = 'Angel of Mercy'
SELECT COUNT(id) FROM cards WHERE power = '*'
SELECT promoTypes FROM cards WHERE name = 'Duress'
SELECT borderColor FROM cards WHERE name = 'Ancestor's Chosen' /* Answer the following: What is the text of the ruling for card "Ancestor's Chosen"? */ SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Ancestor's Chosen') /* Answer the following: What is the legality of card "Ancestor's Chosen" in the "Standard" format? */ SELECT status FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Ancestor's Chosen') AND format = 'Standard' /* Answer the following: What is the set name of card "Ancestor's Chosen"? */ SELECT name FROM sets WHERE code = (SELECT setCode FROM cards WHERE name = 'Ancestor's Chosen') /* Answer the following: What is the translated set name of card "Ancestor's Chosen" in French? */ SELECT translation FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Ancestor's Chosen') AND language = 'French'
SELECT originalType FROM cards WHERE name = 'Ancestor's Chosen'
SELECT T3.language FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T1.name = 'Angel of Mercy' GROUP BY T3.language /* Answer the following: What are the legalities of the card 'Angel of Mercy'? 'Angel of Mercy' is the name of card; legalities refers to format and status */ SELECT T2.format, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Angel of Mercy' /* Answer the following: What are the rulings of the card 'Angel of Mercy'? 'Angel of Mercy' is the name of card; rulings refers to date and text */ SELECT T2.date, T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Angel of Mercy' /* Answer the following: What are the foreign data of the card 'Angel of Mercy'? 'Angel of Mercy' is the name of card; foreign data refers to language, name, text, and type */ SELECT T2.language, T2.name, T2.text, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Angel of Mercy'
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'restricted' AND T1.isTextless = 0
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'
SELECT COUNT(*) FROM cards WHERE isStarter = 1 AND uuid IN ( SELECT uuid FROM legalities WHERE status = 'restricted' )
SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'
SELECT type FROM cards WHERE name = 'Benalish Knight'
SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'
SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'
SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1 /* Answer the following: How many cards are legal in the "Commander" format? "Commander" is the format; legal refers to status = 'Legal' */ SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Commander' AND T2.status = 'Legal' /* Answer the following: How many cards from the set "Throne of Eldraine" have been reprinted? "Throne of Eldraine" is the set; reprinted refers to isReprint = 1; */ SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Throne of Eldraine' AND T1.isReprint = 1 /* Answer the following: How many cards from the set "Throne of Eldraine" have a rarity of "Mythic Rare"? "Throne of Eldraine" is the set; "Mythic Rare" is the rarity; */ SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Throne of Eldraine' AND T1.rarity = 'Mythic Rare'
SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'
SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1
SELECT COUNT(id) FROM cards WHERE toughness = '99'
SELECT name FROM cards WHERE artist = 'Aaron Boyd'
SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'
SELECT id FROM cards WHERE convertedManaCost = 0
SELECT layout FROM cards WHERE keywords LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL /* Answer the following: What are the names of the cards that are legal in the 'Commander' format? */ SELECT name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'Commander' AND legalities.status = 'Legal' /* Answer the following: What are the names of the cards that have been ruled on the date '2020-01-01'? */ SELECT name FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE rulings.date = '2020-01-01' /* Answer the following: What are the names of the cards that have a German translation? */ SELECT name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' /* Answer the following: What are the names of the cards that are part of the set with the code 'ABC'? */ SELECT name FROM cards WHERE setCode = 'ABC'
SELECT id FROM cards WHERE duelDeck = 'a'
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'
SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'
SELECT T1.uuid, T2.language FROM legalities AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.format = 'legacy'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'
SELECT COUNT(T1.id), T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'legal'
SELECT T1.name, T1.colors FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.code = 'OGW'
SELECT T1.name, T4.language, T4.translation FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T4 ON T2.code = T4.setCode WHERE T2.code = '10E' AND T1.convertedManaCost = 5
SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'
SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20 /* Answer the following: What are the names of the cards that are legal in 'Standard' format and have a converted mana cost of 3? 'Standard' format refers to format = 'Standard'; converted mana cost of 3 refers to convertedManaCost = 3; */ SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Standard' AND T1.convertedManaCost = 3 /* Answer the following: What are the names of the cards that are banned in 'Modern' format and have a power of 5? 'Modern' format refers to format = 'Modern'; banned refers to status = 'Banned'; power of 5 refers to power = '5'; */ SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Modern' AND T2.status = 'Banned' AND T1.power = '5' /* Answer the following: What are the names of the cards that are legal in 'Legacy' format and have a toughness of 4? 'Legacy' format refers to format = 'Legacy'; toughness of 4 refers to toughness = '4'; */ SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Legacy' AND T1.toughness = '4' /* Answer the following: What are the names of the cards that are legal in 'Vintage' format and have a converted mana cost of 2? 'Vintage' format refers to format = 'Vintage'; converted mana cost of 2 refers to convertedManaCost = 2; */ SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Vintage' AND T1.convertedManaCost = 2 /* Answer the following: What are the names of the cards that are legal in 'Commander' format and have a converted mana cost of 1? 'Commander' format refers to format = 'Commander'; converted mana cost of 1 refers to convertedManaCost = 1; */ SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Commander' AND T1.convertedManaCost = 1 /* Answer the following: What are the names of the cards that are legal in 'Pioneer' format and have a converted mana cost of 4? 'Pioneer' format refers to format = 'Pioneer'; converted mana cost of 4 refers to convertedManaCost = 4; */ SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Pioneer' AND T1.convertedManaCost = 4 /* Answer the following: What are the names of the cards that are legal in 'Pauper' format and have a converted mana cost of 5? 'Pauper' format refers to format = 'Pauper'; converted mana cost of 5 refers to convertedManaCost = 5; */ SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Pauper' AND T1.convertedManaCost = 5 /* Answer the following: What are the names of the cards that are legal in 'Historic' format and have a converted mana cost of 6? 'Historic' format refers to format = 'Historic'; converted mana cost of 6 refers to convertedManaCost = 6; */ SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Historic' AND T1.convertedManaCost = 6 /* Answer the following: What are the names of the cards that are legal in 'Brawl' format and have a converted mana cost of 7? 'Brawl' format refers to format = 'Brawl'; converted mana cost of 7 refers to convertedManaCost = 7; */ SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'Brawl' AND T1.convertedManaCost = 7
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'
SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3;
SELECT COUNT(id) FROM cards WHERE artist = 'John Avon' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL AND power IS NULL
SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(id) FROM cards WHERE artist LIKE 'UDON' AND availability LIKE 'mtgo' AND hand = '-1'
SELECT COUNT(id) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1
SELECT name, manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND (availability = 'paper' OR availability = 'mtgo')
SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander'
SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena'
SELECT setCode FROM set_translations WHERE language = 'Spanish'
SELECT CAST(COUNT(hand) AS REAL) * 100 / ( SELECT COUNT(frameEffects) FROM cards WHERE frameEffects = 'legendary' ) FROM cards WHERE frameEffects = 'legendary' AND hand = '+3' /* Answer the following: What is the average converted mana cost of cards that are not reprints? not reprints refer to isReprint = 0; average converted mana cost refers to AVG(convertedManaCost) */ SELECT AVG(convertedManaCost) FROM cards WHERE isReprint = 0 /* Answer the following: What is the name of the set with the most cards? most cards refers to MAX(baseSetSize) */ SELECT name FROM sets ORDER BY baseSetSize DESC LIMIT 1 /* Answer the following: What is the most common format in which cards are legal? most common format refers to MAX(COUNT(format)) */ SELECT format FROM legalities GROUP BY format ORDER BY COUNT(format) DESC LIMIT 1 /* Answer the following: What is the average base set size of sets that are not online only? not online only refers to isOnlineOnly = 0; average base set size refers to AVG(baseSetSize) */ SELECT AVG(baseSetSize) FROM sets WHERE isOnlineOnly = 0 /* Answer the following: What is the name of the card with the highest power? highest power refers to MAX(power) */ SELECT name FROM cards ORDER BY power DESC LIMIT 1 /* Answer the following: What is the most common color identity of cards? most common color identity refers to MAX(COUNT(colorIdentity)) */ SELECT colorIdentity FROM cards GROUP BY colorIdentity ORDER BY COUNT(colorIdentity) DESC LIMIT 1 /* Answer the following: What is the average edhrec rank of cards that are not reprints? not reprints refer to isReprint = 0; average edhrec rank refers to AVG(edhrecRank) */ SELECT AVG(edhrecRank) FROM cards WHERE isReprint = 0 /* Answer the following: What is the name of the card with the highest toughness? highest toughness refers to MAX(toughness) */ SELECT name FROM cards ORDER BY toughness DESC LIMIT 1 /* Answer the following: What is the most common rarity of cards? most common rarity refers to MAX(COUNT(rarity)) */ SELECT rarity FROM cards GROUP BY rarity ORDER BY COUNT(rarity) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN isStorySpotlight = 1 THEN 1 ELSE 0 END) AS percentage, id FROM cards GROUP BY id
SELECT CAST(SUM(CASE WHEN T1.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) AS percentage, T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid GROUP BY T2.name
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309
SELECT COUNT(setCode) FROM set_translations WHERE language = 'Portuguese (Brasil)' AND setCode IN ( SELECT code FROM sets WHERE block = 'Commander' )
SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'legal' AND T1.types LIKE '%Creature%'
SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'pre-modern' AND T3.text = 'This is a triggered mana ability' AND T1.side IS NULL
SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper' AND uuid IN ( SELECT uuid FROM legalities WHERE format = 'pauper' )
SELECT artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.text = 'Das perfekte Gegenmittel zu einer dichten Formation'
SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist LIKE 'Matthew D. Wilson' AND T1.borderColor LIKE 'black' AND T1.type LIKE 'Creature' AND T1.layout LIKE 'normal' AND T2.language LIKE 'French'
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10'
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 180 AND T1.block = 'Ravnica'
SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal'
SELECT CAST(SUM(CASE WHEN T2.language = 'French' AND (T1.power IS NULL OR T1.power = '*') THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.power IS NULL OR T1.power = '*' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
SELECT CAST(SUM(CASE WHEN T1.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese'
SELECT availability FROM cards WHERE artist = 'Daren Bader'
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000 /* Answer the following: What are the names of the cards that have a converted mana cost of 5 and are part of a set that was released after 2010? converted mana cost of 5 refers to convertedManaCost = 5; set that was released after 2010 refers to releaseDate > '2010-12-31' */ SELECT cards.name FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.convertedManaCost = 5 AND sets.releaseDate > '2010-12-31' /* Answer the following: How many cards have a power greater than 5 and are legal in the 'Commander' format? power greater than 5 refers to power > 5; legal in the 'Commander' format refers to format = 'Commander' and status = 'Legal' */ SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.power > 5 AND legalities.format = 'Commander' AND legalities.status = 'Legal' /* Answer the following: What are the names of the cards that have the keyword 'Flying' and are part of a set that is online only? keyword 'Flying' refers to keywords LIKE '%Flying%'; part of a set that is online only refers to isOnlineOnly = 1 */ SELECT cards.name FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.keywords LIKE '%Flying%' AND sets.isOnlineOnly = 1 /* Answer the following: How many cards have a toughness greater than 7 and are part of a set that is not online only? toughness greater than 7 refers to toughness > 7; part of a set that is not online only refers to isOnlineOnly = 0 */ SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.toughness > 7 AND sets.isOnlineOnly = 0 /* Answer the following: What are the names of the cards that have a converted mana cost of 3 and are part of a set that was released before 2000? converted mana cost of 3 refers to convertedManaCost = 3; set that was released before 2000 refers to releaseDate < '2000-01-01' */ SELECT cards.name FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.convertedManaCost = 3 AND sets.releaseDate < '2000-01-01'
SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1 /* Answer the following: What are the names of the cards that are in German language? German language refers to language = 'German'; names of the cards refers to name */ SELECT name FROM foreign_data WHERE language = 'German' /* Answer the following: What are the formats of the cards that are legal? legal refers to status = 'Legal'; formats of the cards refers to format */ SELECT format FROM legalities WHERE status = 'Legal' /* Answer the following: What are the names of the sets that are only available online? only available online refers to isOnlineOnly = 1; names of the sets refers to name */ SELECT name FROM sets WHERE isOnlineOnly = 1 /* Answer the following: What are the translations of the sets in French language? French language refers to language = 'French'; translations of the sets refers to translation */ SELECT translation FROM set_translations WHERE language = 'French' /* Answer the following: What are the texts of the rulings that were made on '2020-01-01'? made on '2020-01-01' refers to date = '2020-01-01'; texts of the rulings refers to text */ SELECT text FROM rulings WHERE date = '2020-01-01'
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3
SELECT language FROM foreign_data WHERE multiverseid = 149934
SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3
SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(isTextless) FROM cards
SELECT cards.number FROM cards WHERE cards.otherFaceIds IS NULL AND cards.subtypes LIKE '%Angel%' AND cards.subtypes LIKE '%Wizard%'
SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3 /* Answer the following: Please list all the cards that are not legal in the 'Standard' format. not legal in the 'Standard' format refers to format = 'Standard' and status != 'Legal' */ SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'Standard' AND legalities.status != 'Legal' /* Answer the following: Please list all the cards that have no rulings. have no rulings refers to uuid not in rulings table */ SELECT name FROM cards WHERE uuid NOT IN (SELECT uuid FROM rulings) /* Answer the following: Please list all the cards that have no foreign data. have no foreign data refers to uuid not in foreign_data table */ SELECT name FROM cards WHERE uuid NOT IN (SELECT uuid FROM foreign_data) /* Answer the following: Please list all the cards that are not part of any set. not part of any set refers to setCode is NULL or setCode = '' */ SELECT name FROM cards WHERE setCode IS NULL OR setCode = ''
SELECT language FROM set_translations WHERE setCode = ( SELECT code FROM sets WHERE mcmName = 'Archenemy' AND code = 'ARC' )
SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 5
SELECT T1.language, T2.type FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.id = 206
SELECT T1.id, T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.block = 'Shadowmoor' ORDER BY T1.code ASC LIMIT 2
SELECT T1.id FROM sets AS T1 INNER JOIN foreign_data AS T2 ON T1.code = T2.uuid WHERE T1.isForeignOnly = 1 AND T1.isFoilOnly = 1 AND T2.language = 'Japanese'
SELECT T1.code FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' ORDER BY T1.baseSetSize DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.isOnlineOnly = 1 AND T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.isOnlineOnly) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')
SELECT id FROM cards WHERE borderColor = 'black'
SELECT id FROM cards WHERE frameEffects = 'extendedart'
SELECT name FROM cards WHERE borderColor = 'Black' AND isFullArt = 1
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.setCode WHERE T1.id = 174 /* Answer the following: What is the status of card with uuid "123abc" in different formats? */ SELECT T1.format, T1.status FROM legalities AS T1 WHERE T1.uuid = "123abc" /* Answer the following: What is the text of the ruling for card with uuid "456def"? */ SELECT T1.text FROM rulings AS T1 WHERE T1.uuid = "456def" /* Answer the following: What is the name of the card with uuid "789ghi" in different languages? */ SELECT T2.language, T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.uuid = "789ghi"
SELECT name FROM sets WHERE code = 'ALL'
SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar' /* Answer the following: What is the status of the card with uuid 'a0a5a3a9-9c1e-436c-8c14-7e8a34a07701' in the 'modern' format? uuid 'a0a5a3a9-9c1e-436c-8c14-7e8a34a07701' refers to uuid = 'a0a5a3a9-9c1e-436c-8c14-7e8a34a07701' and 'modern' format refers to format = 'modern' */ SELECT status FROM legalities WHERE uuid = 'a0a5a3a9-9c1e-436c-8c14-7e8a34a07701' AND format = 'modern' /* Answer the following: What is the release date of the set with code 'DOM'? set with code 'DOM' refers to code = 'DOM' */ SELECT releaseDate FROM sets WHERE code = 'DOM' /* Answer the following: What is the translation of the set with code 'DOM' in the language 'French'? set with code 'DOM' refers to setCode = 'DOM' and language 'French' refers to language = 'French' */ SELECT translation FROM set_translations WHERE setCode = 'DOM' AND language = 'French' /* Answer the following: What is the ruling text for the card with uuid 'a0a5a3a9-9c1e-436c-8c14-7e8a34a07701'? card with uuid 'a0a5a3a9-9c1e-436c-8c14-7e8a34a07701' refers to uuid = 'a0a5a3a9-9c1e-436c-8c14-7e8a34a07701' */ SELECT text FROM rulings WHERE uuid = 'a0a5a3a9-9c1e-436c-8c14-7e8a34a07701'
SELECT setCode FROM sets WHERE releaseDate = '2007-07-13'
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage')
SELECT setCode FROM sets WHERE type = 'expansion'
SELECT T2.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'boros'
SELECT T2.language, T2.flavorText, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie'
SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Abyssal Horror'
SELECT setCode FROM sets WHERE type = 'expansion' AND name LIKE '%Commander%'
SELECT T2.name, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan'
SELECT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'azorius'
SELECT COUNT(id) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'
SELECT name FROM cards WHERE isTextless = 0
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen'
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL)
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle'
SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%'
SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3
SELECT T3.translation FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T1.name = 'Ancestor''s Chosen' AND T3.language = 'Italian'
SELECT COUNT(T3.translation) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T1.name = 'Angel of Mercy'
SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T3.translation = 'Hauptset Zehnte Edition'
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor's Chosen' AND T2.language = 'Korean'
SELECT COUNT(DISTINCT T3.id) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN cards AS T3 ON T2.code = T3.setCode WHERE T1.translation = 'Hauptset Zehnte Edition' AND T3.artist = 'Adam Rex'
SELECT baseSetSize FROM sets WHERE code = ( SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' )
SELECT translation FROM set_translations WHERE setCode = ( SELECT code FROM sets WHERE name = 'Eighth Edition' ) AND language = 'Simplified Chinese'
SELECT T2.mtgoCode FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Angel of Mercy' AND T2.mtgoCode IS NOT NULL
SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Ancestor''s Chosen'
SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian'
SELECT T2.isForeignOnly FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Adarkar Valkyrie'
SELECT COUNT(DISTINCT T1.setCode) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Italian' AND T1.translation IS NOT NULL AND T2.baseSetSize < 10
SELECT COUNT(id) FROM cards WHERE setCode = ( SELECT code FROM sets WHERE name = 'Coldsnap' ) AND borderColor = 'black'
SELECT name FROM cards WHERE setCode = ( SELECT code FROM sets WHERE name = 'Coldsnap' ) ORDER BY convertedManaCost DESC LIMIT 1
SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy')
SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.number = '4'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL)
SELECT T1.flavorText FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Italian' AND T2.name = 'Ancestor''s Chosen'
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL
SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'
SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setCode = T3.code INNER JOIN set_translations AS T4 ON T3.code = T4.setCode WHERE T3.name = 'Coldsnap' AND T4.language = 'Italian'
SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T3.name = 'Coldsnap' AND T2.language = 'Italian' ORDER BY T1.convertedManaCost DESC
SELECT T1.date FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Reminisce'
SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'
SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId = T1.cardKingdomId AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'
SELECT code FROM sets WHERE releaseDate = '2017-07-14'
SELECT keyruneCode FROM sets WHERE code = 'PKHC'
SELECT mcmId FROM sets WHERE code = 'SS2'
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'
SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%'
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'
SELECT T1.text, T2.hasContentWarning FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Jim Pavelec'
SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Evacuation'
SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Rinascita di Alara'
SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Huitième édition'
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T3.language = 'French' AND T3.name = 'Tendo Ice Bridge'
SELECT COUNT(T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Salvat 2011' AND T2.translation IS NOT NULL
SELECT T3.translation FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T1.name = 'Fellwar Stone' AND T3.language = 'Japanese'
SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1
SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Ola de frío'
SELECT T2.type FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Samite Pilgrim'
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'World Championship Decks 2004' AND T1.convertedManaCost = 3
SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Mirrodin' AND T2.language = 'Chinese Simplified'
SELECT CAST(SUM(CASE WHEN T1.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese'
SELECT CAST(SUM(CASE WHEN sets.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Portuguese (Brazil)'
SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1 /* Answer the following: What are the names of the cards that are part of the set with code 'DOM'? part of the set with code 'DOM' refers to setCode = 'DOM'; names of the cards refers to name */ SELECT name FROM cards WHERE setCode = 'DOM' /* Answer the following: What are the different formats where the card with uuid 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070' is legal? card with uuid 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070' refers to uuid = 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070'; different formats where the card is legal refers to format */ SELECT format FROM legalities WHERE uuid = 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070' /* Answer the following: What are the rulings for the card with uuid 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070'? card with uuid 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070' refers to uuid = 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070'; rulings for the card refers to text */ SELECT text FROM rulings WHERE uuid = 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070' /* Answer the following: What are the foreign names of the card with uuid 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070'? card with uuid 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070' refers to uuid = 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070'; foreign names of the card refers to name */ SELECT name FROM foreign_data WHERE uuid = 'd75e9b8e-6e4e-4f2d-9b5a-259b0767e070'
SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1 /* Answer the following: What is the name of the card with the highest edhrecRank? highest edhrecRank refers to MAX(edhrecRank); */ SELECT name FROM cards WHERE edhrecRank = ( SELECT MAX(edhrecRank) FROM cards ) /* Answer the following: What is the name of the set that has the most cards? most cards refers to MAX(baseSetSize); */ SELECT name FROM sets WHERE baseSetSize = ( SELECT MAX(baseSetSize) FROM sets ) /* Answer the following: What is the text of the ruling that was made on the latest date? latest date refers to MAX(date); */ SELECT text FROM rulings WHERE date = ( SELECT MAX(date) FROM rulings ) /* Answer the following: What is the name of the card that has the highest power? highest power refers to MAX(power); */ SELECT name FROM cards WHERE power = ( SELECT MAX(power) FROM cards ) /* Answer the following: What is the name of the card that has the highest toughness? highest toughness refers to MAX(toughness); */ SELECT name FROM cards WHERE toughness = ( SELECT MAX(toughness) FROM cards ) /* Answer the following: What is the name of the card that has the highest converted mana cost? highest converted mana cost refers to MAX(convertedManaCost); */ SELECT name FROM cards WHERE convertedManaCost = ( SELECT MAX(convertedManaCost) FROM cards )
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(id) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND duelDeck = 'a'
SELECT id FROM sets WHERE type = 'Commander' ORDER BY totalSetSize DESC LIMIT 1
SELECT T1.name, T1.convertedManaCost FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'duel' ORDER BY T1.convertedManaCost DESC LIMIT 10
SELECT T1.originalReleaseDate, T3.format FROM cards AS T1 INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T1.rarity = 'mythic' AND T3.status = 'legal' ORDER BY T1.originalReleaseDate LIMIT 1 /* Answer the following: What is the name of the card with the highest converted mana cost and what set does it belong to? highest converted mana cost refers to MAX(convertedManaCost); set refers to setCode */ SELECT T1.name, T2.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code ORDER BY T1.convertedManaCost DESC LIMIT 1 /* Answer the following: What is the name of the card with the longest text and what is its power? longest text refers to MAX(LENGTH(text)); power refers to power */ SELECT T1.name, T1.power FROM cards AS T1 ORDER BY LENGTH(T1.text) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most keywords and what is its type? most keywords refers to MAX(LENGTH(keywords)); type refers to type */ SELECT T1.name, T1.type FROM cards AS T1 ORDER BY LENGTH(T1.keywords) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most printings and what is its rarity? most printings refers to MAX(LENGTH(printings)); rarity refers to rarity */ SELECT T1.name, T1.rarity FROM cards AS T1 ORDER BY LENGTH(T1.printings) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most variations and what is its original type? most variations refers to MAX(LENGTH(variations)); original type refers to originalType */ SELECT T1.name, T1.originalType FROM cards AS T1 ORDER BY LENGTH(T1.variations) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most rulings and what is its original text? most rulings refers to MAX(COUNT(rulings.uuid)); original text refers to originalText */ SELECT T1.name, T1.originalText FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name ORDER BY COUNT(T2.uuid) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most foreign translations and what is its mana cost? most foreign translations refers to MAX(COUNT(foreign_data.uuid)); mana cost refers to manaCost */ SELECT T1.name, T1.manaCost FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name ORDER BY COUNT(T2.uuid) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most legalities and what is its converted mana cost? most legalities refers to MAX(COUNT(legalities.uuid)); converted mana cost refers to convertedManaCost */ SELECT T1.name, T1.convertedManaCost FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name ORDER BY COUNT(T2.uuid) DESC LIMIT 1 /* Answer the following: What is the name of the card with the most set translations and what is its rarity? most set translations refers to MAX(COUNT(set_translations.setCode)); rarity refers to rarity */ SELECT T1.name, T1.rarity FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode GROUP BY T1.name ORDER BY COUNT(T2.setCode) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baga' AND T2.language = 'French'
SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types LIKE '%Enchantment%' AND T1.name = 'Abundance' AND T2.status = 'Legal'
SELECT T1.format, T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'banned' GROUP BY T1.format ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Battlebond'
SELECT T1.artist, T3.format FROM cards AS T1 LEFT JOIN foreign_data AS T2 ON T1.uuid = T2.uuid LEFT JOIN legalities AS T3 ON T1.uuid = T3.uuid GROUP BY T1.artist ORDER BY COUNT(T1.artist) ASC LIMIT 1
SELECT T3.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T1.frameVersion = '1997' AND T1.artist = 'D. Alexander Gregory' AND T1.hasContentWarning = 1 AND T2.format = 'legacy'
SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'banned'
SELECT CAST(COUNT(T1.id) AS REAL) / 4 AS 'Average Sets Per Year', T2.language AS 'Common Language' FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T2.language ORDER BY COUNT(T2.language) DESC LIMIT 1
SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'
SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'banned' OR status = 'restricted')
SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC
SELECT T1.name, T3.format FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T2.name = 'Hour of Devastation' AND T3.status = 'legal'
SELECT T1.name FROM sets AS T1 WHERE T1.code IN (SELECT setCode FROM set_translations WHERE language = 'Korean') AND T1.code NOT IN (SELECT setCode FROM set_translations WHERE language = 'Japanese')
SELECT T1.frameVersion, T1.name, T2.status FROM cards AS T1 LEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams' AND T2.status = 'banned'
SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1
SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014'
SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00'
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1
SELECT COUNT(*) FROM users WHERE Views > 10 AND strftime('%Y', CreationDate) > '2013'
SELECT COUNT(Id) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' )
SELECT Title FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' )
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
SELECT P.Title FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie' ORDER BY P.ViewCount DESC LIMIT 1 /* Answer the following: What is the name of the badge that was awarded the most times? awarded the most times refers to MAX(Count) */ SELECT B.Name FROM badges AS B ORDER BY B.Count DESC LIMIT 1 /* Answer the following: What is the name of the user who has the highest reputation? highest reputation refers to MAX(Reputation) */ SELECT U.DisplayName FROM users AS U ORDER BY U.Reputation DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most comments? most comments refers to MAX(CommentCount) */ SELECT P.Title FROM posts AS P ORDER BY P.CommentCount DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most upvotes? most upvotes refers to MAX(UpVotes) */ SELECT U.DisplayName FROM users AS U ORDER BY U.UpVotes DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most downvotes? most downvotes refers to MAX(DownVotes) */ SELECT U.DisplayName FROM users AS U ORDER BY U.DownVotes DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most votes? most votes refers to MAX(VoteTypeId) */ SELECT P.Title FROM posts AS P INNER JOIN votes AS V ON P.Id = V.PostId ORDER BY V.VoteTypeId DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most badges? most badges refers to MAX(Id) in badges table */ SELECT U.DisplayName FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId GROUP BY U.DisplayName ORDER BY COUNT(B.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has posted the most? posted the most refers to MAX(Id) in posts table */ SELECT U.DisplayName FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId GROUP BY U.DisplayName ORDER BY COUNT(P.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most favorite posts? most favorite posts refers to MAX(FavoriteCount) in posts table */ SELECT U.DisplayName FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId ORDER BY P.FavoriteCount DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most answers? most answers refers to MAX(AnswerCount) in posts table */ SELECT U.DisplayName FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId ORDER BY P.AnswerCount DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most comments? most comments refers to MAX(Id) in comments table */ SELECT U.DisplayName FROM users AS U INNER JOIN comments AS C ON U.Id = C.UserId GROUP BY U.DisplayName ORDER BY COUNT(C.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts linked to? most posts linked to refers to MAX(Id) in postLinks table */ SELECT U.DisplayName FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId INNER JOIN postLinks AS PL ON P.Id = PL.PostId GROUP BY U.DisplayName ORDER BY COUNT(PL.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most post history? most post history refers to MAX(Id) in postHistory table */ SELECT U.DisplayName FROM users AS U INNER JOIN postHistory AS PH ON U.Id = PH.UserId GROUP BY U.DisplayName ORDER BY COUNT(PH.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most tags? most tags refers to MAX(Id) in tags table */ SELECT U.DisplayName FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId INNER JOIN tags AS T ON P.Id = T.ExcerptPostId GROUP BY U.DisplayName ORDER BY COUNT(T.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most votes? most votes refers to MAX(Id) in votes table */ SELECT U.DisplayName FROM users AS U INNER JOIN votes AS V ON U.Id = V.UserId GROUP BY U.DisplayName ORDER BY COUNT(V.Id) DESC LIMIT 1
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT SUM(T2.CommentCount) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie'
SELECT T1.AnswerCount FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.AnswerCount DESC LIMIT 1 /* Answer the following: What is the name of the badge that was awarded the most? the most refers to MAX(Count) */ SELECT T1.Name FROM badges AS T1 ORDER BY T1.Count DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most reputation? the most reputation refers to MAX(Reputation) */ SELECT T1.DisplayName FROM users AS T1 ORDER BY T1.Reputation DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most views? the most views refers to MAX(ViewCount) */ SELECT T1.Title FROM posts AS T1 ORDER BY T1.ViewCount DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most upvotes? the most upvotes refers to MAX(UpVotes) */ SELECT T1.DisplayName FROM users AS T1 ORDER BY T1.UpVotes DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most downvotes? the most downvotes refers to MAX(DownVotes) */ SELECT T1.DisplayName FROM users AS T1 ORDER BY T1.DownVotes DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most comments? the most comments refers to MAX(CommentCount) */ SELECT T1.Title FROM posts AS T1 ORDER BY T1.CommentCount DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most posts? the most posts refers to MAX(Count) */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most comments? the most comments refers to MAX(Count) */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the name of the user who has the most votes? the most votes refers to MAX(Count) */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL
SELECT DISTINCT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ClosedDate IS NOT NULL
SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score >= 20
SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'bayesian'
SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id ORDER BY T1.Count DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? Please give the display name of the user. most badges refers to MAX(count(Id)) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Which post has the most comments? Please give the title of the post. most comments refers to MAX(count(Id)) */ SELECT T2.Title FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most votes? Please give the display name of the user. most votes refers to MAX(count(Id)) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Which post has the most links? Please give the title of the post. most links refers to MAX(count(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most post history? Please give the display name of the user. most post history refers to MAX(count(Id)) */ SELECT T2.DisplayName FROM postHistory AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1
SELECT COUNT(Id) FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' )
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND STRFTIME('%Y', Date) = '2011'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most comments? user with the most comments refers to UserId with Max(Count(Id)) */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most posts? user with the most posts refers to OwnerUserId with Max(Count(Id)) */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most votes? user with the most votes refers to UserId with Max(Count(Id)) */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the most popular tag? most popular tag refers to TagName with Max(Count(Id)) */ SELECT T1.TagName FROM tags AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.PostTypeId GROUP BY T1.TagName ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: What is the most linked post? most linked post refers to PostId with Max(Count(Id)) */ SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId GROUP BY T1.Title ORDER BY COUNT(T2.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most upvotes? user with the most upvotes refers to UserId with Max(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: Who is the user with the most downvotes? user with the most downvotes refers to UserId with Max(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the most viewed post? most viewed post refers to PostId with Max(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: What is the most favorited post? most favorited post refers to PostId with Max(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1
SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200
SELECT CAST(SUM(CASE WHEN T2.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 20
SELECT COUNT(votes.Id) FROM votes WHERE UserId = 58 AND DATE(CreationDate) = '2010-07-19'
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1
SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'
SELECT T2.Title FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id ORDER BY T1.Score DESC LIMIT 1
SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910 /* Answer the following: How many badges does the user with the display name 'John Doe' have? */ SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'John Doe' /* Answer the following: How many votes does the post with the title 'SQL Examples' get? */ SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'SQL Examples' /* Answer the following: How many posts have been linked to the post with the title 'SQL Examples'? */ SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'SQL Examples' /* Answer the following: How many post histories does the post with the title 'SQL Examples' have? */ SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'SQL Examples'
SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 3025 AND T2.CreationDate = '2014-04-23 20:29:39'
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ParentId = 107829 AND T2.CommentCount = 1
SELECT CASE WHEN T1.ClosedDate IS NULL THEN 'No' ELSE 'Yes' END AS well_finished FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 23853 AND T2.CreationDate = '2013-07-12 09:08:18.0'
SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041 /* Answer the following: What is the name of the badge that user No. 12345 has? user no. 12345 refers to UserId = '12345'; name of the badge refers to Name */ SELECT T1.Name FROM badges AS T1 WHERE T1.UserId = 12345 /* Answer the following: What is the score of the comment made by user No. 67890? user no. 67890 refers to UserId = '67890'; score of the comment refers to Score */ SELECT T1.Score FROM comments AS T1 WHERE T1.UserId = 67890 /* Answer the following: What is the text of the post history made by user No. 11111? user no. 11111 refers to UserId = '11111'; text of the post history refers to Text */ SELECT T1.Text FROM postHistory AS T1 WHERE T1.UserId = 11111 /* Answer the following: What is the title of the post that has a link to post No. 22222? post no. 22222 refers to RelatedPostId = '22222'; title of the post refers to Title */ SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.RelatedPostId = 22222 /* Answer the following: What is the tag name of the tag that has been used in post No. 33333? post no. 33333 refers to Id = '33333'; tag name refers to TagName */ SELECT T1.TagName FROM tags AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.Id WHERE T2.Id = 33333 /* Answer the following: What is the bounty amount of the vote made by user No. 44444? user no. 44444 refers to UserId = '44444'; bounty amount refers to BountyAmount */ SELECT T1.BountyAmount FROM votes AS T1 WHERE T1.UserId = 44444
SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Tiago Pasqualini'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347
SELECT COUNT(T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%data visualization%'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'DatEpicCoderGuyWhoPrograms'
SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(T2.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.OwnerUserId = T2.UserId WHERE T1.OwnerUserId = 24
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost'
SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'thank you user93!'
SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'
SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Understanding what Dassault iSight is doing?'
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How does gentle boosting differ from AdaBoost?'
SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Necromancer' LIMIT 10
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data'
SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'
SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny'
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId INNER JOIN postHistory AS T3 ON T1.Id = T3.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND T3.UserId = T2.UserId /* Answer the following: List all users who have received a badge for a post with a score of 5 or more. Score of 5 or more refers to Score >= 5 */ SELECT DISTINCT T3.DisplayName FROM posts AS T1 INNER JOIN badges AS T2 ON T1.OwnerUserId = T2.UserId INNER JOIN users AS T3 ON T2.UserId = T3.Id WHERE T1.Score >= 5 /* Answer the following: List all posts that have been linked to the post titled 'What is the difference between "INNER JOIN" and "OUTER JOIN"?'. "What is the difference between "INNER JOIN" and "OUTER JOIN"?" is the Title of post; */ SELECT T2.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What is the difference between "INNER JOIN" and "OUTER JOIN"?' /* Answer the following: List all users who have voted on a post with a score of 10 or more. Score of 10 or more refers to Score >= 10 */ SELECT DISTINCT T3.DisplayName FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T2.UserId = T3.Id WHERE T1.Score >= 10 /* Answer the following: List all tags associated with the post titled 'What is the difference between "INNER JOIN" and "OUTER JOIN"?'. "What is the difference between "INNER JOIN" and "OUTER JOIN"?" is the Title of post; */ SELECT T2.TagName FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T1.Title = 'What is the difference between "INNER JOIN" and "OUTER JOIN"?'
SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'
SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T1.PostId = T3.Id WHERE T1.BountyAmount = 50 AND T3.Title LIKE '%variance%'
SELECT T1.Title, T1.ViewCount, T2.Text, T1.Score FROM posts AS T1 LEFT JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Tags LIKE '%humor%' /* Answer the following: What is the average score of the posts made by the user with the display name 'John Doe'? 'John Doe' is the DisplayName; average score = AVG(Score) */ SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'John Doe' /* Answer the following: What is the average bounty amount given by the user with the display name 'Jane Doe'? 'Jane Doe' is the DisplayName; average bounty amount = AVG(BountyAmount) */ SELECT AVG(T1.BountyAmount) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Jane Doe' /* Answer the following: What is the average score of the comments made by the user with the display name 'Alice'? 'Alice' is the DisplayName; average score = AVG(Score) */ SELECT AVG(T1.Score) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Alice' /* Answer the following: What is the average score of the posts that have been edited by the user with the display name 'Bob'? 'Bob' is the DisplayName; average score = AVG(Score) */ SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Bob'
SELECT COUNT(*) FROM comments WHERE UserId = 13 /* Answer the following: List the names of all badges earned by user ID 7. */ SELECT Name FROM badges WHERE UserId = 7 /* Answer the following: How many posts has user ID 5 made? */ SELECT COUNT(*) FROM posts WHERE OwnerUserId = 5 /* Answer the following: How many votes has user ID 10 cast? */ SELECT COUNT(*) FROM votes WHERE UserId = 10 /* Answer the following: What is the total score of all posts made by user ID 3? */ SELECT SUM(Score) FROM posts WHERE OwnerUserId = 3 /* Answer the following: How many tags has user ID 2 created? */ SELECT COUNT(*) FROM tags WHERE ExcerptPostId IN (SELECT Id FROM posts WHERE OwnerUserId = 2) /* Answer the following: What is the total number of upvotes received by user ID 4? */ SELECT COUNT(*) FROM votes WHERE VoteTypeId = 1 AND PostId IN (SELECT Id FROM posts WHERE OwnerUserId = 4) /* Answer the following: What is the total number of downvotes received by user ID 6? */ SELECT COUNT(*) FROM votes WHERE VoteTypeId = 2 AND PostId IN (SELECT Id FROM posts WHERE OwnerUserId = 6)
SELECT UserId FROM users ORDER BY Reputation DESC LIMIT 1
SELECT UserId FROM users ORDER BY Views ASC LIMIT 1
SELECT COUNT(UserId) FROM badges WHERE STRFTIME('%Y', `Date`) = '2011' AND Name = 'Supporter'
SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5 /* Answer the following: How many posts have more than 10 comments? more than 10 comments refers to COUNT(Id) > 10; posts refers to PostId */ SELECT PostId FROM comments GROUP BY PostId HAVING COUNT(Id) > 10 /* Answer the following: How many users have edited their posts more than 3 times? edited their posts more than 3 times refers to COUNT(Id) > 3; users refers to UserId */ SELECT UserId FROM postHistory WHERE PostHistoryTypeId = 2 GROUP BY UserId HAVING COUNT(Id) > 3 /* Answer the following: How many posts have related posts? have related posts refers to COUNT(RelatedPostId) > 0; posts refers to PostId */ SELECT PostId FROM postLinks GROUP BY PostId HAVING COUNT(RelatedPostId) > 0 /* Answer the following: How many users have more than 1000 reputation? more than 1000 reputation refers to Reputation > 1000; users refers to Id */ SELECT COUNT(Id) FROM users WHERE Reputation > 1000 /* Answer the following: How many votes have a bounty amount? have a bounty amount refers to COUNT(BountyAmount) > 0; votes refers to Id */ SELECT COUNT(Id) FROM votes WHERE BountyAmount IS NOT NULL
SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location LIKE '%New York%'
SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 1 /* Answer the following: What is the name of the badge that user ID 2 received? */ SELECT T1.Name FROM badges AS T1 WHERE T1.UserId = 2 /* Answer the following: What is the text of the comment that user ID 3 made? */ SELECT T1.Text FROM comments AS T1 WHERE T1.UserId = 3 /* Answer the following: What is the title of the post that user ID 4 edited last? */ SELECT T2.Title FROM posts AS T2 WHERE T2.LastEditorUserId = 4 /* Answer the following: What is the name of the tag that has been used the most? */ SELECT T1.TagName FROM tags AS T1 ORDER BY T1.Count DESC LIMIT 1 /* Answer the following: How many votes has post ID 5 received? */ SELECT COUNT(*) FROM votes AS T1 WHERE T1.PostId = 5 /* Answer the following: What is the total bounty amount that has been awarded for post ID 6? */ SELECT SUM(T1.BountyAmount) FROM votes AS T1 WHERE T1.PostId = 6 /* Answer the following: What is the highest reputation among all users? */ SELECT MAX(T1.Reputation) FROM users AS T1 /* Answer the following: What is the average score of all posts? */ SELECT AVG(T1.Score) FROM posts AS T1 /* Answer the following: How many users have a reputation of over 1000? */ SELECT COUNT(*) FROM users AS T1 WHERE T1.Reputation > 1000 /* Answer the following: How many posts have a view count of over 5000? */ SELECT COUNT(*) FROM posts AS T1 WHERE T1.ViewCount > 5000 /* Answer the following: How many comments have a score of over 10? */ SELECT COUNT(*) FROM comments AS T1 WHERE T1.Score > 10 /* Answer the following: How many badges have been awarded to user ID 7? */ SELECT COUNT(*) FROM badges AS T1 WHERE T1.UserId = 7 /* Answer the following: How many posts has user ID 8 edited? */ SELECT COUNT(*) FROM posts AS T1 WHERE T1.LastEditorUserId = 8 /* Answer the following: How many votes has user ID 9 cast? */ SELECT COUNT(*) FROM votes AS T1 WHERE T1.UserId = 9 /* Answer the following: How many comments has user ID 10 made? */ SELECT COUNT(*) FROM comments AS T1 WHERE T1.UserId = 10
SELECT UserId FROM postHistory GROUP BY UserId, PostId HAVING COUNT(Id) = 1 INTERSECT SELECT UserId FROM users WHERE Views >= 1000
SELECT T1.UserId, T2.Name FROM ( SELECT UserId, COUNT(Id) AS num FROM comments GROUP BY UserId ORDER BY num DESC LIMIT 1 ) AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId
SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location LIKE '%India%' AND T1.Name = 'Teacher'
SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', Date) = '2010' AND Name = 'Students' THEN 1 ELSE 0 END) / COUNT(Name) - SUM(CASE WHEN strftime('%Y', Date) = '2011' AND Name = 'Students' THEN 1 ELSE 0 END) / COUNT(Name)) FROM badges
SELECT T1.PostHistoryTypeId, COUNT(DISTINCT T2.UserId) FROM postHistory AS T1 LEFT JOIN comments AS T2 ON T1.PostId = T2.PostId WHERE T1.PostId = 3720
SELECT T1.*, T2.ViewCount AS Popularity FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.RelatedPostId = 61217
SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Id = 395
SELECT Id, OwnerUserId FROM posts WHERE Score > 60
SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND YEAR(CreationDate) = 2011
SELECT AVG(UpVotes), AVG(Age) FROM users WHERE Id IN (SELECT OwnerUserId FROM posts GROUP BY OwnerUserId HAVING COUNT(Id) > 10)
SELECT COUNT(UserId) FROM badges WHERE Name = 'Announcer'
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'
SELECT COUNT(*) FROM comments WHERE Score > 60; /* Answer the following: What are the names of the badges that were given on '2020-01-01'? */ SELECT Name FROM badges WHERE Date = '2020-01-01'; /* Answer the following: What are the post ids that have a link type id of 2? */ SELECT PostId FROM postLinks WHERE LinkTypeId = 2; /* Answer the following: What are the user ids of users who have a reputation of more than 5000? */ SELECT Id FROM users WHERE Reputation > 5000; /* Answer the following: How many votes were made on '2020-01-01'? */ SELECT COUNT(*) FROM votes WHERE CreationDate = '2020-01-01';
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0'
SELECT COUNT(Id) FROM posts WHERE Score = 10
SELECT Name FROM badges WHERE UserId IN ( SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1 )
SELECT T2.Reputation FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre'
SELECT T1.Date FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'Rochester, NY'
SELECT CAST(COUNT(DISTINCT T1.UserId) AS REAL) * 100 / COUNT(DISTINCT T2.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Teacher'
SELECT CAST(SUM(CASE WHEN T2.Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'
SELECT T2.Score FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CreationDate = '2010-07-19 19:19:56.0'
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CreationDate = '2010-07-19 19:37:33.0'
SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'
SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' AND T2.Age BETWEEN 19 AND 65 /* Answer the following: How many users have made a comment with a score greater than 10? score greater than 10 refers to Score > 10 */ SELECT COUNT(DISTINCT T1.UserId) FROM comments AS T1 WHERE T1.Score > 10 /* Answer the following: How many posts have been edited by users with a reputation greater than 1000? reputation greater than 1000 refers to Reputation > 1000 */ SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.Reputation > 1000 /* Answer the following: How many users have voted on posts with a bounty amount greater than 50? bounty amount greater than 50 refers to BountyAmount > 50 */ SELECT COUNT(DISTINCT T1.UserId) FROM votes AS T1 WHERE T1.BountyAmount > 50 /* Answer the following: How many posts have been linked to posts with a score greater than 100? score greater than 100 refers to Score > 100 */ SELECT COUNT(DISTINCT T1.PostId) FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T2.Score > 100 /* Answer the following: How many users have made a post history with a text length greater than 500? text length greater than 500 refers to LENGTH(Text) > 500 */ SELECT COUNT(DISTINCT T1.UserId) FROM postHistory AS T1 WHERE LENGTH(T1.Text) > 500 /* Answer the following: How many tags have been used in posts with a view count greater than 1000? view count greater than 1000 refers to ViewCount > 1000 */ SELECT COUNT(DISTINCT T1.Id) FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T2.ViewCount > 1000 /* Answer the following: How many users have a profile image and have made a post with a comment count greater than 10? profile image refers to ProfileImageUrl IS NOT NULL; comment count greater than 10 refers to CommentCount > 10 */ SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.ProfileImageUrl IS NOT NULL AND T2.CommentCount > 10
SELECT SUM(T1.Views) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'
SELECT Name FROM badges WHERE UserId = ( SELECT Id FROM users ORDER BY Reputation ASC LIMIT 1 )
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie'
SELECT COUNT(T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' AND T2.Age > 65 /* Answer the following: How many comments were made by users with a reputation of more than 5000? reputation of more than 5000 refers to Reputation > 5000 */ SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation > 5000 /* Answer the following: How many posts have been edited by users who have received more than 100 upvotes? received more than 100 upvotes refers to UpVotes > 100 */ SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.UpVotes > 100 /* Answer the following: How many users have voted on posts that have a score of more than 50? score of more than 50 refers to Score > 50 */ SELECT COUNT(DISTINCT T1.UserId) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Score > 50 /* Answer the following: How many posts have been linked to posts that have a view count of more than 1000? view count of more than 1000 refers to ViewCount > 1000 */ SELECT COUNT(T1.Id) FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T2.ViewCount > 1000 /* Answer the following: How many users have made a post history comment that contains the word "error"? contains the word "error" refers to Comment LIKE '%error%' */ SELECT COUNT(DISTINCT T1.UserId) FROM postHistory AS T1 WHERE T1.Comment LIKE '%error%'
SELECT DisplayName FROM users WHERE Id = 30 /* Answer the following: How many posts have a score of 100 or more? score of 100 or more refers to Score >= 100; */ SELECT COUNT(Id) FROM posts WHERE Score >= 100 /* Answer the following: What are the IDs of the posts that user 20 has commented on? user 20 refers to UserId = 20; */ SELECT PostId FROM comments WHERE UserId = 20 /* Answer the following: What is the highest bounty amount given by user 10? highest bounty amount given by user 10 refers to MAX(BountyAmount) WHERE UserId = 10; */ SELECT MAX(BountyAmount) FROM votes WHERE UserId = 10 /* Answer the following: How many badges does user 15 have? user 15 refers to UserId = 15; */ SELECT COUNT(Id) FROM badges WHERE UserId = 15 /* Answer the following: What are the names of the badges that user 5 has? user 5 refers to UserId = 5; */ SELECT Name FROM badges WHERE UserId = 5 /* Answer the following: How many votes has post 100 received? post 100 refers to PostId = 100; */ SELECT COUNT(Id) FROM votes WHERE PostId = 100 /* Answer the following: What is the name of the user who has the most posts? most posts refers to MAX(COUNT(PostId)); */ SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts GROUP BY OwnerUserId ORDER BY COUNT(Id) DESC LIMIT 1) /* Answer the following: What is the name of the user who has the most comments? most comments refers to MAX(COUNT(CommentId)); */ SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM comments GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1)
SELECT COUNT(*) FROM users WHERE Location LIKE '%New York%'
SELECT COUNT(Id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'
SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1 /* Answer the following: Which post has the most comments? the most comments refer to MAX(CommentCount); */ SELECT Id FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: Which user has the most badges? the most badges refer to MAX(COUNT(Id)); */ SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which post has the most votes? the most votes refer to MAX(COUNT(Id)); */ SELECT PostId FROM votes GROUP BY PostId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which tag is used the most? the most used tag refers to MAX(Count); */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Which user has the most upvotes? the most upvotes refer to MAX(UpVotes); */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: Which user has the most downvotes? the most downvotes refer to MAX(DownVotes); */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: Which post has the most views? the most views refer to MAX(ViewCount); */ SELECT Id FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Which user has the most posts? the most posts refer to MAX(COUNT(Id)); */ SELECT OwnerUserId FROM posts GROUP BY OwnerUserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which user has the most comments? the most comments refer to MAX(COUNT(Id)); */ SELECT UserId FROM comments GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', CreationDate) = '2010' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN STRFTIME('%Y', CreationDate) = '2011' THEN 1 ELSE 0 END) FROM votes
SELECT T1.TagName FROM tags AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T3.DisplayName = 'John Stauffer'
SELECT COUNT(Id) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo' )
SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Harlan'
SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1 /* Answer the following: Which user has the most badges? State the user ID. most badges refers to MAX(COUNT(Id)); */ SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which post has the most comments? State the post ID. most comments refers to MAX(COUNT(Id)); */ SELECT PostId FROM comments GROUP BY PostId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which user has the most votes? State the user ID. most votes refers to MAX(COUNT(Id)); */ SELECT UserId FROM votes GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which tag is used the most? State the tag name. most used refers to MAX(Count); */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Which user has the most posts? State the user ID. most posts refers to MAX(COUNT(Id)); */ SELECT OwnerUserId FROM posts GROUP BY OwnerUserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which post has the most views? State the post ID. most views refers to MAX(ViewCount); */ SELECT Id FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Which user has the most reputation? State the user ID. most reputation refers to MAX(Reputation); */ SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: Which post has the most score? State the post ID. most score refers to MAX(Score); */ SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 /* Answer the following: Which user has the most upvotes? State the user ID. most upvotes refers to MAX(UpVotes); */ SELECT Id FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: Which user has the most downvotes? State the user ID. most downvotes refers to MAX(DownVotes); */ SELECT Id FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: Which post has the most favorite count? State the post ID. most favorite count refers to MAX(FavoriteCount); */ SELECT Id FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: Which user has the most views? State the user ID. most views refers to MAX(Views); */ SELECT Id FROM users ORDER BY Views DESC LIMIT 1 /* Answer the following: Which post has the most link type? State the post ID. most link type refers to MAX(COUNT(LinkTypeId)); */ SELECT PostId FROM postLinks GROUP BY PostId ORDER BY COUNT(LinkTypeId) DESC LIMIT 1 /* Answer the following: Which user has the most post history? State the user ID. most post history refers to MAX(COUNT(Id)); */ SELECT UserId FROM postHistory GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which user has the most comments? State the user ID. most comments refers to MAX(COUNT(Id)); */ SELECT UserId FROM comments GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which badge is the most common? State the badge name. most common refers to MAX(COUNT(Id)); */ SELECT Name FROM badges GROUP BY Name ORDER BY COUNT(Id) DESC LIMIT 1 /* Answer the following: Which user has the most bounties? State the user ID. most bounties refers to MAX(COUNT(BountyAmount)); */ SELECT UserId FROM votes WHERE BountyAmount IS NOT NULL GROUP BY UserId ORDER BY COUNT(BountyAmount) DESC LIMIT 1
SELECT DisplayName, SUM(ViewCount) AS TotalViews FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY DisplayName ORDER BY TotalViews DESC LIMIT 1
SELECT COUNT(T2.PostId) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN votes AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.Id HAVING COUNT(T3.Id) > 4
SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T1.Score < 60 AND T3.DisplayName = 'Neil McGuigan'
SELECT T3.TagName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN tags AS T3 ON T2.Id = T3.ExcerptPostId WHERE T1.DisplayName = 'Mark Meckes' AND T2.CommentCount = 0
SELECT DISTINCT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'
SELECT CAST(SUM(CASE WHEN T2.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId INNER JOIN users AS T3 ON T1.OwnerUserId = T3.Id WHERE T3.DisplayName = 'Community'
SELECT (SELECT SUM(ViewCount) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Mornington') - (SELECT SUM(ViewCount) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Amos') AS Difference_ViewCount
SELECT COUNT(UserId) FROM badges WHERE Name = 'Commentator' AND YEAR(Date) = 2014; /* Answer the following: How many comments were made by users with a reputation of more than 1000? Reputation > 1000 */ SELECT COUNT(*) FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE users.Reputation > 1000; /* Answer the following: What is the most common tag used in posts? most common refers to MAX(Count) */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1; /* Answer the following: Who made the most votes in 2015? most votes refers to MAX(Count); year(CreationDate) = 2015 */ SELECT UserId FROM votes WHERE YEAR(CreationDate) = 2015 GROUP BY UserId ORDER BY COUNT(*) DESC LIMIT 1; /* Answer the following: How many posts have a score of more than 100? Score > 100 */ SELECT COUNT(*) FROM posts WHERE Score > 100; /* Answer the following: How many users have made more than 1000 comments? more than 1000 comments refers to COUNT(Comment) > 1000 */ SELECT COUNT(UserId) FROM comments GROUP BY UserId HAVING COUNT(*) > 1000; /* Answer the following: How many posts were made in 2015? year(CreaionDate) = 2015 */ SELECT COUNT(*) FROM posts WHERE YEAR(CreaionDate) = 2015; /* Answer the following: How many users have a reputation of more than 5000? Reputation > 5000 */ SELECT COUNT(*) FROM users WHERE Reputation > 5000; /* Answer the following: How many posts have been viewed more than 10000 times? ViewCount > 10000 */ SELECT COUNT(*) FROM posts WHERE ViewCount > 10000; /* Answer the following: How many users have made more than 100 votes? more than 100 votes refers to COUNT(Vote) > 100 */ SELECT COUNT(UserId) FROM votes GROUP BY UserId HAVING COUNT(*) > 100;
SELECT COUNT(Id) FROM posts WHERE CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'
SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'
SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60 /* Answer the following: How many badges does user ID 13 have? */ SELECT COUNT(*) FROM badges WHERE UserId = 13 /* Answer the following: How many posts has user ID 13 made? */ SELECT COUNT(*) FROM posts WHERE OwnerUserId = 13 /* Answer the following: How many votes has user ID 13 made? */ SELECT COUNT(*) FROM votes WHERE UserId = 13 /* Answer the following: How many times has user ID 13 been upvoted? upvoted refers to VoteTypeId = 1 */ SELECT COUNT(*) FROM votes WHERE UserId = 13 AND VoteTypeId = 1 /* Answer the following: How many times has user ID 13 been downvoted? downvoted refers to VoteTypeId = 3 */ SELECT COUNT(*) FROM votes WHERE UserId = 13 AND VoteTypeId = 3 /* Answer the following: What is the total score of all posts made by user ID 13? */ SELECT SUM(Score) FROM posts WHERE OwnerUserId = 13 /* Answer the following: What is the total score of all comments made by user ID 13? */ SELECT SUM(Score) FROM comments WHERE UserId = 13 /* Answer the following: How many posts made by user ID 13 have been viewed more than 100 times? viewed more than 100 times refers to ViewCount > 100 */ SELECT COUNT(*) FROM posts WHERE OwnerUserId = 13 AND ViewCount > 100 /* Answer the following: How many comments made by user ID 13 have a score of more than 50? score of more than 50 refers to Score > 50 */ SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score > 50
SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score > 60 /* Answer the following: List down the names of users who have badges and have made posts with a score of more than 100. score of more than 100 refers to Score > 100; */ SELECT DISTINCT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T2.Id = T3.OwnerUserId WHERE T3.Score > 100 /* Answer the following: State the number of posts that have been linked to other posts and have a score of more than 50. score of more than 50 refers to Score > 50; */ SELECT COUNT(T1.Id) FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Score > 50 /* Answer the following: List down the names of users who have made comments on posts with a score of more than 100. score of more than 100 refers to Score > 100; */ SELECT DISTINCT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T1.PostId = T3.Id WHERE T3.Score > 100 /* Answer the following: State the number of votes for posts with a score of more than 100. score of more than 100 refers to Score > 100; */ SELECT COUNT(T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Score > 100 /* Answer the following: List down the names of users who have made posts with a score of more than 100 and have received badges. score of more than 100 refers to Score > 100; */ SELECT DISTINCT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN badges AS T3 ON T2.Id = T3.UserId WHERE T1.Score > 100 /* Answer the following: Describe the post title which got positive votes and display names of the users who voted. positive votes refer to VoteTypeId = 2; */ SELECT T1.Title, T2.DisplayName FROM posts AS T1 INNER JOIN votes AS T3 ON T1.Id = T3.PostId INNER JOIN users AS T2 ON T3.UserId = T2.Id WHERE T3.VoteTypeId = 2 /* Answer the following: List down the names of users who have made posts with a score of more than 100 and have made comments. score of more than 100 refers to Score > 100; */ SELECT DISTINCT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN comments AS T3 ON T2.Id = T3.UserId WHERE T1.Score > 100 /* Answer the following: State the number of posts that have been linked to other posts and have a score of more than 50 and have been commented on. score of more than 50 refers to Score > 50; */ SELECT COUNT(T1.Id) FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Score > 50 /* Answer the following: List down the names of users who have made comments on posts with a score of more than 100 and have received badges. score of more than 100 refers to Score > 100; */ SELECT DISTINCT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T1.PostId = T3.Id INNER JOIN badges AS T4 ON T2.Id = T4.UserId WHERE T3.Score > 100
SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'North Pole' AND STRFTIME('%Y', T2.Date) = '2011'
SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150
SELECT COUNT(T1.Id) AS PostHistoryCount, MAX(T1.CreationDate) AS LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'
SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Outliers'
SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.RelatedPostId WHERE T2.PostId = ( SELECT Id FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time' )
SELECT T1.PostId, T2.Name FROM posts AS T1 INNER JOIN badges AS T2 ON T1.OwnerUserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND YEAR(T1.CreationDate) = 2013 AND YEAR(T2.Date) = 2013
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.ViewCount DESC LIMIT 1 /* Answer the following: What is the name of the badge that the user with the most reputation has? most reputation refers to MAX(Reputation); */ SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1 /* Answer the following: What is the most common tag? most common tag refers to MAX(Count); */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Who made the most comments? most comments refers to MAX(COUNT(Id)); */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most linked post? most linked post refers to MAX(COUNT(RelatedPostId)); */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id GROUP BY T2.Title ORDER BY COUNT(T1.RelatedPostId) DESC LIMIT 1 /* Answer the following: Who has the most upvotes? most upvotes refers to MAX(UpVotes); */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the most voted post? most voted post refers to MAX(COUNT(PostId)); */ SELECT T2.Title FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T2.Title ORDER BY COUNT(T1.PostId) DESC LIMIT 1 /* Answer the following: Who has the most downvotes? most downvotes refers to MAX(DownVotes); */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the most edited post? most edited post refers to MAX(COUNT(PostId)); */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T2.Title ORDER BY COUNT(T1.PostId) DESC LIMIT 1 /* Answer the following: Who has the most badges? most badges refers to MAX(COUNT(UserId)); */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.UserId) DESC LIMIT 1
SELECT T2.DisplayName, T2.Location FROM tags AS T1 INNER JOIN users AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'hypothesis-testing'
SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = ( SELECT Id FROM posts WHERE Title = 'What are principal component scores?' )
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = ( SELECT ParentId FROM posts WHERE Score = ( SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL ) )
SELECT T2.DisplayName, T2.WebsiteUrl FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.VoteTypeId = 8 ORDER BY T1.BountyAmount DESC LIMIT 1 /* Answer the following: What is the most popular tag based on the number of posts? most popular tag refers to MAX(Count) */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? Specify his/her display name. the most badges refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the highest score a post has received? highest score refers to MAX(Score) */ SELECT MAX(Score) FROM posts /* Answer the following: Which user has the most comments? Specify his/her display name. the most comments refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most upvotes? Specify his/her display name. the most upvotes refers to MAX(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the most favorited post? Specify its title. the most favorited post refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: Who is the user with the most downvotes? Specify his/her display name. the most downvotes refers to MAX(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the most viewed post? Specify its title. the most viewed post refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? Specify his/her display name. the highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the most edited post? Specify its title. the most edited post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most posts? Specify his/her display name. the most posts refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most commented post? Specify its title. the most commented post refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: Who is the user with the most votes? Specify his/her display name. the most votes refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most answered post? Specify its title. the most answered post refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: Who is the user with the most accepted answers? Specify his/her display name. the most accepted answers refers to MAX(COUNT(AcceptedAnswerId)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.AcceptedAnswerId = T2.Id GROUP BY T1.AcceptedAnswerId ORDER BY COUNT(T1.AcceptedAnswerId) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? Specify his/her display name. the most badges refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the highest score a post has received? highest score refers to MAX(Score) */ SELECT MAX(Score) FROM posts /* Answer the following: Which user has the most comments? Specify his/her display name. the most comments refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most upvotes? Specify his/her display name. the most upvotes refers to MAX(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the most favorited post? Specify its title. the most favorited post refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: Who is the user with the most downvotes? Specify his/her display name. the most downvotes refers to MAX(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the most viewed post? Specify its title. the most viewed post refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? Specify his/her display name. the highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the most edited post? Specify its title. the most edited post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most posts? Specify his/her display name. the most posts refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most commented post? Specify its title. the most commented post refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: Who is the user with the most votes? Specify his/her display name. the most votes refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most answered post? Specify its title. the most answered post refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: Who is the user with the most accepted answers? Specify his/her display name. the most accepted answers refers to MAX(COUNT(AcceptedAnswerId)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.AcceptedAnswerId = T2.Id GROUP BY T1.AcceptedAnswerId ORDER BY COUNT(T1.AcceptedAnswerId) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? Specify his/her display name. the most badges refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the highest score a post has received? highest score refers to MAX(Score) */ SELECT MAX(Score) FROM posts /* Answer the following: Which user has the most comments? Specify his/her display name. the most comments refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most upvotes? Specify his/her display name. the most upvotes refers to MAX(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the most favorited post? Specify its title. the most favorited post refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: Who is the user with the most downvotes? Specify his/her display name. the most downvotes refers to MAX(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the most viewed post? Specify its title. the most viewed post refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? Specify his/her display name. the highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the most edited post? Specify its title. the most edited post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most posts? Specify his/her display name. the most posts refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most commented post? Specify its title. the most commented post refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: Who is the user with the most votes? Specify his/her display name. the most votes refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most answered post? Specify its title. the most answered post refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: Who is the user with the most accepted answers? Specify his/her display name. the most accepted answers refers to MAX(COUNT(AcceptedAnswerId)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.AcceptedAnswerId = T2.Id GROUP BY T1.AcceptedAnswerId ORDER BY COUNT(T1.AcceptedAnswerId) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? Specify his/her display name. the most badges refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the highest score a post has received? highest score refers to MAX(Score) */ SELECT MAX(Score) FROM posts /* Answer the following: Which user has the most comments? Specify his/her display name. the most comments refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most upvotes? Specify his/her display name. the most upvotes refers to MAX(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the most favorited post? Specify its title. the most favorited post refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: Who is the user with the most downvotes? Specify his/her display name. the most downvotes refers to MAX(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the most viewed post? Specify its title. the most viewed post refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? Specify his/her display name. the highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the most edited post? Specify its title. the most edited post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most posts? Specify his/her display name. the most posts refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most commented post? Specify its title. the most commented post refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: Who is the user with the most votes? Specify his/her display name. the most votes refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most answered post? Specify its title. the most answered post refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: Who is the user with the most accepted answers? Specify his/her display name. the most accepted answers refers to MAX(COUNT(AcceptedAnswerId)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.AcceptedAnswerId = T2.Id GROUP BY T1.AcceptedAnswerId ORDER BY COUNT(T1.AcceptedAnswerId) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? Specify his/her display name. the most badges refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the highest score a post has received? highest score refers to MAX(Score) */ SELECT MAX(Score) FROM posts /* Answer the following: Which user has the most comments? Specify his/her display name. the most comments refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most upvotes? Specify his/her display name. the most upvotes refers to MAX(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the most favorited post? Specify its title. the most favorited post refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: Who is the user with the most downvotes? Specify his/her display name. the most downvotes refers to MAX(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the most viewed post? Specify its title. the most viewed post refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? Specify his/her display name. the highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the most edited post? Specify its title. the most edited post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most posts? Specify his/her display name. the most posts refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most commented post? Specify its title. the most commented post refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: Who is the user with the most votes? Specify his/her display name. the most votes refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most answered post? Specify its title. the most answered post refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: Who is the user with the most accepted answers? Specify his/her display name. the most accepted answers refers to MAX(COUNT(AcceptedAnswerId)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.AcceptedAnswerId = T2.Id GROUP BY T1.AcceptedAnswerId ORDER BY COUNT(T1.AcceptedAnswerId) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? Specify his/her display name. the most badges refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the highest score a post has received? highest score refers to MAX(Score) */ SELECT MAX(Score) FROM posts /* Answer the following: Which user has the most comments? Specify his/her display name. the most comments refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most upvotes? Specify his/her display name. the most upvotes refers to MAX(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the most favorited post? Specify its title. the most favorited post refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: Who is the user with the most downvotes? Specify his/her display name. the most downvotes refers to MAX(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the most viewed post? Specify its title. the most viewed post refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? Specify his/her display name. the highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the most edited post? Specify its title. the most edited post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most posts? Specify his/her display name. the most posts refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most commented post? Specify its title. the most commented post refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: Who is the user with the most votes? Specify his/her display name. the most votes refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most answered post? Specify its title. the most answered post refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: Who is the user with the most accepted answers? Specify his/her display name. the most accepted answers refers to MAX(COUNT(AcceptedAnswerId)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.AcceptedAnswerId = T2.Id GROUP BY T1.AcceptedAnswerId ORDER BY COUNT(T1.AcceptedAnswerId) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? Specify his/her display name. the most badges refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the highest score a post has received? highest score refers to MAX(Score) */ SELECT MAX(Score) FROM posts /* Answer the following: Which user has the most comments? Specify his/her display name. the most comments refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most linked post? Specify its title. the most linked post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most upvotes? Specify his/her display name. the most upvotes refers to MAX(UpVotes) */ SELECT DisplayName FROM users ORDER BY UpVotes DESC LIMIT 1 /* Answer the following: What is the most favorited post? Specify its title. the most favorited post refers to MAX(FavoriteCount) */ SELECT Title FROM posts ORDER BY FavoriteCount DESC LIMIT 1 /* Answer the following: Who is the user with the most downvotes? Specify his/her display name. the most downvotes refers to MAX(DownVotes) */ SELECT DisplayName FROM users ORDER BY DownVotes DESC LIMIT 1 /* Answer the following: What is the most viewed post? Specify its title. the most viewed post refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? Specify his/her display name. the highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the most edited post? Specify its title. the most edited post refers to MAX(COUNT(Id)) */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: Who is the user with the most posts? Specify his/her display name. the most posts refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most commented post? Specify its title. the most commented post refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: Who is the user with the most votes? Specify his/her display name. the most votes refers to MAX(COUNT(Id)) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the most answered post? Specify its title. the most answered post refers to MAX(AnswerCount) */ SELECT Title FROM posts ORDER BY AnswerCount DESC LIMIT 1 /* Answer the following: Who is the user with the most accepted answers? Specify his/her display name. the most accepted answers refers to MAX(COUNT(A
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5 /* Answer the following: Who are the top 5 users with the highest reputation? highest reputation refers to MAX(Reputation); */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 5 /* Answer the following: What are the top 5 most used tags? most used tags refers to MAX(Count); */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 5 /* Answer the following: What are the top 5 posts with the most comments? most comments refers to MAX(CommentCount); */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 5 /* Answer the following: What are the top 5 posts with the most votes? most votes refers to MAX(VoteTypeId); */ SELECT PostId FROM votes GROUP BY PostId ORDER BY COUNT(VoteTypeId) DESC LIMIT 5 /* Answer the following: What are the top 5 posts with the most badges? most badges refers to MAX(UserId) in badges table; */ SELECT PostId FROM badges JOIN posts ON badges.UserId = posts.OwnerUserId GROUP BY PostId ORDER BY COUNT(badges.UserId) DESC LIMIT 5 /* Answer the following: What are the top 5 posts with the most post history? most post history refers to MAX(PostId) in postHistory table; */ SELECT PostId FROM postHistory GROUP BY PostId ORDER BY COUNT(PostId) DESC LIMIT 5 /* Answer the following: What are the top 5 posts with the most post links? most post links refers to MAX(PostId) in postLinks table; */ SELECT PostId FROM postLinks GROUP BY PostId ORDER BY COUNT(PostId) DESC LIMIT 5
SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000
SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts ) /* Answer the following: What is the title of the most viewed post? the most viewed post refers to MAX(ViewCount); */ SELECT Title FROM posts WHERE ViewCount = ( SELECT MAX(ViewCount) FROM posts ) /* Answer the following: What is the name of the user with the highest reputation? the highest reputation refers to MAX(Reputation); */ SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users ) /* Answer the following: What is the tag name of the most used tag? the most used tag refers to MAX(Count); */ SELECT TagName FROM tags WHERE Count = ( SELECT MAX(Count) FROM tags ) /* Answer the following: What is the text of the comment with the highest score? the highest score refers to MAX(Score); */ SELECT Text FROM comments WHERE Score = ( SELECT MAX(Score) FROM comments ) /* Answer the following: What is the name of the badge that was awarded the most? the badge that was awarded the most refers to MAX(Count); */ SELECT Name FROM badges GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the text of the post history with the most revisions? the most revisions refers to MAX(RevisionGUID); */ SELECT Text FROM postHistory WHERE RevisionGUID = ( SELECT MAX(RevisionGUID) FROM postHistory )
SELECT Age FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the most popular tag? the most popular refers to MAX(Count); */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Who made the most comments? Who refers to UserId; the most comments refers to MAX(Count(UserId)); */ SELECT UserId, COUNT(UserId) AS NumberOfComments FROM comments GROUP BY UserId ORDER BY NumberOfComments DESC LIMIT 1 /* Answer the following: What is the highest voted post? highest voted refers to MAX(Score); */ SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 /* Answer the following: Who has the most badges? Who refers to UserId; the most badges refers to MAX(Count(UserId)); */ SELECT UserId, COUNT(UserId) AS NumberOfBadges FROM badges GROUP BY UserId ORDER BY NumberOfBadges DESC LIMIT 1 /* Answer the following: Who has given the most votes? Who refers to UserId; the most votes refers to MAX(Count(UserId)); */ SELECT UserId, COUNT(UserId) AS NumberOfVotes FROM votes GROUP BY UserId ORDER BY NumberOfVotes DESC LIMIT 1 /* Answer the following: What is the most linked post? the most linked refers to MAX(Count(PostId)); */ SELECT PostId, COUNT(PostId) AS NumberOfLinks FROM postLinks GROUP BY PostId ORDER BY NumberOfLinks DESC LIMIT 1 /* Answer the following: Who has the most posts? Who refers to OwnerUserId; the most posts refers to MAX(Count(OwnerUserId)); */ SELECT OwnerUserId, COUNT(OwnerUserId) AS NumberOfPosts FROM posts GROUP BY OwnerUserId ORDER BY NumberOfPosts DESC LIMIT 1 /* Answer the following: What is the most edited post? the most edited refers to MAX(Count(PostId)); */ SELECT PostId, COUNT(PostId) AS NumberOfEdits FROM postHistory GROUP BY PostId ORDER BY NumberOfEdits DESC LIMIT 1 /* Answer the following: Who has the most favorite posts? Who refers to OwnerUserId; the most favorite posts refers to MAX(Count(FavoriteCount)); */ SELECT OwnerUserId, SUM(FavoriteCount) AS NumberOfFavorites FROM posts GROUP BY OwnerUserId ORDER BY NumberOfFavorites DESC LIMIT 1
SELECT COUNT(*) FROM posts AS p INNER JOIN votes AS v ON p.Id = v.PostId WHERE YEAR(p.CreationDate) = 2011 AND v.BountyAmount = 50
SELECT Id FROM users ORDER BY Age DESC LIMIT 1
SELECT T1.Score FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId ORDER BY T2.Count DESC LIMIT 1 /* Answer the following: Who is the user with the most badges? the user with the most badges refers to MAX(COUNT(UserId)) from badges; */ SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(UserId) DESC LIMIT 1 /* Answer the following: What is the most common type of post? the most common type of post refers to MAX(COUNT(PostTypeId)) from posts; */ SELECT PostTypeId FROM posts GROUP BY PostTypeId ORDER BY COUNT(PostTypeId) DESC LIMIT 1 /* Answer the following: Who is the user who has given the most votes? the user who has given the most votes refers to MAX(COUNT(UserId)) from votes; */ SELECT UserId FROM votes GROUP BY UserId ORDER BY COUNT(UserId) DESC LIMIT 1 /* Answer the following: What is the most common comment? the most common comment refers to MAX(COUNT(Text)) from comments; */ SELECT Text FROM comments GROUP BY Text ORDER BY COUNT(Text) DESC LIMIT 1 /* Answer the following: What is the most common post history type? the most common post history type refers to MAX(COUNT(PostHistoryTypeId)) from postHistory; */ SELECT PostHistoryTypeId FROM postHistory GROUP BY PostHistoryTypeId ORDER BY COUNT(PostHistoryTypeId) DESC LIMIT 1 /* Answer the following: What is the most linked post? the most linked post refers to MAX(COUNT(PostId)) from postLinks; */ SELECT PostId FROM postLinks GROUP BY PostId ORDER BY COUNT(PostId) DESC LIMIT 1 /* Answer the following: Who is the user with the most reputation? the user with the most reputation refers to MAX(Reputation) from users; */ SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1
SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE strftime('%Y', T1.CreationDate) = '2010' AND T2.AnswerCount <= 2
SELECT T1.PostId FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1
SELECT T2.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id ORDER BY T1.CreationDate ASC LIMIT 1 /* Answer the following: Who is the user with the oldest badge? the oldest badge refers to MIN(Date); */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id ORDER BY T1.Date ASC LIMIT 1 /* Answer the following: What is the text of the oldest comment? the oldest comment refers to MIN(CreationDate); */ SELECT T1.Text FROM comments AS T1 ORDER BY T1.CreationDate ASC LIMIT 1 /* Answer the following: What is the text of the oldest post history? the oldest post history refers to MIN(CreationDate); */ SELECT T1.Text FROM postHistory AS T1 ORDER BY T1.CreationDate ASC LIMIT 1 /* Answer the following: What is the name of the oldest tag? the oldest tag refers to MIN(Count); */ SELECT T1.TagName FROM tags AS T1 ORDER BY T1.Count ASC LIMIT 1 /* Answer the following: What is the oldest vote? the oldest vote refers to MIN(CreationDate); */ SELECT T1.Id FROM votes AS T1 ORDER BY T1.CreationDate ASC LIMIT 1
SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Name) DESC LIMIT 1 /* Answer the following: Who is the user with the highest reputation who has never voted? highest reputation refers to MAX(reputation); never voted refers to votes.UserId IS NULL */ SELECT T1.DisplayName FROM users AS T1 LEFT JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.UserId IS NULL ORDER BY T1.Reputation DESC LIMIT 1 /* Answer the following: What is the title of the post with the most comments? most comments refers to MAX(CommentCount) */ SELECT T1.Title FROM posts AS T1 ORDER BY T1.CommentCount DESC LIMIT 1 /* Answer the following: Who is the user with the most upvotes? most upvotes refers to MAX(UpVotes) */ SELECT T1.DisplayName FROM users AS T1 ORDER BY T1.UpVotes DESC LIMIT 1 /* Answer the following: What is the tag name of the most used tag? most used tag refers to MAX(Count) */ SELECT T1.TagName FROM tags AS T1 ORDER BY T1.Count DESC LIMIT 1 /* Answer the following: Who is the user who has posted the most? most posted refers to MAX(COUNT(PostId)) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the title of the post with the most votes? most votes refers to MAX(COUNT(VoteTypeId)) */ SELECT T2.Title FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.VoteTypeId) DESC LIMIT 1 /* Answer the following: Who is the user who has the most posts linked to? most posts linked to refers to MAX(COUNT(RelatedPostId)) */ SELECT T2.DisplayName FROM postLinks AS T1 INNER JOIN users AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.RelatedPostId) DESC LIMIT 1 /* Answer the following: What is the title of the post with the most history? most history refers to MAX(COUNT(PostHistoryTypeId)) */ SELECT T2.Title FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.PostHistoryTypeId) DESC LIMIT 1 /* Answer the following: Who is the user who has made the most comments? most comments refers to MAX(COUNT(Comment)) */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.Id) DESC LIMIT 1
SELECT MIN(T2.CreationDate) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl'
SELECT MIN(posts.CreaionDate) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId ORDER BY users.Age DESC LIMIT 1 /* Answer the following: Who is the youngest user and what is his or her reputation? youngest user refers to MAX(Age); reputation refers to Reputation */ SELECT DisplayName, Reputation FROM users ORDER BY Age DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has the highest reputation? youngest user refers to MAX(Age); highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Age DESC, Reputation DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has made the most posts? youngest user refers to MAX(Age); most posts refers to COUNT(posts.Id) */ SELECT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId GROUP BY users.DisplayName ORDER BY users.Age DESC, COUNT(posts.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has received the most votes? youngest user refers to MAX(Age); most votes refers to COUNT(votes.Id) */ SELECT users.DisplayName FROM users INNER JOIN votes ON users.Id = votes.UserId GROUP BY users.DisplayName ORDER BY users.Age DESC, COUNT(votes.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has given the most votes? youngest user refers to MAX(Age); most votes refers to COUNT(votes.Id) */ SELECT users.DisplayName FROM users INNER JOIN votes ON users.Id = votes.UserId GROUP BY users.DisplayName ORDER BY users.Age DESC, COUNT(votes.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has the most badges? youngest user refers to MAX(Age); most badges refers to COUNT(badges.Id) */ SELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId GROUP BY users.DisplayName ORDER BY users.Age DESC, COUNT(badges.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has made the most comments? youngest user refers to MAX(Age); most comments refers to COUNT(comments.Id) */ SELECT users.DisplayName FROM users INNER JOIN comments ON users.Id = comments.UserId GROUP BY users.DisplayName ORDER BY users.Age DESC, COUNT(comments.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has the most post history? youngest user refers to MAX(Age); most post history refers to COUNT(postHistory.Id) */ SELECT users.DisplayName FROM users INNER JOIN postHistory ON users.Id = postHistory.UserId GROUP BY users.DisplayName ORDER BY users.Age DESC, COUNT(postHistory.Id) DESC LIMIT 1 /* Answer the following: What is the name of the youngest user who has the most post links? youngest user refers to MAX(Age); most post links refers to COUNT(postLinks.Id) */ SELECT users.DisplayName FROM users INNER JOIN postLinks ON users.Id = postLinks.PostId GROUP BY users.DisplayName ORDER BY users.Age DESC, COUNT(postLinks.Id) DESC LIMIT 1
SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Autobiographer' ORDER BY T1.Date ASC LIMIT 1 /* Answer the following: Who is the user with the highest reputation? user refers to DisplayName; highest reputation refers to MAX(Reputation) */ SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1 /* Answer the following: What is the title of the post with the most comments? title of the post refers to Title; the most comments refers to MAX(CommentCount) */ SELECT Title FROM posts ORDER BY CommentCount DESC LIMIT 1 /* Answer the following: What is the name of the most popular tag? name of the tag refers to TagName; the most popular refers to MAX(Count) */ SELECT TagName FROM tags ORDER BY Count DESC LIMIT 1 /* Answer the following: Who is the user who cast the most votes? user refers to DisplayName; the most votes refers to COUNT(UserId) */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.UserId) DESC LIMIT 1 /* Answer the following: What is the title of the post with the highest score? title of the post refers to Title; the highest score refers to MAX(Score) */ SELECT Title FROM posts ORDER BY Score DESC LIMIT 1 /* Answer the following: Who is the user who has the most posts? user refers to DisplayName; the most posts refers to COUNT(OwnerUserId) */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId ORDER BY COUNT(T1.OwnerUserId) DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most views? title of the post refers to Title; the most views refers to MAX(ViewCount) */ SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 1 /* Answer the following: Who is the user who has the most badges? user refers to DisplayName; the most badges refers to COUNT(UserId) */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T1.UserId ORDER BY COUNT(T1.UserId) DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most votes? title of the post refers to Title; the most votes refers to COUNT(PostId) */ SELECT T2.Title FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id GROUP BY T1.PostId ORDER BY COUNT(T1.PostId) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4 /* Answer the following: How many posts have been edited by users who have a reputation of 500 or more? reputation of 500 or more refers to Reputation >= 500; */ SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.Reputation >= 500 /* Answer the following: What is the average score of the posts that have been viewed more than 1000 times? viewed more than 1000 times refers to ViewCount > 1000; */ SELECT AVG(T1.Score) FROM posts AS T1 WHERE T1.ViewCount > 1000 /* Answer the following: How many users have received a badge for their posts that have a score of 10 or more? score of 10 or more refers to Score >= 10; */ SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T2.Score >= 10 /* Answer the following: What is the total number of votes for the posts that have been linked to other posts? */ SELECT COUNT(T1.Id) FROM votes AS T1 INNER JOIN postLinks AS T2 ON T1.PostId = T2.PostId /* Answer the following: How many users have made a comment on their own post? */ SELECT COUNT(DISTINCT T1.UserId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.PostId = T2.Id /* Answer the following: What is the total number of upvotes for the posts that have been tagged with 'sql'? tagged with 'sql' refers to Tags LIKE '%<sql>%'; */ SELECT SUM(T1.UpVotes) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Tags LIKE '%<sql>%'
SELECT AVG(T1.PostId) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Age = ( SELECT MAX(Age) FROM users )
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65
SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Jay Stevens' AND YEAR(T1.CreationDate) = 2010
SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' ORDER BY T1.ViewCount DESC LIMIT 1
SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.Score DESC LIMIT 1
SELECT AVG(Score) FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Stephen Turner' )
SELECT DISTINCT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2011' AND T1.ViewCount > 20000 /* Answer the following: How many posts were created in 2012 by users with a reputation of over 5000? created in 2012 refers to YEAR(CreationDate) = 2012; reputation of over 5000 refers to Reputation > 5000; */ SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2012' AND T2.Reputation > 5000 /* Answer the following: List the display names of users who received more than 100 upvotes on their posts in 2013. received more than 100 upvotes on their posts in 2013 refers to SUM(UpVotes) > 100 where YEAR(CreationDate) = 2013; */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2013' GROUP BY T2.DisplayName HAVING SUM(T1.UpVotes) > 100 /* Answer the following: How many users received the 'Teacher' badge in 2014? received the 'Teacher' badge in 2014 refers to Name = 'Teacher' where YEAR(Date) = 2014; */ SELECT COUNT(DISTINCT UserId) FROM badges WHERE STRFTIME('%Y', Date) = '2014' AND Name = 'Teacher' /* Answer the following: List the display names of users who made more than 50 comments in 2015. made more than 50 comments in 2015 refers to COUNT(Id) > 50 where YEAR(CreationDate) = 2015; */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.CreationDate) = '2015' GROUP BY T2.DisplayName HAVING COUNT(T1.Id) > 50 /* Answer the following: How many posts linked to the post with Id 12345? linked to the post with Id 12345 refers to RelatedPostId = 12345; */ SELECT COUNT(*) FROM postLinks WHERE RelatedPostId = 12345 /* Answer the following: List the display names of users who edited their posts more than 10 times. edited their posts more than 10 times refers to COUNT(Id) > 10; */ SELECT T2.DisplayName FROM postHistory AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName HAVING COUNT(T1.Id) > 10 /* Answer the following: How many votes were made by users with a reputation of less than 100? made by users with a reputation of less than 100 refers to Reputation < 100; */ SELECT COUNT(*) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation < 100 /* Answer the following: List the tags that were used more than 1000 times. used more than 1000 times refers to Count > 1000; */ SELECT TagName FROM tags WHERE Count > 1000 /* Answer the following: How many posts have the tag 'java'? have the tag 'java' refers to Tags LIKE '%<java>%'; */ SELECT COUNT(*) FROM posts WHERE Tags LIKE '%<java>%'
SELECT T1.Id, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T2.Reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) AS percentage FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2011'
SELECT CAST(COUNT(CASE WHEN Age BETWEEN 13 AND 19 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users /* Answer the following: What is the percentage of users who have more than 1000 reputation? DIVIDE(COUNT(Id where Reputation > 1000), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN Reputation > 1000 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users /* Answer the following: What is the percentage of posts that have been viewed more than 500 times? DIVIDE(COUNT(Id where ViewCount > 500), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN ViewCount > 500 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM posts /* Answer the following: What is the percentage of users who have more than 100 upvotes? DIVIDE(COUNT(Id where UpVotes > 100), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN UpVotes > 100 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users /* Answer the following: What is the percentage of posts that have more than 10 comments? DIVIDE(COUNT(Id where CommentCount > 10), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN CommentCount > 10 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM posts /* Answer the following: What is the percentage of users who have more than 50 downvotes? DIVIDE(COUNT(Id where DownVotes > 50), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN DownVotes > 50 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users /* Answer the following: What is the percentage of posts that have a score of more than 20? DIVIDE(COUNT(Id where Score > 20), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN Score > 20 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM posts /* Answer the following: What is the percentage of users who have a reputation of less than 10? DIVIDE(COUNT(Id where Reputation < 10), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN Reputation < 10 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users /* Answer the following: What is the percentage of posts that have been favorited more than 5 times? DIVIDE(COUNT(Id where FavoriteCount > 5), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN FavoriteCount > 5 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM posts /* Answer the following: What is the percentage of users who have viewed more than 1000 times? DIVIDE(COUNT(Id where Views > 1000), COUNT(Id)) as percentage; */ SELECT CAST(COUNT(CASE WHEN Views > 1000 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users
SELECT T1.ViewCount, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Computer Game Datasets'
SELECT COUNT(*) FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )
SELECT COUNT(Id) FROM comments WHERE PostId = ( SELECT Id FROM posts ORDER BY Score DESC LIMIT 1 )
SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0
SELECT T1.DisplayName, T1.Location FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T2.Id = 183 ORDER BY T2.LastEditDate DESC LIMIT 1
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1 /* Answer the following: What is the highest score comment made by the user with the display name Emmett? highest score refers to MAX(Score) FROM comments; */ SELECT T1.Score FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Score DESC LIMIT 1 /* Answer the following: What is the title of the latest post made by the user with the display name Emmett? latest post refers to Title FROM posts where MAX(CreaionDate); */ SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.CreaionDate DESC LIMIT 1 /* Answer the following: What is the name of the most used tag by the user with the display name Emmett? most used tag refers to TagName FROM tags where MAX(Count); */ SELECT T1.TagName FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T3.DisplayName = 'Emmett' ORDER BY T1.Count DESC LIMIT 1 /* Answer the following: What is the highest bounty amount given by the user with the display name Emmett? highest bounty amount refers to MAX(BountyAmount) FROM votes; */ SELECT T1.BountyAmount FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.BountyAmount DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000; /* Answer the following: List the top 10 posts with the most comments. top 10 posts refer to ORDER BY CommentCount DESC LIMIT 10; most comments refer to CommentCount; */ SELECT Id, Title FROM posts ORDER BY CommentCount DESC LIMIT 10; /* Answer the following: How many users have received the 'Teacher' badge? 'Teacher' badge refers to Name = 'Teacher'; */ SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Teacher'; /* Answer the following: What is the average score of posts that have been viewed more than 1000 times? viewed more than 1000 times refers to ViewCount > 1000; average score refers to AVG(Score); */ SELECT AVG(Score) FROM posts WHERE ViewCount > 1000; /* Answer the following: Who are the top 5 users with the most downvotes? top 5 users refer to ORDER BY DownVotes DESC LIMIT 5; most downvotes refer to DownVotes; */ SELECT Id, DisplayName FROM users ORDER BY DownVotes DESC LIMIT 5; /* Answer the following: How many posts have been linked to more than once? linked to more than once refers to COUNT(PostId) > 1; */ SELECT COUNT(PostId) FROM postLinks GROUP BY PostId HAVING COUNT(PostId) > 1; /* Answer the following: What is the total number of votes cast by users who have a reputation of over 1000? reputation of over 1000 refers to Reputation > 1000; total number of votes cast refers to COUNT(votes.Id); */ SELECT COUNT(votes.Id) FROM votes INNER JOIN users ON votes.UserId = users.Id WHERE users.Reputation > 1000;
SELECT strftime('%J', T2.Date) - strftime('%J', T1.CreationDate) AS days FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Zolomon'
SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY CreationDate DESC LIMIT 1)) AS PostCount, (SELECT COUNT(*) FROM comments WHERE UserId = (SELECT Id FROM users ORDER BY CreationDate DESC LIMIT 1)) AS CommentCount
SELECT T1.Text, T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T1.PostId = T3.Id WHERE T3.Title = 'Analysing wind data with R' ORDER BY T1.CreationDate DESC LIMIT 1 /* Answer the following: What is the name of the badge that the user with the display name 'John Doe' received most recently? the badge that the user with the display name 'John Doe' received most recently refers to MAX(Date); */ SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'John Doe' ORDER BY T1.Date DESC LIMIT 1 /* Answer the following: What is the title of the most upvoted post? the most upvoted post refers to MAX(UpVotes); */ SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T2.UpVotes DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most downvotes? the user who has the most downvotes refers to MAX(DownVotes); */ SELECT T1.DisplayName FROM users AS T1 ORDER BY T1.DownVotes DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most comments? the post that has the most comments refers to MAX(CommentCount); */ SELECT T1.Title FROM posts AS T1 ORDER BY T1.CommentCount DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most badges? the user who has the most badges refers to COUNT(Id); */ SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the tag name of the most used tag? the most used tag refers to MAX(Count); */ SELECT T1.TagName FROM tags AS T1 ORDER BY T1.Count DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the highest reputation? the user who has the highest reputation refers to MAX(Reputation); */ SELECT T1.DisplayName FROM users AS T1 ORDER BY T1.Reputation DESC LIMIT 1 /* Answer the following: What is the title of the post that has the most views? the post that has the most views refers to MAX(ViewCount); */ SELECT T1.Title FROM posts AS T1 ORDER BY T1.ViewCount DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most posts? the user who has the most posts refers to COUNT(Id); */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most votes? the user who has the most votes refers to COUNT(Id); */ SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most favorite posts? the user who has the most favorite posts refers to MAX(FavoriteCount); */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most edited posts? the user who has the most edited posts refers to COUNT(LastEditorUserId); */ SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.LastEditorUserId) DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most linked posts? the user who has the most linked posts refers to COUNT(PostId); */ SELECT T2.DisplayName FROM postLinks AS T1 INNER JOIN users AS T2 ON T1.PostId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.PostId) DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most post history? the user who has the most post history refers to COUNT(UserId); */ SELECT T2.DisplayName FROM postHistory AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.UserId) DESC LIMIT 1 /* Answer the following: What is the display name of the user who has the most comments? the user who has the most comments refers to COUNT(UserId); */ SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.UserId) DESC LIMIT 1
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol'
SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T2.TagName = 'careers'
SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'
SELECT (SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) AS CommentCount, (SELECT COUNT(*) FROM posts WHERE PostTypeId = 2 AND ParentId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) AS AnswerCount
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'
SELECT COUNT(Id) FROM votes WHERE BountyAmount >= 30
SELECT CAST(COUNT(CASE WHEN T2.Score >= 50 THEN 1 END) AS REAL) * 100 / COUNT(T2.Id) FROM ( SELECT UserId FROM users ORDER BY Reputation DESC LIMIT 1 ) AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId /* Answer the following: What is the average score of the posts that have the most comments? The most comments refers to MAX(CommentCount); */ SELECT AVG(T2.Score) FROM ( SELECT PostId FROM comments GROUP BY PostId ORDER BY COUNT(Id) DESC LIMIT 1 ) AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id /* Answer the following: What is the average number of comments on the posts of the user who has the most badges? The most badges refers to MAX(COUNT(badges.Id)); */ SELECT AVG(T2.CommentCount) FROM ( SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 ) AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId /* Answer the following: What is the average score of the posts that have the most votes? The most votes refers to MAX(COUNT(votes.Id)); */ SELECT AVG(T2.Score) FROM ( SELECT PostId FROM votes GROUP BY PostId ORDER BY COUNT(Id) DESC LIMIT 1 ) AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id /* Answer the following: What is the average number of votes on the posts of the user who has the most posts? The most posts refers to MAX(COUNT(posts.Id)); */ SELECT AVG(T2.VoteCount) FROM ( SELECT OwnerUserId FROM posts GROUP BY OwnerUserId ORDER BY COUNT(Id) DESC LIMIT 1 ) AS T1 INNER JOIN ( SELECT PostId, COUNT(Id) AS VoteCount FROM votes GROUP BY PostId ) AS T2 ON T1.OwnerUserId = T2.PostId /* Answer the following: What is the average score of the posts that have the most tags? The most tags refers to MAX(COUNT(tags.Id)); */ SELECT AVG(T2.Score) FROM ( SELECT PostId FROM postLinks GROUP BY PostId ORDER BY COUNT(Id) DESC LIMIT 1 ) AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id /* Answer the following: What is the average number of tags on the posts of the user who has the most comments? The most comments refers to MAX(COUNT(comments.Id)); */ SELECT AVG(T2.TagCount) FROM ( SELECT UserId FROM comments GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 ) AS T1 INNER JOIN ( SELECT PostId, COUNT(Id) AS TagCount FROM postLinks GROUP BY PostId ) AS T2 ON T1.UserId = T2.PostId
SELECT COUNT(Id) FROM posts WHERE Score < 20 /* Answer the following: What are the names of users who have more than 1000 reputation? more than 1000 reputation refers to Reputation > 1000; */ SELECT DisplayName FROM users WHERE Reputation > 1000 /* Answer the following: How many comments have a score greater than 10? score greater than 10 refers to Score > 10; */ SELECT COUNT(Id) FROM comments WHERE Score > 10 /* Answer the following: What are the names of badges that were given on '2020-01-01'? given on '2020-01-01' refers to Date = '2020-01-01'; */ SELECT Name FROM badges WHERE Date = '2020-01-01' /* Answer the following: What are the ids of posts that have more than 10 comments? more than 10 comments refers to CommentCount > 10; */ SELECT Id FROM posts WHERE CommentCount > 10 /* Answer the following: What are the ids of users who have voted more than 100 times? voted more than 100 times refers to COUNT(UserId) > 100; */ SELECT UserId FROM votes GROUP BY UserId HAVING COUNT(UserId) > 100 /* Answer the following: What are the ids of posts that are linked to more than 5 other posts? linked to more than 5 other posts refers to COUNT(PostId) > 5; */ SELECT PostId FROM postLinks GROUP BY PostId HAVING COUNT(PostId) > 5 /* Answer the following: What are the ids of users who have edited more than 10 posts? edited more than 10 posts refers to COUNT(UserId) > 10; */ SELECT UserId FROM postHistory GROUP BY UserId HAVING COUNT(UserId) > 10 /* Answer the following: What are the names of tags that are used more than 1000 times? used more than 1000 times refers to Count > 1000; */ SELECT TagName FROM tags WHERE Count > 1000 /* Answer the following: What are the ids of users who have received a badge named 'Great Answer'? received a badge named 'Great Answer' refers to Name = 'Great Answer'; */ SELECT UserId FROM badges WHERE Name = 'Great Answer'
SELECT COUNT(Id) FROM tags WHERE Id < 15 AND Count <= 20
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'
SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)';
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How can I adapt ANOVA for binary data?' /* Answer the following: Provide the names of users who have badges named 'Teacher'. Name = 'Teacher'; */ SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher' /* Answer the following: Give the number of votes on the post titled 'How to interpret logistic regression output?'. Title = 'How to interpret logistic regression output?'; */ SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How to interpret logistic regression output?' /* Answer the following: Provide the number of posts that have been edited by users with a reputation of 1000. Reputation = 1000; */ SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T1.Reputation = 1000 /* Answer the following: Give the number of users who have commented on the post titled 'How to interpret logistic regression output?'. Title = 'How to interpret logistic regression output?'; */ SELECT COUNT(DISTINCT T2.UserId) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'How to interpret logistic regression output?'
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount BETWEEN 100 AND 150 ORDER BY T2.Score DESC LIMIT 1 /* Answer the following: Among the users with reputation ranging from 500 to 1000, what is the post with the highest score? reputation ranging from 500 to 1000 refers to Reputation BETWEEN 500 AND 1000; post with the highest score refers to Body where MAX(Score); */ SELECT T2.Body FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Reputation BETWEEN 500 AND 1000 ORDER BY T2.Score DESC LIMIT 1 /* Answer the following: Among the posts with post type ID 1, what is the tag with the highest count? post type ID 1 refers to PostTypeId = 1; tag with the highest count refers to TagName where MAX(Count); */ SELECT T2.TagName FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T1.PostTypeId = 1 ORDER BY T2.Count DESC LIMIT 1 /* Answer the following: Among the users with upvotes ranging from 50 to 100, what is the badge with the most recent date? upvotes ranging from 50 to 100 refers to UpVotes BETWEEN 50 AND 100; badge with the most recent date refers to Name where MAX(Date); */ SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.UpVotes BETWEEN 50 AND 100 ORDER BY T2.Date DESC LIMIT 1 /* Answer the following: Among the posts with comment count ranging from 10 to 20, what is the vote with the highest bounty amount? comment count ranging from 10 to 20 refers to CommentCount BETWEEN 10 AND 20; vote with the highest bounty amount refers to BountyAmount where MAX(BountyAmount); */ SELECT T2.BountyAmount FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.CommentCount BETWEEN 10 AND 20 ORDER BY T2.BountyAmount DESC LIMIT 1
SELECT T1.CreationDate, T1.Age FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text LIKE '%http://%'
SELECT COUNT(DISTINCT T2.PostId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5
SELECT COUNT(*) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CommentCount = 1 AND T2.Score = 0
SELECT COUNT(DISTINCT T2.UserId) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40
SELECT T1.PostId, T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Group differences on a five point Likert item'
SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = "R is also lazy evaluated."
SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'
SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0 /* Answer the following: List down the post titles that have more than 10 comments and less than 5 favorites. CommentCount > 10; FavoriteCount < 5 */ SELECT Title FROM posts WHERE CommentCount > 10 AND FavoriteCount < 5 /* Answer the following: List down the tag names that are used in more than 100 posts. Count > 100 */ SELECT TagName FROM tags WHERE Count > 100 /* Answer the following: List down the display names of users who have more than 1000 reputation and less than 10 down votes. Reputation > 1000; DownVotes < 10 */ SELECT DisplayName FROM users WHERE Reputation > 1000 AND DownVotes < 10 /* Answer the following: List down the post titles that have more than 100 views and less than 10 comments. ViewCount > 100; CommentCount < 10 */ SELECT Title FROM posts WHERE ViewCount > 100 AND CommentCount < 10 /* Answer the following: List down the display names of users who have more than 100 up votes and less than 10 down votes. UpVotes > 100; DownVotes < 10 */ SELECT DisplayName FROM users WHERE UpVotes > 100 AND DownVotes < 10 /* Answer the following: List down the post titles that have more than 10 favorites and less than 5 comments. FavoriteCount > 10; CommentCount < 5 */ SELECT Title FROM posts WHERE FavoriteCount > 10 AND CommentCount < 5 /* Answer the following: List down the display names of users who have more than 1000 reputation and less than 50 views. Reputation > 1000; Views < 50 */ SELECT DisplayName FROM users WHERE Reputation > 1000 AND Views < 50 /* Answer the following: List down the post titles that have more than 100 views and less than 50 comments. ViewCount > 100; CommentCount < 50 */ SELECT Title FROM posts WHERE ViewCount > 100 AND CommentCount < 50 /* Answer the following: List down the display names of users who have more than 100 up votes and less than 50 down votes. UpVotes > 100; DownVotes < 50 */ SELECT DisplayName FROM users WHERE UpVotes > 100 AND DownVotes < 50
SELECT CAST(SUM(CASE WHEN T2.UpVotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = '3-D Man'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200
SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15
SELECT COUNT(*) FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE C.colour = 'Blue' /* Answer the following: What is the average weight of superheroes from the Marvel Comics publisher? Marvel Comics publisher refers to publisher_name = 'Marvel Comics' and publisher_id = publisher.id; */ SELECT AVG(S.weight_kg) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name = 'Marvel Comics' /* Answer the following: How many superheroes have the superpower of 'Flight'? 'Flight' refers to power_name = 'Flight' and power_id = superpower.id; */ SELECT COUNT(*) FROM superhero AS S INNER JOIN hero_power AS HP ON S.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE SP.power_name = 'Flight' /* Answer the following: What is the most common attribute among superheroes? most common attribute refers to max(count(attribute_id)) */ SELECT A.attribute_name FROM attribute AS A INNER JOIN hero_attribute AS HA ON A.id = HA.attribute_id GROUP BY A.attribute_name ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: How many superheroes are aligned with 'good'? 'good' refers to alignment = 'good' and alignment_id = alignment.id; */ SELECT COUNT(*) FROM superhero AS S INNER JOIN alignment AS A ON S.alignment_id = A.id WHERE A.alignment = 'good' /* Answer the following: What is the average height of superheroes who are 'Human'? 'Human' refers to race = 'Human' and race_id = race.id; */ SELECT AVG(S.height_cm) FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id WHERE R.race = 'Human' /* Answer the following: How many superheroes have the attribute of 'Strength' greater than 80? 'Strength' greater than 80 refers to attribute_name = 'Strength' and attribute_value > 80; */ SELECT COUNT(*) FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE A.attribute_name = 'Strength' AND HA.attribute_value > 80
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'
SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Blond'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'
SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Blue' AND T3.publisher_name = 'Marvel Comics'
SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT CAST(SUM(CASE WHEN T4.power_name = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'
SELECT T4.publisher_name FROM publisher AS T4 INNER JOIN superhero AS T1 ON T4.id = T1.publisher_id INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value ASC LIMIT 1
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'
SELECT COUNT(*) FROM superhero AS s INNER JOIN colour AS c ON s.hair_colour_id = c.id WHERE c.colour = 'Blond' /* Answer the following: How many superheroes are aligned with 'good'? superheroes aligned with 'good' refers to alignment = 'good' where alignment_id = alignment.id */ SELECT COUNT(*) FROM superhero AS s INNER JOIN alignment AS a ON s.alignment_id = a.id WHERE a.alignment = 'good' /* Answer the following: How many superheroes have the superpower of 'flight'? superheroes with the superpower of 'flight' refers to power_name = 'flight' where power_id = superpower.id */ SELECT COUNT(*) FROM superhero AS s INNER JOIN hero_power AS hp ON s.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE sp.power_name = 'flight' /* Answer the following: How many superheroes are published by 'Marvel Comics'? superheroes published by 'Marvel Comics' refers to publisher_name = 'Marvel Comics' where publisher_id = publisher.id */ SELECT COUNT(*) FROM superhero AS s INNER JOIN publisher AS p ON s.publisher_id = p.id WHERE p.publisher_name = 'Marvel Comics' /* Answer the following: How many superheroes are of the 'Human' race? superheroes of the 'Human' race refers to race = 'Human' where race_id = race.id */ SELECT COUNT(*) FROM superhero AS s INNER JOIN race AS r ON s.race_id = r.id WHERE r.race = 'Human'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value ASC LIMIT 1 /* Answer the following: What is the most common superpower? the most common superpower refers to MAX(power_id) */ SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T1.power_id ORDER BY COUNT(T1.hero_id) DESC LIMIT 1 /* Answer the following: Which superhero has the most superpowers? superhero with the most superpowers refers to MAX(hero_id) */ SELECT T2.superhero_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id GROUP BY T1.hero_id ORDER BY COUNT(T1.power_id) DESC LIMIT 1 /* Answer the following: What is the most common race among superheroes? the most common race refers to MAX(race_id) */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id GROUP BY T1.race_id ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which superhero is the tallest? the tallest superhero refers to MAX(height_cm) */ SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1 /* Answer the following: Which superhero is the heaviest? the heaviest superhero refers to MAX(weight_kg) */ SELECT superhero_name FROM superhero ORDER BY weight_kg DESC LIMIT 1 /* Answer the following: Which superhero has the most attributes? superhero with the most attributes refers to MAX(hero_id) */ SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id GROUP BY T1.hero_id ORDER BY COUNT(T1.attribute_id) DESC LIMIT 1 /* Answer the following: What is the most common attribute among superheroes? the most common attribute refers to MAX(attribute_id) */ SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id GROUP BY T1.attribute_id ORDER BY COUNT(T1.hero_id) DESC LIMIT 1 /* Answer the following: Which superhero has the most unique superpowers? superhero with the most unique superpowers refers to MAX(hero_id) */ SELECT T2.superhero_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id GROUP BY T1.hero_id ORDER BY COUNT(DISTINCT T1.power_id) DESC LIMIT 1 /* Answer the following: What is the most common publisher among superheroes? the most common publisher refers to MAX(publisher_id) */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T1.publisher_id ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which superhero has the most unique attributes? superhero with the most unique attributes refers to MAX(hero_id) */ SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id GROUP BY T1.hero_id ORDER BY COUNT(DISTINCT T1.attribute_id) DESC LIMIT 1 /* Answer the following: What is the most common alignment among superheroes? the most common alignment refers to MAX(alignment_id) */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id GROUP BY T1.alignment_id ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which superhero has the most unique races? superhero with the most unique races refers to MAX(hero_id) */ SELECT T2.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id GROUP BY T1.id ORDER BY COUNT(DISTINCT T1.race_id) DESC LIMIT 1 /* Answer the following: What is the most common gender among superheroes? the most common gender refers to MAX(gender_id) */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id GROUP BY T1.gender_id ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which superhero has the most unique genders? superhero with the most unique genders refers to MAX(hero_id) */ SELECT T2.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id GROUP BY T1.id ORDER BY COUNT(DISTINCT T1.gender_id) DESC LIMIT 1 /* Answer the following: What is the most common colour among superheroes? the most common colour refers to MAX(colour_id) */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id OR T1.hair_colour_id = T2.id OR T1.skin_colour_id = T2.id GROUP BY T2.id ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which superhero has the most unique colours? superhero with the most unique colours refers to MAX(hero_id) */ SELECT T2.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id OR T1.hair_colour_id = T2.id OR T1.skin_colour_id = T2.id GROUP BY T1.id ORDER BY COUNT(DISTINCT T2.id) DESC LIMIT 1
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'
SELECT COUNT(DISTINCT superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'
SELECT COUNT(*) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
SELECT CAST(COUNT(CASE WHEN T1.alignment = 'Bad' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id), COUNT(CASE WHEN T1.alignment = 'Bad' AND T3.publisher_name = 'Marvel Comics' THEN T2.id ELSE NULL END) AS "number" FROM alignment AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.alignment_id INNER JOIN publisher AS T3 ON T3.id = T2.publisher_id
SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS difference FROM superhero
SELECT id FROM publisher WHERE publisher_name = 'Star Trek'
SELECT AVG(attribute_value) FROM hero_attribute
SELECT COUNT(id) FROM superhero WHERE full_name IS NULL
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75 /* Answer the following: What is the full name of superhero with superhero ID 20? full name refers to full_name; superhero ID 20 refers to superhero.id = 20; */ SELECT full_name FROM superhero WHERE id = 20 /* Answer the following: What are the superpowers of superhero with superhero ID 45? superpowers refer to power_name; superhero ID 45 refers to hero_id = 45; */ SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 45 /* Answer the following: What is the gender of superhero with superhero ID 30? gender refers to gender where gender_id = gender.id; */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.id = 30 /* Answer the following: What is the race of superhero with superhero ID 50? race refers to race where race_id = race.id; */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 50 /* Answer the following: What is the publisher of superhero with superhero ID 60? publisher refers to publisher_name where publisher_id = publisher.id; */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 60 /* Answer the following: What is the alignment of superhero with superhero ID 70? alignment refers to alignment where alignment_id = alignment.id; */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.id = 70 /* Answer the following: What are the attributes of superhero with superhero ID 80? attributes refer to attribute_name where attribute_id = attribute.id; */ SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.hero_id = 80
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2 /* Answer the following: What is the average height of superheroes with alignment 'Good'? 'Good' refers to alignment_id = 1; average height refers to AVG(height_cm) */ SELECT AVG(height_cm) FROM superhero WHERE alignment_id = 1 /* Answer the following: What is the average attribute value of superheroes with superpower 'Flight'? 'Flight' refers to power_name = 'Flight'; average attribute value refers to AVG(attribute_value) */ SELECT AVG(attribute_value) FROM hero_attribute WHERE hero_id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Flight')) /* Answer the following: What is the average weight of superheroes from publisher 'Marvel Comics'? 'Marvel Comics' refers to publisher_name = 'Marvel Comics'; average weight refers to AVG(weight_kg) */ SELECT AVG(weight_kg) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')
SELECT T3.power_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T3 ON T4.power_id = T3.id WHERE T2.gender = 'Male' LIMIT 5 /* Answer the following: Provide the full name of the superhero with the attribute of 'Super Strength'. attribute of 'Super Strength' refers to attribute_name = 'Super Strength'; full name refers to full_name; */ SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Super Strength' /* Answer the following: Indicate the name of the publisher of the superhero with the race of 'Human'. race of 'Human' refers to race = 'Human'; name of the publisher refers to publisher_name; */ SELECT T4.publisher_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T2.race = 'Human' /* Answer the following: List down the superheroes with the alignment of 'Good'. alignment of 'Good' refers to alignment = 'Good'; superheroes refers to superhero_name; */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Good' /* Answer the following: Provide the height and weight of the superhero with the skin colour of 'Green'. skin colour of 'Green' refers to colour = 'Green'; height and weight refers to height_cm and weight_kg; */ SELECT T1.height_cm, T1.weight_kg FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T2.colour = 'Green'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id IS NULL
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56
SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5 /* Answer the following: List down at least five superheroes who have the superpower of 'Flight'. 'Flight' refers to power_name = 'Flight' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight' LIMIT 5 /* Answer the following: List down at least five superheroes who are published by 'Marvel Comics'. 'Marvel Comics' refers to publisher_name = 'Marvel Comics' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' LIMIT 5 /* Answer the following: List down at least five superheroes who are 'Female'. 'Female' refers to gender = 'Female' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female' LIMIT 5 /* Answer the following: List down at least five superheroes who have 'Blue' eye colour. 'Blue' refers to colour = 'Blue' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5 /* Answer the following: List down at least five superheroes who have 'Strength' attribute with value more than 80. 'Strength' refers to attribute_name = 'Strength' and attribute_value > 80 */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value > 80 LIMIT 5
SELECT COUNT(id) FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Bad' )
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169 /* Answer the following: What is the superpower of the superhero who is 200 cm tall? 200 cm tall refers to height_cm = 200 */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.height_cm = 200 /* Answer the following: What is the attribute value of the superhero who has blue eyes? blue eyes refers to eye_colour_id where colour = 'Blue' */ SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T3.colour = 'Blue' /* Answer the following: What is the name of the superhero who is published by 'Marvel Comics'? 'Marvel Comics' refers to publisher_id where publisher_name = 'Marvel Comics' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' /* Answer the following: What is the gender of the superhero who has the power of 'Flight'? 'Flight' refers to power_id where power_name = 'Flight' */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Flight'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T1.height_cm = 185 AND T3.race = 'Human'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the name of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); name refers to superhero_name; */ SELECT T1.superhero_name FROM superhero AS T1 ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the race of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); race refers to race where race_id = race.id; */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the gender of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); gender refers to gender where gender_id = gender.id; */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the alignment of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); alignment refers to alignment where alignment_id = alignment.id; */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the publisher of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); publisher refers to publisher where publisher_id = publisher.id; */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the skin colour of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); skin colour refers to colour where skin_colour_id = colour.id; */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the hair colour of the heaviest superhero? the heaviest superhero refers to MAX(weight_kg); hair colour refers to colour where hair_colour_id = colour.id; */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1
SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180
SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg > ( SELECT AVG(weight_kg) * 0.79 FROM superhero )
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1
SELECT T2.attribute_name, T3.attribute_value FROM superhero AS T1 INNER JOIN attribute AS T2 ON T1.id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T1.superhero_name = 'Abomination'
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'stealth'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'strength' ORDER BY T2.attribute_value DESC LIMIT 1 /* Answer the following: What is the name of the superpower that the heaviest hero possesses? heaviest hero refers to MAX(weight_kg); */ SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the name of the publisher that has the most superheroes? most superheroes refers to COUNT(superhero_name); */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T2.publisher_name ORDER BY COUNT(T1.superhero_name) DESC LIMIT 1 /* Answer the following: What is the name of the superhero with the most superpowers? most superpowers refers to COUNT(power_name); */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id GROUP BY T1.superhero_name ORDER BY COUNT(T3.power_name) DESC LIMIT 1 /* Answer the following: What is the name of the superhero with the highest height? highest height refers to MAX(height_cm); */ SELECT T1.superhero_name FROM superhero AS T1 ORDER BY T1.height_cm DESC LIMIT 1 /* Answer the following: What is the name of the superhero with the highest weight? highest weight refers to MAX(weight_kg); */ SELECT T1.superhero_name FROM superhero AS T1 ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: What is the name of the superhero with the most attributes? most attributes refers to COUNT(attribute_name); */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id GROUP BY T1.superhero_name ORDER BY COUNT(T3.attribute_name) DESC LIMIT 1 /* Answer the following: What is the name of the superhero with the most alignment? most alignment refers to COUNT(alignment); */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id GROUP BY T1.superhero_name ORDER BY COUNT(T2.alignment) DESC LIMIT 1 /* Answer the following: What is the name of the superhero with the most gender? most gender refers to COUNT(gender); */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id GROUP BY T1.superhero_name ORDER BY COUNT(T2.gender) DESC LIMIT 1 /* Answer the following: What is the name of the superhero with the most race? most race refers to COUNT(race); */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id GROUP BY T1.superhero_name ORDER BY COUNT(T2.race) DESC LIMIT 1 /* Answer the following: What is the name of the superhero with the most colour? most colour refers to COUNT(colour); */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id OR T1.hair_colour_id = T2.id OR T1.skin_colour_id = T2.id GROUP BY T1.superhero_name ORDER BY COUNT(T2.colour) DESC LIMIT 1
SELECT CAST(COUNT(CASE WHEN T1.skin_colour_id = 1 THEN T1.id ELSE NULL END) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T3.attribute_name = 'durability' AND T4.publisher_name = 'Dark Horse Comics' ORDER BY T2.attribute_value DESC LIMIT 1
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'
SELECT T2.colour AS eye_colour, T3.colour AS hair_colour, T4.colour AS skin_colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN colour AS T4 ON T1.skin_colour_id = T4.id INNER JOIN gender AS T5 ON T1.gender_id = T5.id INNER JOIN publisher AS T6 ON T1.publisher_id = T6.id WHERE T5.gender = 'Female' AND T6.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name, T5.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T5 ON T1.publisher_id = T5.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'
SELECT CAST(SUM(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.gender_id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'
SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13' /* Answer the following: What are the superpowers of the hero named 'Superman'? 'Superman' refers to superhero_name = 'Superman'; superpowers refer to power_name */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Superman' /* Answer the following: What is the race of the hero named 'Thor'? 'Thor' refers to superhero_name = 'Thor'; race refers to race */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Thor' /* Answer the following: What are the attributes of the hero named 'Iron Man'? 'Iron Man' refers to superhero_name = 'Iron Man'; attributes refer to attribute_name */ SELECT T2.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T2 ON T3.attribute_id = T2.id WHERE T1.superhero_name = 'Iron Man' /* Answer the following: What is the alignment of the hero named 'Batman'? 'Batman' refers to superhero_name = 'Batman'; alignment refers to alignment */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.superhero_name = 'Batman'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'
SELECT COUNT(power_id) FROM hero_power WHERE hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Amazo' )
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.full_name = 'Hunter Zolomon'
SELECT superhero.superhero_name, superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Black' AND T3.colour = 'Black'
SELECT T2.colour AS eye_colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire' /* Answer the following: List the superpowers of the hero named "Superman". hero named "Superman" refers to superhero_name = 'Superman'; */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Superman' /* Answer the following: What is the alignment of the hero named "Batman"? hero named "Batman" refers to superhero_name = 'Batman'; */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.superhero_name = 'Batman' /* Answer the following: What is the gender of the hero named "Wonder Woman"? hero named "Wonder Woman" refers to superhero_name = 'Wonder Woman'; */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Wonder Woman' /* Answer the following: What is the race of the hero named "Thor"? hero named "Thor" refers to superhero_name = 'Thor'; */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Thor' /* Answer the following: What is the publisher of the hero named "Spider-Man"? hero named "Spider-Man" refers to superhero_name = 'Spider-Man'; */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Spider-Man'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'
SELECT COUNT(DISTINCT T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))
SELECT T3.race, T4.alignment FROM superhero AS T1 INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Cameron Hicks'
SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T3.publisher_name = 'Marvel Comics'
SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
SELECT (SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END)) AS weight_difference FROM superhero
SELECT superhero_name, AVG(height_cm) FROM superhero GROUP BY superhero_name;
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Abomination'
SELECT COUNT(*) FROM superhero JOIN race ON superhero.race_id = race.id JOIN gender ON superhero.gender_id = gender.id WHERE race.race = 'god/eternal' AND gender.gender = 'Male'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1 /* Answer the following: What is the most common superpower? most common refers to COUNT(power_id); superpower refers to power_name */ SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T1.power_id ORDER BY COUNT(T1.power_id) DESC LIMIT 1 /* Answer the following: Which superhero has the most superpowers? superhero refers to superhero_name; most superpowers refers to COUNT(power_id) */ SELECT T2.superhero_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id GROUP BY T1.hero_id ORDER BY COUNT(T1.power_id) DESC LIMIT 1 /* Answer the following: What is the most common alignment? most common refers to COUNT(alignment_id); alignment refers to alignment */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id GROUP BY T1.alignment_id ORDER BY COUNT(T1.alignment_id) DESC LIMIT 1 /* Answer the following: What is the most common race? most common refers to COUNT(race_id); race refers to race */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id GROUP BY T1.race_id ORDER BY COUNT(T1.race_id) DESC LIMIT 1 /* Answer the following: What is the most common publisher? most common refers to COUNT(publisher_id); publisher refers to publisher_name */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T1.publisher_id ORDER BY COUNT(T1.publisher_id) DESC LIMIT 1 /* Answer the following: What is the most common gender? most common refers to COUNT(gender_id); gender refers to gender */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id GROUP BY T1.gender_id ORDER BY COUNT(T1.gender_id) DESC LIMIT 1 /* Answer the following: What is the most common eye colour? most common refers to COUNT(eye_colour_id); eye colour refers to colour */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id GROUP BY T1.eye_colour_id ORDER BY COUNT(T1.eye_colour_id) DESC LIMIT 1 /* Answer the following: What is the most common hair colour? most common refers to COUNT(hair_colour_id); hair colour refers to colour */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id GROUP BY T1.hair_colour_id ORDER BY COUNT(T1.hair_colour_id) DESC LIMIT 1 /* Answer the following: What is the most common skin colour? most common refers to COUNT(skin_colour_id); skin colour refers to colour */ SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id GROUP BY T1.skin_colour_id ORDER BY COUNT(T1.skin_colour_id) DESC LIMIT 1
SELECT COUNT(id) FROM superhero WHERE alignment_id = 3 /* Answer the following: How many superheroes have the attribute "strength" greater than 50? "strength" refers to attribute_id = 1; */ SELECT COUNT(hero_id) FROM hero_attribute WHERE attribute_id = 1 AND attribute_value > 50 /* Answer the following: How many superheroes have the superpower "flight"? "flight" refers to power_id = 2; */ SELECT COUNT(hero_id) FROM hero_power WHERE power_id = 2 /* Answer the following: How many superheroes are published by "Marvel Comics"? "Marvel Comics" refers to publisher_id = 1; */ SELECT COUNT(id) FROM superhero WHERE publisher_id = 1 /* Answer the following: How many superheroes are of the race "Human"? "Human" refers to race_id = 1; */ SELECT COUNT(id) FROM superhero WHERE race_id = 1 /* Answer the following: How many superheroes have blue eyes? blue eyes refers to eye_colour_id = 1; */ SELECT COUNT(id) FROM superhero WHERE eye_colour_id = 1 /* Answer the following: How many superheroes are female? female refers to gender_id = 2; */ SELECT COUNT(id) FROM superhero WHERE gender_id = 2 /* Answer the following: How many superheroes have a height greater than 200 cm? */ SELECT COUNT(id) FROM superhero WHERE height_cm > 200 /* Answer the following: How many superheroes weigh less than 100 kg? */ SELECT COUNT(id) FROM superhero WHERE weight_kg < 100
SELECT T2.attribute_name, T1.attribute_value FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = '3-D Man'
SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.eye_colour_id = 7 AND T1.hair_colour_id = 9 /* Answer the following: What are the attributes of the superhero 'Superman'? 'Superman' refers to superhero_name = 'Superman'; attributes refer to attribute_name */ SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Superman' /* Answer the following: What are the superpowers of the superhero 'Wonder Woman'? 'Wonder Woman' refers to superhero_name = 'Wonder Woman'; superpowers refer to power_name */ SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Wonder Woman' /* Answer the following: Which superheroes are published by 'Marvel Comics'? 'Marvel Comics' refers to publisher_name = 'Marvel Comics'; superheroes refer to superhero_name */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' /* Answer the following: Which superheroes are of the 'Human' race? 'Human' refers to race = 'Human'; superheroes refer to superhero_name */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Human'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
SELECT COUNT(id) FROM superhero WHERE publisher_id IS NULL
SELECT CAST(SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) AS "percentage" FROM superhero /* Answer the following: Calculate the percentage of superheroes that are female. percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE gender_id = 2), COUNT(superhero_name)), 100.0); female refers to gender_id = 2; */ SELECT CAST(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) AS "percentage" FROM superhero /* Answer the following: Calculate the percentage of superheroes that have the superpower of 'flight'. percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'flight')), COUNT(superhero_name)), 100.0); 'flight' refers to power_name = 'flight'; */ SELECT CAST(SUM(CASE WHEN power_id = (SELECT id FROM superpower WHERE power_name = 'flight') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(hero_id) AS "percentage" FROM hero_power /* Answer the following: Calculate the percentage of superheroes that are published by 'Marvel Comics'. percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')), COUNT(superhero_name)), 100.0); 'Marvel Comics' refers to publisher_name = 'Marvel Comics'; */ SELECT CAST(SUM(CASE WHEN publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) AS "percentage" FROM superhero /* Answer the following: Calculate the percentage of superheroes that are of the 'Human' race. percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE race_id = (SELECT id FROM race WHERE race = 'Human')), COUNT(superhero_name)), 100.0); 'Human' refers to race = 'Human'; */ SELECT CAST(SUM(CASE WHEN race_id = (SELECT id FROM race WHERE race = 'Human') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) AS "percentage" FROM superhero /* Answer the following: Calculate the percentage of superheroes that have 'Strength' as an attribute. percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength')), COUNT(superhero_name)), 100.0); 'Strength' refers to attribute_name = 'Strength'; */ SELECT CAST(SUM(CASE WHEN attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(hero_id) AS "percentage" FROM hero_attribute
SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero /* Answer the following: What is the ratio of superheroes with alignment 'Good' to superheroes with alignment 'Bad'? ratio = DIVIDE(SUM(alignment_id = 1), SUM(alignment_id = 2)); 'Good' alignment refers to alignment_id = 1; 'Bad' alignment refers to alignment_id = 2; */ SELECT CAST(SUM(CASE WHEN alignment_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN alignment_id = 2 THEN 1 ELSE 0 END) FROM superhero /* Answer the following: What is the ratio of superheroes with 'Blue' eye colour to superheroes with 'Green' eye colour? ratio = DIVIDE(SUM(eye_colour_id = 1), SUM(eye_colour_id = 2)); 'Blue' eye colour refers to eye_colour_id = 1; 'Green' eye colour refers to eye_colour_id = 2; */ SELECT CAST(SUM(CASE WHEN eye_colour_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN eye_colour_id = 2 THEN 1 ELSE 0 END) FROM superhero /* Answer the following: What is the ratio of superheroes with 'Black' hair colour to superheroes with 'Blonde' hair colour? ratio = DIVIDE(SUM(hair_colour_id = 1), SUM(hair_colour_id = 2)); 'Black' hair colour refers to hair_colour_id = 1; 'Blonde' hair colour refers to hair_colour_id = 2; */ SELECT CAST(SUM(CASE WHEN hair_colour_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN hair_colour_id = 2 THEN 1 ELSE 0 END) FROM superhero /* Answer the following: What is the ratio of superheroes with 'Marvel Comics' publisher to superheroes with 'DC Comics' publisher? ratio = DIVIDE(SUM(publisher_id = 1), SUM(publisher_id = 2)); 'Marvel Comics' publisher refers to publisher_id = 1; 'DC Comics' publisher refers to publisher_id = 2; */ SELECT CAST(SUM(CASE WHEN publisher_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN publisher_id = 2 THEN 1 ELSE 0 END) FROM superhero /* Answer the following: What is the ratio of superheroes with 'Human' race to superheroes with 'Mutant' race? ratio = DIVIDE(SUM(race_id = 1), SUM(race_id = 2)); 'Human' race refers to race_id = 1; 'Mutant' race refers to race_id = 2; */ SELECT CAST(SUM(CASE WHEN race_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN race_id = 2 THEN 1 ELSE 0 END) FROM superhero
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1
SELECT id FROM superpower WHERE power_name = 'cryokinesis'
SELECT superhero_name FROM superhero WHERE id = 294 /* Answer the following: List down the superpowers of superhero with superhero ID 294. superpowers refers to power_name; superhero ID 294 refers to superhero.id = 294; */ SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 294 /* Answer the following: Provide the full name and gender of superhero with superhero ID 294. full name refers to full_name; gender refers to gender; superhero ID 294 refers to superhero.id = 294; */ SELECT T1.full_name, T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.id = 294 /* Answer the following: Provide the race and alignment of superhero with superhero ID 294. race refers to race; alignment refers to alignment; superhero ID 294 refers to superhero.id = 294; */ SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.id = 294 /* Answer the following: Provide the attributes of superhero with superhero ID 294. attributes refers to attribute_name and attribute_value; superhero ID 294 refers to superhero.id = 294; */ SELECT T2.attribute_name, T1.attribute_value FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.hero_id = 294 /* Answer the following: Provide the publisher of superhero with superhero ID 294. publisher refers to publisher_name; superhero ID 294 refers to superhero.id = 294; */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 294 /* Answer the following: Provide the eye, hair and skin colour of superhero with superhero ID 294. eye, hair and skin colour refers to colour; superhero ID 294 refers to superhero.id = 294; */ SELECT T2.colour AS eye_colour, T3.colour AS hair_colour, T4.colour AS skin_colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN colour AS T4 ON T1.skin_colour_id = T4.id WHERE T1.id = 294
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188 /* Answer the following: List the superpowers of the superhero named 'Superman'. superhero named 'Superman' refers to superhero_name = 'Superman'; */ SELECT T2.power_name FROM superhero AS T1 INNER JOIN superpower AS T2 ON T1.id = T2.id WHERE T1.superhero_name = 'Superman' /* Answer the following: What is the gender of the superhero with the attribute 'Super Strength' with a value of 100? attribute 'Super Strength' with a value of 100 refers to attribute_name = 'Super Strength' AND attribute_value = 100; */ SELECT T3.gender FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN gender AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Super Strength' AND T1.attribute_value = 100 /* Answer the following: What is the alignment of the superhero who has the superpower 'Flight'? superpower 'Flight' refers to power_name = 'Flight'; */ SELECT T3.alignment FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN alignment AS T3 ON T1.hero_id = T3.id WHERE T2.power_name = 'Flight' /* Answer the following: What is the publisher of the superhero who has the attribute 'Intelligence' with a value of 100? attribute 'Intelligence' with a value of 100 refers to attribute_name = 'Intelligence' AND attribute_value = 100; */ SELECT T3.publisher_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN publisher AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Intelligence' AND T1.attribute_value = 100
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38 /* Answer the following: What is the gender of the superhero ID 45? superhero ID 45 refers to superhero.id = 45; */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.id = 45 /* Answer the following: What are the superpowers of the superhero ID 12? superhero ID 12 refers to superhero.id = 12; */ SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 12 /* Answer the following: What is the race of the superhero ID 55? superhero ID 55 refers to superhero.id = 55; */ SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 55 /* Answer the following: What are the attributes of the superhero ID 22? superhero ID 22 refers to superhero.id = 22; */ SELECT T2.attribute_name, T1.attribute_value FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.hero_id = 22 /* Answer the following: What is the alignment of the superhero ID 33? superhero ID 33 refers to superhero.id = 33; */ SELECT T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.id = 33
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = ( SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute ) )
SELECT T2.alignment, T4.power_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T1.superhero_name = 'Atom IV'
SELECT superhero.full_name FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5 /* Answer the following: How many superheroes are there in the Marvel Comics? Marvel Comics refers to publisher.publisher_name = 'Marvel Comics' WHERE publisher_id = publisher.id; */ SELECT COUNT(superhero.id) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' /* Answer the following: What is the average height of superheroes who have the superpower of 'Flight'? 'Flight' refers to superpower.power_name = 'Flight' WHERE power_id = superpower.id; */ SELECT AVG(superhero.height_cm) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flight' /* Answer the following: List all the attributes of the superhero named 'Superman'. 'Superman' refers to superhero.superhero_name = 'Superman' WHERE hero_id = superhero.id; */ SELECT attribute.attribute_name, hero_attribute.attribute_value FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE superhero.superhero_name = 'Superman' /* Answer the following: How many female superheroes are there in the DC Comics? female superheroes refers to gender.gender = 'Female' WHERE gender_id = gender.id; DC Comics refers to publisher.publisher_name = 'DC Comics' WHERE publisher_id = publisher.id; */ SELECT COUNT(superhero.id) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'DC Comics'
SELECT AVG(T2.attribute_value) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.alignment_id = 3
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = 100 /* Answer the following: How many superheroes have the superpower of 'Flying'? superheroes have the superpower of 'Flying' refers to superhero.superhero_name where power_name = 'Flying'; */ SELECT COUNT(DISTINCT superhero.superhero_name) FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Flying' /* Answer the following: What is the average height of superheroes published by 'Marvel Comics'? average height of superheroes refers to AVG(height_cm); published by 'Marvel Comics' refers to publisher.publisher_name = 'Marvel Comics'; */ SELECT AVG(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' /* Answer the following: List all the attributes of the superhero 'Batman'. attributes of the superhero 'Batman' refers to attribute.attribute_name where superhero_name = 'Batman'; */ SELECT attribute.attribute_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Batman' /* Answer the following: What is the race of the superhero with the highest weight? race of the superhero refers to race.race; highest weight refers to MAX(weight_kg); */ SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = (SELECT MAX(weight_kg) FROM superhero) /* Answer the following: How many superheroes have the alignment of 'good'? superheroes have the alignment of 'good' refers to COUNT(superhero_name) where alignment.alignment = 'good'; */ SELECT COUNT(superhero.superhero_name) FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'good'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 1 AND T3.id = 2
SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE colour.colour = 'blue' AND gender.gender = 'male'
SELECT CAST(SUM(CASE WHEN T2.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.alignment_id = 2
SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) AS diff FROM superhero AS T1 WHERE T1.weight_kg IS NULL OR T1.weight_kg = 0
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'
SELECT COUNT(T3.gender) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name ASC
SELECT T3.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN superpower AS T4 ON T2.power_id = T4.id WHERE T4.power_name = 'Phoenix Force'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1
SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.race <> 'Human' AND T3.publisher_name = 'Dark Horse Comics'
SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' AND T2.attribute_value = 100 /* Answer the following: List the superheroes who have the power of invisibility. power of invisibility refers to power_name = 'Invisibility' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Invisibility' /* Answer the following: Give the name of the superhero with the highest weight. highest weight refers to MAX(weight_kg) */ SELECT T1.superhero_name FROM superhero AS T1 ORDER BY T1.weight_kg DESC LIMIT 1 /* Answer the following: List the superheroes who are published by 'Marvel Comics'. published by 'Marvel Comics' refers to publisher_name = 'Marvel Comics' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' /* Answer the following: Give the name of the superhero with the most powers. most powers refers to MAX(COUNT(power_id)) */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1 /* Answer the following: List the superheroes who are female and have the power of flight. female refers to gender = 'Female'; power of flight refers to power_name = 'Flight' */ SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.gender = 'Female' AND T4.power_name = 'Flight'
SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference FROM superhero
SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = 'Black Panther' ORDER BY T1.attribute_value LIMIT 1
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1 /* Answer the following: What is the most common attribute among superheroes? most common attribute refers to the attribute that appears most frequently in hero_attribute; */ SELECT attribute_name FROM attribute WHERE id = (SELECT attribute_id FROM hero_attribute GROUP BY attribute_id ORDER BY COUNT(*) DESC LIMIT 1) /* Answer the following: What is the most common superpower among superheroes? most common superpower refers to the superpower that appears most frequently in hero_power; */ SELECT power_name FROM superpower WHERE id = (SELECT power_id FROM hero_power GROUP BY power_id ORDER BY COUNT(*) DESC LIMIT 1) /* Answer the following: What is the average height of superheroes? average height refers to AVG(height_cm); */ SELECT AVG(height_cm) FROM superhero /* Answer the following: What is the average weight of superheroes? average weight refers to AVG(weight_kg); */ SELECT AVG(weight_kg) FROM superhero /* Answer the following: What is the most common race among superheroes? most common race refers to the race that appears most frequently in superhero; */ SELECT race FROM race WHERE id = (SELECT race_id FROM superhero GROUP BY race_id ORDER BY COUNT(*) DESC LIMIT 1) /* Answer the following: What is the most common publisher among superheroes? most common publisher refers to the publisher that appears most frequently in superhero; */ SELECT publisher_name FROM publisher WHERE id = (SELECT publisher_id FROM superhero GROUP BY publisher_id ORDER BY COUNT(*) DESC LIMIT 1) /* Answer the following: What is the most common alignment among superheroes? most common alignment refers to the alignment that appears most frequently in superhero; */ SELECT alignment FROM alignment WHERE id = (SELECT alignment_id FROM superhero GROUP BY alignment_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'
SELECT CAST(SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T3.publisher_name = 'George Lucas'
SELECT CAST(SUM(CASE WHEN T1.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM alignment AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.alignment_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.publisher_name = 'Marvel Comics'
SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'
SELECT hero_id FROM hero_attribute ORDER BY attribute_value LIMIT 1 /* Answer the following: What is the name of the superhero with the lowest height? lowest height refers to MIN(height_cm); */ SELECT superhero_name FROM superhero ORDER BY height_cm LIMIT 1 /* Answer the following: What is the name of the superhero with the least weight? least weight refers to MIN(weight_kg); */ SELECT superhero_name FROM superhero ORDER BY weight_kg LIMIT 1 /* Answer the following: What is the name of the superhero with the least number of superpowers? least number of superpowers refers to COUNT(power_id); */ SELECT superhero_name FROM superhero LEFT JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero_name ORDER BY COUNT(power_id) LIMIT 1 /* Answer the following: What is the name of the superhero with the least number of attributes? least number of attributes refers to COUNT(attribute_id); */ SELECT superhero_name FROM superhero LEFT JOIN hero_attribute ON superhero.id = hero_attribute.hero_id GROUP BY superhero_name ORDER BY COUNT(attribute_id) LIMIT 1 /* Answer the following: What is the name of the superhero with the least number of attributes and superpowers combined? least number of attributes and superpowers combined refers to COUNT(attribute_id) + COUNT(power_id); */ SELECT superhero_name FROM superhero LEFT JOIN hero_attribute ON superhero.id = hero_attribute.hero_id LEFT JOIN hero_power ON superhero.id = hero_power.hero_id GROUP BY superhero_name ORDER BY COUNT(attribute_id) + COUNT(power_id) LIMIT 1
SELECT full_name FROM superhero WHERE superhero_name = 'Alien'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'brown'
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'
SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40 /* Answer the following: List the names of superheroes who have the superpower with superpower ID 5. superpower ID 5 refers to superpower.id = 5; */ SELECT T2.superhero_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.power_id = 5 /* Answer the following: Identify the gender of the superhero with superhero ID 20. superhero ID 20 refers to superhero.id = 20; */ SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.id = 20 /* Answer the following: Provide the full name and alignment of the superhero with superhero ID 30. superhero ID 30 refers to superhero.id = 30; */ SELECT T1.full_name, T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.id = 30 /* Answer the following: List the names of superheroes who have the attribute with attribute ID 10. attribute ID 10 refers to attribute.id = 10; */ SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_id = 10 /* Answer the following: Identify the publisher of the superhero with superhero ID 50. superhero ID 50 refers to superhero.id = 50; */ SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 50
SELECT AVG(height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'neutral'
SELECT T1.id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Intelligence'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'
SELECT DISTINCT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm > ( SELECT AVG(height_cm) * 0.8 FROM superhero )
SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 18 ORDER BY T1.q1 DESC LIMIT 5 /* Answer the following: What is the name of the constructor who has the most wins in the 2008 season? name of the constructor refers to name; most wins refers to MAX(wins); 2008 season refers to year = 2008; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId IN (SELECT raceId FROM races WHERE year = 2008) ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap in the 2010 season? driver refers to forename, surname; fastest lap refers to MIN(fastestLapTime); 2010 season refers to year = 2010; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId IN (SELECT raceId FROM races WHERE year = 2010) ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: What is the name of the circuit with the highest altitude? name of the circuit refers to name; highest altitude refers to MAX(alt); */ SELECT name FROM circuits ORDER BY alt DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 2012 season? driver refers to forename, surname; most points refers to MAX(points); 2012 season refers to year = 2012; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId IN (SELECT raceId FROM races WHERE year = 2012) ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the name of the constructor with the most points in the 2014 season? name of the constructor refers to name; most points refers to MAX(points); 2014 season refers to year = 2014; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId IN (SELECT raceId FROM races WHERE year = 2014) ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in the 2016 season? driver refers to forename, surname; most wins refers to MAX(wins); 2016 season refers to year = 2016; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId IN (SELECT raceId FROM races WHERE year = 2016) ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: What is the name of the constructor with the most wins in the 2018 season? name of the constructor refers to name; most wins refers to MAX(wins); 2018 season refers to year = 2018; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId IN (SELECT raceId FROM races WHERE year = 2018) ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 2020 season? driver refers to forename, surname; most points refers to MAX(points); 2020 season refers to year = 2020; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId IN (SELECT raceId FROM races WHERE year = 2020) ORDER BY T1.points DESC LIMIT 1
SELECT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 ORDER BY T2.q2 LIMIT 1
SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'
SELECT url FROM races WHERE circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya' )
SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'
SELECT T1.position FROM circuits AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.name = 'Renault' /* Answer the following: What is the nationality of the driver who won the race in 2010? 2010 refers to year = 2010; */ SELECT T3.nationality FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2010 AND T2.position = 1 /* Answer the following: What is the fastest lap time of the driver named 'Lewis Hamilton'? Lewis Hamilton refers to forename = 'Lewis' and surname = 'Hamilton'; */ SELECT MIN(T2.fastestLapTime) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' /* Answer the following: List the names of the circuits located in the country 'Italy'. Italy refers to country = 'Italy'; */ SELECT T1.name FROM circuits AS T1 WHERE T1.country = 'Italy' /* Answer the following: What is the total number of wins of the constructor named 'Ferrari'? Ferrari refers to name = 'Ferrari'; */ SELECT SUM(T2.wins) FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.name = 'Ferrari'
SELECT COUNT(raceId) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE year = 2010 AND country NOT IN (SELECT country FROM circuits WHERE location IN ('Asia', 'Europe'))
SELECT races.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Spain'
SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name LIKE 'Australian Grand Prix'
SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit')
SELECT races.time FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit'
SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix' /* Answer the following: What is the nationality of the constructor with the name 'Ferrari'? */ SELECT nationality FROM constructors WHERE name = 'Ferrari' /* Answer the following: What is the date of the race named 'British Grand Prix' in the year 2020? */ SELECT date FROM races WHERE name = 'British Grand Prix' AND year = 2020 /* Answer the following: Who is the driver with the number 44? */ SELECT forename, surname FROM drivers WHERE number = 44 /* Answer the following: How many points did the constructor with the id 1 score in the race with the id 10? */ SELECT points FROM constructorResults WHERE constructorId = 1 AND raceId = 10 /* Answer the following: What is the fastest lap time in the race with the id 20? */ SELECT MIN(fastestLapTime) FROM results WHERE raceId = 20 /* Answer the following: How many pit stops did the driver with the id 3 make in the race with the id 15? */ SELECT COUNT(*) FROM pitStops WHERE driverId = 3 AND raceId = 15 /* Answer the following: What is the status of the driver with the id 5 in the race with the id 25? */ SELECT status FROM status WHERE statusId = (SELECT statusId FROM results WHERE driverId = 5 AND raceId = 25)
SELECT T3.country FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T1.points = 1 AND T1.raceId = 24 /* Answer the following: What is the name of the driver who had the fastest lap in the race No. 32? race number refers to raceId; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLap IS NOT NULL AND T1.raceId = 32 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: What is the nationality of the driver who won the race No. 45? race number refers to raceId; */ SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 1 AND T1.raceId = 45 /* Answer the following: What is the name of the circuit where the race No. 55 took place? race number refers to raceId; */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 55 /* Answer the following: What is the name of the constructor who won the race No. 65? race number refers to raceId; */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position = 1 AND T1.raceId = 65 /* Answer the following: What is the name of the driver who had the fastest lap in the race No. 75? race number refers to raceId; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLap IS NOT NULL AND T1.raceId = 75 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: What is the nationality of the driver who won the race No. 85? race number refers to raceId; */ SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 1 AND T1.raceId = 85 /* Answer the following: What is the name of the circuit where the race No. 95 took place? race number refers to raceId; */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 95 /* Answer the following: What is the name of the constructor who won the race No. 105? race number refers to raceId; */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position = 1 AND T1.raceId = 105
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna') AND raceId = 354 /* Answer the following: What's the nationality of the constructor who won the race No. 354? race number refers to raceId; */ SELECT nationality FROM constructors WHERE constructorId = (SELECT constructorId FROM results WHERE raceId = 354 AND position = 1) /* Answer the following: What's the location of the circuit where the race No. 354 was held? race number refers to raceId; */ SELECT location FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE raceId = 354) /* Answer the following: What's the fastest lap time in the race No. 354? race number refers to raceId; */ SELECT fastestLapTime FROM results WHERE raceId = 354 AND fastestLapTime IS NOT NULL ORDER BY fastestLapTime ASC LIMIT 1 /* Answer the following: Who is the driver with the most wins in the season of 2008? */ SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM driverStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) ORDER BY wins DESC LIMIT 1)
SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q2 = '0:01:40' AND T2.raceId = 355 /* Answer the following: What is the name of the circuit where the race with ID 102 was held? */ SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.raceId = 102 /* Answer the following: What is the nationality of the constructor who won the race with ID 102? */ SELECT T1.nationality FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 102 AND T2.status = 'win' /* Answer the following: What is the name of the driver who had the fastest lap in the race with ID 102? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 102 AND T2.fastestLap IS NOT NULL ORDER BY T2.fastestLapTime LIMIT 1 /* Answer the following: What is the name of the constructor for the driver who had the fastest lap in the race with ID 102? */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T2.raceId = 102 AND T2.fastestLap IS NOT NULL ORDER BY T2.fastestLapTime LIMIT 1 /* Answer the following: What is the name of the driver who had the shortest pit stop in the race with ID 102? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 102 ORDER BY T2.duration LIMIT 1 /* Answer the following: What is the name of the constructor for the driver who had the shortest pit stop in the race with ID 102? */ SELECT T1.name FROM constructors AS T1 INNER JOIN pitStops AS T2 ON T1.constructorId = T2.constructorId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T2.raceId = 102 ORDER BY T2.duration LIMIT 1
SELECT number FROM drivers WHERE driverId = ( SELECT driverId FROM qualifying WHERE q3 = '0:01:54' AND raceId = 903 )
SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Bahrain Grand Prix' AND T2.year = 2007 AND T1.time IS NULL
SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901 /* Answer the following: Who is the driver that had the fastest lap in the race with ID 841? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 841 AND T2.rank = 1 /* Answer the following: What is the nationality of the constructor who won the race with ID 841? */ SELECT T1.nationality FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 841 AND T2.position = 1 /* Answer the following: What is the location of the circuit where the race with ID 841 took place? */ SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.raceId = 841 /* Answer the following: What is the name of the driver who had the fastest pit stop in the race with ID 841? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 841 ORDER BY T2.duration ASC LIMIT 1 /* Answer the following: What is the name of the constructor who had the most points in the race with ID 841? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 841 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the most points in the race with ID 841? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 841 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the status of the driver who had the fastest lap in the race with ID 841? */ SELECT T1.status FROM status AS T1 INNER JOIN results AS T2 ON T1.statusId = T2.statusId WHERE T2.raceId = 841 AND T2.rank = 1 /* Answer the following: What is the name of the driver who had the fastest qualifying time in the race with ID 841? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 841 ORDER BY T2.q1, T2.q2, T2.q3 LIMIT 1
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 592 AND T1.time IS NOT NULL ORDER BY T2.dob ASC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2008 season? most wins refers to MAX(wins); 2008 season refers to year = 2008; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap in race No. 841? fastest lap refers to MIN(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 841 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the highest altitude? highest altitude refers to MAX(alt); */ SELECT name FROM circuits ORDER BY alt DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in race No. 1001? most points refers to MAX(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 1001 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the most points in race No. 200? most points refers to MAX(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 200 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the shortest pit stop in race No. 500? shortest pit stop refers to MIN(milliseconds); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 500 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1 /* Answer the following: Which driver has the most wins in the 2010 season? most wins refers to MAX(wins); 2010 season refers to year = 2010; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2005 season? most wins refers to MAX(wins); 2005 season refers to year = 2005; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2005 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap in race No. 300? fastest lap refers to MIN(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 300 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the lowest altitude? lowest altitude refers to MIN(alt); */ SELECT name FROM circuits ORDER BY alt ASC LIMIT 1 /* Answer the following: Who is the driver with the least points in race No. 700? least points refers to MIN(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 700 ORDER BY T1.points ASC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the least points in race No. 400? least points refers to MIN(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 400 ORDER BY T1.points ASC LIMIT 1 /* Answer the following: Who is the driver with the longest pit stop in race No. 600? longest pit stop refers to MAX(milliseconds); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 600 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: Which driver has the least wins in the 2012 season? least wins refers to MIN(wins); 2012 season refers to year = 2012; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2012 ORDER BY T1.wins ASC LIMIT 1 /* Answer the following: Which constructor has the least wins in the 2007 season? least wins refers to MIN(wins); 2007 season refers to year = 2007; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2007 ORDER BY T1.wins ASC LIMIT 1 /* Answer the following: Who is the driver with the slowest lap in race No. 800? slowest lap refers to MAX(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 800 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime DESC LIMIT 1 /* Answer the following: Which circuit has the highest latitude? highest latitude refers to MAX(lat); */ SELECT name FROM circuits ORDER BY lat DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in race No. 900? most points refers to MAX(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 900 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the most points in race No. 100? most points refers to MAX(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 100 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the shortest pit stop in race No. 1000? shortest pit stop refers to MIN(milliseconds); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 1000 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1 /* Answer the following: Which driver has the most wins in the 2014 season? most wins refers to MAX(wins); 2014 season refers to year = 2014; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2014 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2009 season? most wins refers to MAX(wins); 2009 season refers to year = 2009; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2009 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap in race No. 1100? fastest lap refers to MIN(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 1100 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the lowest latitude? lowest latitude refers to MIN(lat); */ SELECT name FROM circuits ORDER BY lat ASC LIMIT 1 /* Answer the following: Who is the driver with the least points in race No. 1200? least points refers to MIN(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 1200 ORDER BY T1.points ASC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the least points in race No. 1300? least points refers to MIN(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 1300 ORDER BY T1.points ASC LIMIT 1 /* Answer the following: Who is the driver with the longest pit stop in race No. 1400? longest pit stop refers to MAX(milliseconds); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 1400 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: Which driver has the least wins in the 2016 season? least wins refers to MIN(wins); 2016 season refers to year = 2016; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2016 ORDER BY T1.wins ASC LIMIT 1 /* Answer the following: Which constructor has the least wins in the 2011 season? least wins refers to MIN(wins); 2011 season refers to year = 2011; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2011 ORDER BY T1.wins ASC LIMIT 1 /* Answer the following: Who is the driver with the slowest lap in race No. 1500? slowest lap refers to MAX(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 1500 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime DESC LIMIT 1 /* Answer the following: Which circuit has the highest longitude? highest longitude refers to MAX(lng); */ SELECT name FROM circuits ORDER BY lng DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in race No. 1600? most points refers to MAX(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 1600 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the most points in race No. 1700? most points refers to MAX(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 1700 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the shortest pit stop in race No. 1800? shortest pit stop refers to MIN(milliseconds); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 1800 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1 /* Answer the following: Which driver has the most wins in the 2018 season? most wins refers to MAX(wins); 2018 season refers to year = 2018; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2018 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2013 season? most wins refers to MAX(wins); 2013 season refers to year = 2013; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2013 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap in race No. 1900? fastest lap refers to MIN(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 1900 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the lowest longitude? lowest longitude refers to MIN(lng); */ SELECT name FROM circuits ORDER BY lng ASC LIMIT 1 /* Answer the following: Who is the driver with the least points in race No. 2000? least points refers to MIN(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 2000 ORDER BY T1.points ASC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the least points in race No. 2100? least points refers to MIN(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 2100 ORDER BY T1.points ASC LIMIT 1 /* Answer the following: Who is the driver with the longest pit stop in race No. 2200? longest pit stop refers to MAX(milliseconds); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 2200 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: Which driver has the least wins in the 2020 season? least wins refers to MIN(wins); 2020 season refers to year = 2020; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2020 ORDER BY T1.wins ASC LIMIT 1 /* Answer the following: Which constructor has the least wins in the 2015 season? least wins refers to MIN(wins); 2015 season refers to year = 2015; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2015 ORDER BY T1.wins ASC LIMIT 1 /* Answer the following: Who is the driver with the slowest lap in race No. 2300? slowest lap refers to MAX(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 2300 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime DESC LIMIT 1 /* Answer the following: Which circuit has the highest altitude? highest altitude refers to MAX(alt); */ SELECT name FROM circuits ORDER BY alt DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in race No. 2400? most points refers to MAX(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 2400 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the most points in race No. 2500? most points refers to MAX(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 2500 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the shortest pit stop in race No. 2600? shortest pit stop refers to MIN(milliseconds); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 2600 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1 /* Answer the following: Which driver has the most wins in the 2022 season? most wins refers to MAX(wins); 2022 season refers to year = 2022; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2022 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2017 season? most wins refers to MAX(wins); 2017 season refers to year = 2017; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2017 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap in race No. 2700? fastest lap refers to MIN(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 2700 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the lowest altitude? lowest altitude refers to MIN(alt); */ SELECT name FROM circuits ORDER BY alt ASC LIMIT 1 /* Answer the following: Who is the driver with the least points in race No. 2800? least points refers to MIN(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 2800 ORDER BY T1.points ASC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the least points in race No. 2900? least points refers to MIN(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 2900 ORDER BY T1.points ASC LIMIT 1 /* Answer the following: Who is the driver with the longest pit stop in race No. 3000? longest pit stop refers to MAX(milliseconds); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 3000 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: Which driver has the least wins in the 2024 season? least wins refers to MIN(wins); 2024 season refers to year = 2024; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2024 ORDER BY T1.wins ASC LIMIT 1 /* Answer the following: Which constructor has the least wins in the 2019 season? least wins refers to MIN(wins); 2019 season refers to year = 2019; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2019 ORDER BY T1.wins ASC LIMIT 1 /* Answer the following: Who is the driver with the slowest lap in race No. 3100? slowest lap refers to MAX(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 3100 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime DESC LIMIT 1 /* Answer the following: Which circuit has the highest latitude? highest latitude refers to MAX(lat); */ SELECT name FROM circuits ORDER BY lat DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in race No. 3200? most points refers to MAX(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 3200 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the most points in race No. 3300? most points refers to MAX(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 3300 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the shortest pit stop in race No. 3400? shortest pit stop refers to MIN(milliseconds); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 3400 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1 /* Answer the following: Which driver has the most wins in the 2026 season? most wins refers to MAX(wins); 2026 season refers to year = 2026; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2026 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2021 season? most wins refers to MAX(wins); 2021 season refers to year = 2021; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2021 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap in race No. 3500? fastest lap refers to MIN(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 3500 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the lowest latitude? lowest latitude refers to MIN(lat); */ SELECT name FROM circuits ORDER BY lat ASC LIMIT 1 /* Answer the following: Who is the driver with the least points in race No. 3600? least points refers to MIN(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 3600 ORDER BY T1.points ASC LIMIT 1 /* Answer the following: What is the nationality of the constructor with the least points in race No. 3700? least points refers to MIN(points); */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 3700 ORDER BY T1.points ASC LIMIT 1 /* Answer the following: Who is the driver with the longest pit stop in race No. 3800? longest pit stop refers to MAX(milliseconds); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 3800 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds DESC LIMIT 1 /* Answer the following: Which driver has the least wins in the 2028 season? least wins refers to MIN(wins); 2028 season refers to year = 2028; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2028 ORDER BY T1.wins ASC LIMIT 1 /* Answer the following: Which constructor has the least wins in the 2023 season? least wins refers to MIN(wins); 2023 season refers to year = 2023; */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2023 ORDER BY T1.wins ASC LIMIT 1 /* Answer the following: Who is the driver with the slowest lap in race No. 3900? slowest lap refers to MAX(fastestLapTime); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 3900 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime DESC LIMIT 1 /* Answer the following: Which circuit has the highest longitude? highest longitude refers to MAX
SELECT T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.time = '0:01:27' AND T2.raceId = 161 /* Answer the following: Which constructor won the most races in the 2008 season? won the most races refers to MAX(wins); 2008 season refers to year = 2008; */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 GROUP BY T1.name ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Who was the driver that got the fastest lap in the race No. 841? Show his name and nationality. fastest lap refers to MIN(fastestLapTime); race number refers to raceId; */ SELECT T1.forename, T1.surname, T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 841 ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: Which driver has the most wins in the 2010 season? most wins refers to MAX(wins); 2010 season refers to year = 2010; */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 GROUP BY T1.driverId ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in the 2012 season? most points refers to MAX(points); 2012 season refers to year = 2012; */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2012 GROUP BY T1.constructorId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Who was the driver that got the fastest lap in the race No. 841? Show his name and nationality. fastest lap refers to MIN(fastestLapTime); race number refers to raceId; */ SELECT T1.forename, T1.surname, T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 841 ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: Which driver has the most wins in the 2010 season? most wins refers to MAX(wins); 2010 season refers to year = 2010; */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 GROUP BY T1.driverId ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in the 2012 season? most points refers to MAX(points); 2012 season refers to year = 2012; */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2012 GROUP BY T1.constructorId ORDER BY SUM(T2.points) DESC LIMIT 1
SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 933 ORDER BY T1.fastestLapSpeed DESC LIMIT 1
SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Malaysian Grand Prix'
SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver that has the fastest lap in the race No. 5? driver refers to forename and surname; fastest lap refers to min(fastestLap) */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 5 AND T1.fastestLap IS NOT NULL ORDER BY T1.fastestLap ASC LIMIT 1 /* Answer the following: What is the nationality of the constructor that won the most races in 2008? won the most races refers to max(wins); nationality refers to nationality */ SELECT T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId IN (SELECT raceId FROM races WHERE year = 2008) GROUP BY T2.constructorId ORDER BY SUM(T1.wins) DESC LIMIT 1 /* Answer the following: What is the URL of the circuit where the race No. 3 took place? URL refers to url; race No. 3 refers to raceId */ SELECT T2.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 3 /* Answer the following: Who is the driver that has the most pit stops in the race No. 7? driver refers to forename and surname; most pit stops refers to max(stop) */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 7 GROUP BY T2.driverId ORDER BY COUNT(T1.stop) DESC LIMIT 1 /* Answer the following: What is the name of the constructor that has the most drivers qualified in the race No. 4? name refers to name; most drivers qualified refers to max(position) */ SELECT T2.name FROM qualifying AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 4 GROUP BY T2.constructorId ORDER BY COUNT(T1.position) DESC LIMIT 1 /* Answer the following: What is the status of the driver who finished the race No. 2 at the last position? status refers to status; last position refers to max(positionOrder) */ SELECT T2.status FROM results AS T1 INNER JOIN status AS T2 ON T1.statusId = T2.statusId WHERE T1.raceId = 2 AND T1.positionOrder = (SELECT MAX(positionOrder) FROM results WHERE raceId = 2)
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi') AND raceId = 345 /* Answer the following: What's the nationality of the constructor who won the race No. 345? race number refers to raceId; */ SELECT nationality FROM constructors WHERE constructorId = (SELECT constructorId FROM results WHERE raceId = 345 AND positionOrder = 1) /* Answer the following: What's the fastest lap time in the race No. 345? race number refers to raceId; */ SELECT fastestLapTime FROM results WHERE raceId = 345 ORDER BY fastestLapTime ASC LIMIT 1 /* Answer the following: Who is the driver with the most wins in the season 2008? */ SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM driverStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) ORDER BY wins DESC LIMIT 1) /* Answer the following: What's the location of the circuit where the race No. 345 was held? race number refers to raceId; */ SELECT location FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE raceId = 345)
SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q2 = '0:01:15' AND T1.raceId = 347
SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.q3 = '0:01:33'
SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'McLaren' AND T1.raceId = 743 /* Answer the following: What is the nationality of the constructor for the driver with the driverId 102 in the race with the raceId 842? */ SELECT T3.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.driverId = 102 AND T1.raceId = 842 /* Answer the following: What is the fastest lap time for the driver with the driverId 30 in the race with the raceId 842? */ SELECT T1.fastestLapTime FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the name of the circuit for the race with the raceId 842? */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 842 /* Answer the following: What is the name of the driver with the driverId 30? */ SELECT T1.forename, T1.surname FROM drivers AS T1 WHERE T1.driverId = 30 /* Answer the following: What is the name of the constructor with the constructorId 1? */ SELECT T1.name FROM constructors AS T1 WHERE T1.constructorId = 1 /* Answer the following: What is the status of the driver with the driverId 30 in the race with the raceId 842? */ SELECT T3.status FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN status AS T3 ON T1.statusId = T3.statusId WHERE T2.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the total number of laps completed by the driver with the driverId 30 in the race with the raceId 842? */ SELECT T1.laps FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the position of the driver with the driverId 30 in the race with the raceId 842? */ SELECT T1.position FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the driver with the driverId 30? */ SELECT T1.number FROM drivers AS T1 WHERE T1.driverId = 30 /* Answer the following: What is the date of the race with the raceId 842? */ SELECT T1.date FROM races AS T1 WHERE T1.raceId = 842 /* Answer the following: What is the location of the circuit for the race with the raceId 842? */ SELECT T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 842 /* Answer the following: What is the nationality of the driver with the driverId 30? */ SELECT T1.nationality FROM drivers AS T1 WHERE T1.driverId = 30 /* Answer the following: What is the year of the season for the race with the raceId 842? */ SELECT T2.year FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 /* Answer the following: What is the duration of the pit stop for the driver with the driverId 30 in the race with the raceId 842? */ SELECT T1.duration FROM pitStops AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the time of the qualifying for the driver with the driverId 30 in the race with the raceId 842? */ SELECT T1.q1, T1.q2, T1.q3 FROM qualifying AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the position of the constructor with the constructorId 1 in the constructor standings for the race with the raceId 842? */ SELECT T1.position FROM constructorStandings AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the position of the driver with the driverId 30 in the driver standings for the race with the raceId 842? */ SELECT T1.position FROM driverStandings AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of wins of the constructor with the constructorId 1 in the constructor standings for the race with the raceId 842? */ SELECT T1.wins FROM constructorStandings AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of wins of the driver with the driverId 30 in the driver standings for the race with the raceId 842? */ SELECT T1.wins FROM driverStandings AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of points of the constructor with the constructorId 1 in the constructor standings for the race with the raceId 842? */ SELECT T1.points FROM constructorStandings AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of points of the driver with the driverId 30 in the driver standings for the race with the raceId 842? */ SELECT T1.points FROM driverStandings AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the position of the driver with the driverId 30 in the qualifying for the race with the raceId 842? */ SELECT T1.position FROM qualifying AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the position of the driver with the driverId 30 in the lap times for the race with the raceId 842? */ SELECT T1.position FROM lapTimes AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the time of the lap for the driver with the driverId 30 in the lap times for the race with the raceId 842? */ SELECT T1.time FROM lapTimes AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the lap for the driver with the driverId 30 in the lap times for the race with the raceId 842? */ SELECT T1.lap FROM lapTimes AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the stop for the driver with the driverId 30 in the pit stops for the race with the raceId 842? */ SELECT T1.stop FROM pitStops AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the time of the stop for the driver with the driverId 30 in the pit stops for the race with the raceId 842? */ SELECT T1.time FROM pitStops AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the driver with the driverId 30 in the qualifying for the race with the raceId 842? */ SELECT T1.number FROM qualifying AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the driver with the driverId 30 in the results for the race with the raceId 842? */ SELECT T1.number FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the grid position of the driver with the driverId 30 in the results for the race with the raceId 842? */ SELECT T1.grid FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the rank of the driver with the driverId 30 in the results for the race with the raceId 842? */ SELECT T1.rank FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the fastest lap speed of the driver with the driverId 30 in the results for the race with the raceId 842? */ SELECT T1.fastestLapSpeed FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the fastest lap of the driver with the driverId 30 in the results for the race with the raceId 842? */ SELECT T1.fastestLap FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the status of the driver with the driverId 30 in the results for the race with the raceId 842? */ SELECT T3.status FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN status AS T3 ON T1.statusId = T3.statusId WHERE T2.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of points of the driver with the driverId 30 in the results for the race with the raceId 842? */ SELECT T1.points FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the position order of the driver with the driverId 30 in the results for the race with the raceId 842? */ SELECT T1.positionOrder FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the position text of the driver with the driverId 30 in the results for the race with the raceId 842? */ SELECT T1.positionText FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the constructor with the constructorId 1 in the qualifying for the race with the raceId 842? */ SELECT T1.number FROM qualifying AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the position of the constructor with the constructorId 1 in the constructor results for the race with the raceId 842? */ SELECT T1.status FROM constructorResults AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of points of the constructor with the constructorId 1 in the constructor results for the race with the raceId 842? */ SELECT T1.points FROM constructorResults AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.number FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the position of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.position FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the position text of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.positionText FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the position order of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.positionOrder FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of laps of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.laps FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the time of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.time FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the fastest lap of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.fastestLap FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the fastest lap time of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.fastestLapTime FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the fastest lap speed of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.fastestLapSpeed FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the rank of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.rank FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the status of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T3.status FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN status AS T3 ON T1.statusId = T3.statusId WHERE T2.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of points of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.points FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the status of the constructor with the constructorId 1 in the constructor results for the race with the raceId 842? */ SELECT T1.status FROM constructorResults AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of the constructor with the constructorId 1 in the constructor results for the race with the raceId 842? */ SELECT T1.constructorId FROM constructorResults AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of the constructor with the constructorId 1 in the constructor standings for the race with the raceId 842? */ SELECT T1.constructorId FROM constructorStandings AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the position text of the constructor with the constructorId 1 in the constructor standings for the race with the raceId 842? */ SELECT T1.positionText FROM constructorStandings AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of wins of the constructor with the constructorId 1 in the constructor standings for the race with the raceId 842? */ SELECT T1.wins FROM constructorStandings AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of points of the constructor with the constructorId 1 in the constructor standings for the race with the raceId 842? */ SELECT T1.points FROM constructorStandings AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the position of the constructor with the constructorId 1 in the constructor standings for the race with the raceId 842? */ SELECT T1.position FROM constructorStandings AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the position text of the driver with the driverId 30 in the driver standings for the race with the raceId 842? */ SELECT T1.positionText FROM driverStandings AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of wins of the driver with the driverId 30 in the driver standings for the race with the raceId 842? */ SELECT T1.wins FROM driverStandings AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of points of the driver with the driverId 30 in the driver standings for the race with the raceId 842? */ SELECT T1.points FROM driverStandings AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the position of the driver with the driverId 30 in the driver standings for the race with the raceId 842? */ SELECT T1.position FROM driverStandings AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the driver with the driverId 30 in the driver standings for the race with the raceId 842? */ SELECT T1.driverId FROM driverStandings AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the driver with the driverId 30 in the lap times for the race with the raceId 842? */ SELECT T1.driverId FROM lapTimes AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the driver with the driverId 30 in the pit stops for the race with the raceId 842? */ SELECT T1.driverId FROM pitStops AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the driver with the driverId 30 in the qualifying for the race with the raceId 842? */ SELECT T1.driverId FROM qualifying AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the driver with the driverId 30 in the results for the race with the raceId 842? */ SELECT T1.driverId FROM results AS T1 WHERE T1.driverId = 30 AND T1.raceId = 842 /* Answer the following: What is the number of the constructor with the constructorId 1 in the constructor results for the race with the raceId 842? */ SELECT T1.constructorId FROM constructorResults AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of the constructor with the constructorId 1 in the constructor standings for the race with the raceId 842? */ SELECT T1.constructorId FROM constructorStandings AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of the constructor with the constructorId 1 in the qualifying for the race with the raceId 842? */ SELECT T1.constructorId FROM qualifying AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of the constructor with the constructorId 1 in the results for the race with the raceId 842? */ SELECT T1.constructorId FROM results AS T1 WHERE T1.constructorId = 1 AND T1.raceId = 842 /* Answer the following: What is the number of the race with the raceId 842 in the races for the year 2008? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 842 AND T2.year = 2008 /* Answer the following: What is the number of the race with the raceId 842 in the races for the circuit with the circuitId 1? */ SELECT T1.raceId FROM races AS T1 WHERE T1.raceId = 842 AND T1.circuitId = 1 /* Answer the following: What is the number of the race with the raceId 842 in the races for the season with the year 2008? */ SELECT T1.raceId FROM races AS T1 INNER JOIN seasons AS T2 ON T
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'San Marino Grand Prix' AND T3.year = 2006 AND T1.position = 2
SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901 /* Answer the following: What is the nationality of the constructor who got the result ID 1024? */ SELECT T1.nationality FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.resultId = 1024 /* Answer the following: What is the name of the driver who made the pit stop during the race ID 842? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 842 /* Answer the following: What is the status of the result with ID 3456? */ SELECT T1.status FROM status AS T1 INNER JOIN results AS T2 ON T1.statusId = T2.statusId WHERE T2.resultId = 3456 /* Answer the following: What is the name of the circuit where the race with ID 102 took place? */ SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.raceId = 102 /* Answer the following: What is the name of the constructor who participated in the qualifying round with ID 567? */ SELECT T1.name FROM constructors AS T1 INNER JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId WHERE T2.qualifyId = 567 /* Answer the following: What is the name of the driver who had the fastest lap in the race with ID 789? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 789 AND T2.rank = 1 /* Answer the following: What is the name of the driver who had the lap time with the most milliseconds in the race with ID 123? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 123 ORDER BY T2.milliseconds DESC LIMIT 1 /* Answer the following: What is the name of the driver who won the most races in the season of year 2010? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2010) ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: What is the name of the constructor who got the most points in the race with ID 456? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 456 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who got the most points in the race with ID 789? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 789 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who got the most points in the season of year 2011? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2011) ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the constructor who got the most points in the season of year 2012? */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId IN (SELECT raceId FROM races WHERE year = 2012) ORDER BY T2.points DESC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 345? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 345 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 678? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 678 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 901? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 901 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 234? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 234 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 567? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 567 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 890? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 890 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 123? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 123 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 456? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 456 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 789? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 789 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 012? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 012 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 345? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 345 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 678? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 678 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 901? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 901 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 234? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 234 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 567? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 567 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 890? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 890 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 123? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 123 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 456? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 456 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 789? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 789 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 012? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 012 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 345? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 345 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 678? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 678 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 901? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 901 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 234? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 234 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 567? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 567 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 890? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 890 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 123? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 123 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 456? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 456 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 789? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 789 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 012? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 012 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 345? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 345 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 678? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 678 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 901? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 901 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 234? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 234 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 567? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 567 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 890? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 890 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 123? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 123 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 456? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 456 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 789? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 789 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 012? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 012 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 345? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 345 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 678? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 678 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 901? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 901 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 234? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 234 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 567? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 567 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 890? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 890 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 123? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 123 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 456? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 456 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 789? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 789 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 012? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 012 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 345? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 345 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 678? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 678 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 901? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 901 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 234? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 234 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 567? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 567 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 890? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 890 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 123? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 123 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 456? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 456 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 789? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 789 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 012? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 012 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 345? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 345 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 678? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 678 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 901? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 901 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 234? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 234 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT 1 /* Answer the following: What is the name of the driver who had the fastest lap in the qualifying round with ID 567? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.qualifyId = 567 AND T2.q3 IS NOT NULL ORDER BY T2.q3 ASC LIMIT
SELECT COUNT(driverId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE date = '2015-11-29') AND statusId IN (SELECT statusId FROM status WHERE status = 'Finished')
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.time IS NOT NULL ORDER BY T2.dob DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in 2010? most wins refers to MAX(wins); 2010 refers to year = 2010; */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.year = 2010 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most points in race No. 872? most points refers to MAX(points); race No. 872 refers to raceId = 872; */ SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 872 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap in race No. 872? fastest lap refers to MIN(fastestLapTime); race No. 872 refers to raceId = 872; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit is the race No. 872 held? race No. 872 refers to raceId = 872; */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = 872 /* Answer the following: Who is the driver with the shortest pit stop time in race No. 872? shortest pit stop time refers to MIN(milliseconds); race No. 872 refers to raceId = 872; */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1 /* Answer the following: Who is the driver with the most laps in race No. 872? most laps refers to MAX(laps); race No. 872 refers to raceId = 872; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 ORDER BY T1.laps DESC LIMIT 1 /* Answer the following: Who is the driver with the highest position in race No. 872? highest position refers to MIN(position); race No. 872 refers to raceId = 872; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.position IS NOT NULL ORDER BY T1.position ASC LIMIT 1 /* Answer the following: Who is the driver with the highest rank in race No. 872? highest rank refers to MIN(rank); race No. 872 refers to raceId = 872; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.rank IS NOT NULL ORDER BY T1.rank ASC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap speed in race No. 872? fastest lap speed refers to MAX(fastestLapSpeed); race No. 872 refers to raceId = 872; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.fastestLapSpeed IS NOT NULL ORDER BY T1.fastestLapSpeed DESC LIMIT 1
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 348 ORDER BY T2.time LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2008 season? the most wins refers to MAX(wins); in the 2008 season refers to year = 2008 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Who was the driver with the most points in the 2010 season? the most points refers to MAX(points); in the 2010 season refers to year = 2010 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which driver had the fastest pit stop in the race No. 500? the fastest pit stop refers to MIN(milliseconds) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 500 ORDER BY T2.milliseconds LIMIT 1 /* Answer the following: Who was the driver that started from the pole position in the race No. 100? pole position refers to grid = 1 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 100 AND T2.grid = 1 /* Answer the following: Which constructor had the most points in the 2005 season? the most points refers to MAX(points); in the 2005 season refers to year = 2005 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2005 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Who was the driver that got the fastest lap in the race No. 200? Give his full name. the fastest lap refers to MIN(fastestLapTime) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 200 ORDER BY T2.fastestLapTime LIMIT 1 /* Answer the following: Who was the driver that won the race No. 300? won the race refers to position = 1 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 300 AND T2.position = 1 /* Answer the following: Which driver had the most wins in the 2000 season? the most wins refers to MAX(wins); in the 2000 season refers to year = 2000 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2000 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which constructor had the most wins in the 1998 season? the most wins refers to MAX(wins); in the 1998 season refers to year = 1998 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1998 ORDER BY T2.wins DESC LIMIT 1
SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed = ( SELECT MAX(fastestLapSpeed) FROM results )
SELECT (CAST(T1.fastestLapSpeed AS REAL) - CAST(T2.fastestLapSpeed AS REAL)) * 100 / CAST(T1.fastestLapSpeed AS REAL) AS percentage FROM results AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Paul' AND T3.surname = 'di Resta' AND T1.raceId = 853 AND T2.raceId = 854
SELECT CAST(COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '1983-07-16'
SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix'
SELECT COUNT(raceId), name FROM races WHERE year = 2005 ORDER BY name DESC /* Answer the following: How many drivers are from the United States? */ SELECT COUNT(driverId) FROM drivers WHERE nationality = 'United States' /* Answer the following: How many constructors are from Italy? */ SELECT COUNT(constructorId) FROM constructors WHERE nationality = 'Italy' /* Answer the following: Who won the most races in 2005? */ SELECT driverId, COUNT(raceId) as race_wins FROM results WHERE position = 1 AND raceId IN (SELECT raceId FROM races WHERE year = 2005) GROUP BY driverId ORDER BY race_wins DESC LIMIT 1 /* Answer the following: Which constructor won the most races in 2005? */ SELECT constructorId, COUNT(raceId) as race_wins FROM results WHERE position = 1 AND raceId IN (SELECT raceId FROM races WHERE year = 2005) GROUP BY constructorId ORDER BY race_wins DESC LIMIT 1 /* Answer the following: How many laps did the winner of the 2005 season complete? */ SELECT laps FROM results WHERE position = 1 AND raceId IN (SELECT raceId FROM races WHERE year = 2005) /* Answer the following: How many pit stops were made in 2005? */ SELECT COUNT(*) FROM pitStops WHERE raceId IN (SELECT raceId FROM races WHERE year = 2005) /* Answer the following: Who had the fastest lap in 2005? */ SELECT driverId, MIN(fastestLapTime) as fastest_lap FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2005) GROUP BY driverId ORDER BY fastest_lap ASC LIMIT 1 /* Answer the following: Which constructor had the fastest lap in 2005? */ SELECT constructorId, MIN(fastestLapTime) as fastest_lap FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2005) GROUP BY constructorId ORDER BY fastest_lap ASC LIMIT 1
SELECT r1.name, r1.date FROM races r1 WHERE (strftime('%Y', r1.date), strftime('%m', r1.date)) = (SELECT strftime('%Y', MIN(r2.date)), strftime('%m', MIN(r2.date)) FROM races r2)
SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1
SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1
SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )
SELECT T1.country, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1
SELECT MAX(T1.year) FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Brands Hatch' AND T2.name = 'British Grand Prix'
SELECT COUNT(DISTINCT T2.year) FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'
SELECT drivers.forename, drivers.surname, results.positionOrder FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY results.positionOrder;
SELECT T1.forename, T1.surname, MAX(T2.points) AS points FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY points DESC LIMIT 1
SELECT drivers.forename, drivers.surname, results.points FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2017 AND races.name = 'Chinese Grand Prix' ORDER BY results.points DESC LIMIT 3
SELECT T2.forename, T2.surname, T3.name, T3.year, MIN(T1.time) AS BestLapTime FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId GROUP BY T2.driverId, T3.raceId ORDER BY BestLapTime ASC LIMIT 1
SELECT AVG(time) FROM lapTimes WHERE raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Chinese Grand Prix') AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Sebastian' AND surname = 'Vettel')
SELECT CAST(SUM(CASE WHEN T2.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010 /* Answer the following: What is the percentage of races where Ferrari won since 2000? DIVIDE(COUNT(raceId where constructorId = (SELECT constructorId FROM constructors WHERE name = 'Ferrari') and position = 1), COUNT(raceId where year >= 2000)) as percentage; */ SELECT CAST(SUM(CASE WHEN T2.position = 1 AND T4.name = 'Ferrari' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T4 ON T2.constructorId = T4.constructorId WHERE T1.year >= 2000 /* Answer the following: What is the percentage of races where Mercedes won the first position since 2010? DIVIDE(COUNT(raceId where constructorId = (SELECT constructorId FROM constructors WHERE name = 'Mercedes') and position = 1), COUNT(raceId where year >= 2010)) as percentage; */ SELECT CAST(SUM(CASE WHEN T2.position = 1 AND T4.name = 'Mercedes' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T4 ON T2.constructorId = T4.constructorId WHERE T1.year >= 2010 /* Answer the following: What is the percentage of races where Red Bull won the first position since 2010? DIVIDE(COUNT(raceId where constructorId = (SELECT constructorId FROM constructors WHERE name = 'Red Bull') and position = 1), COUNT(raceId where year >= 2010)) as percentage; */ SELECT CAST(SUM(CASE WHEN T2.position = 1 AND T4.name = 'Red Bull' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T4 ON T2.constructorId = T4.constructorId WHERE T1.year >= 2010 /* Answer the following: What is the percentage of races where McLaren won the first position since 2000? DIVIDE(COUNT(raceId where constructorId = (SELECT constructorId FROM constructors WHERE name = 'McLaren') and position = 1), COUNT(raceId where year >= 2000)) as percentage; */ SELECT CAST(SUM(CASE WHEN T2.position = 1 AND T4.name = 'McLaren' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T4 ON T2.constructorId = T4.constructorId WHERE T1.year >= 2000 /* Answer the following: What is the percentage of races where Williams won the first position since 2000? DIVIDE(COUNT(raceId where constructorId = (SELECT constructorId FROM constructors WHERE name = 'Williams') and position = 1), COUNT(raceId where year >= 2000)) as percentage; */ SELECT CAST(SUM(CASE WHEN T2.position = 1 AND T4.name = 'Williams' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T4 ON T2.constructorId = T4.constructorId WHERE T1.year >= 2000
SELECT T1.forename, T1.surname, T1.nationality, AVG(T3.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN results AS T3 ON T1.driverId = T3.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.wins) DESC, AVG(T3.points) DESC LIMIT 1 /* Answer the following: Which constructor has the most winning in 2008? the most winning refers to MAX(COUNT(wins)); in 2008 refers to year = 2008 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 GROUP BY T1.constructorId ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: What is the average lap time of the driver who has the most pit stops? the most pit stops refers to MAX(COUNT(stop)); average lap time refers to AVG(time) */ SELECT AVG(T3.time) FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN lapTimes AS T3 ON T1.driverId = T3.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: Which circuit has the most races held? the most races held refers to MAX(COUNT(raceId)) */ SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.circuitId ORDER BY COUNT(T2.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the fastest average lap speed? fastest average lap speed refers to MAX(AVG(fastestLapSpeed)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY AVG(T2.fastestLapSpeed) DESC LIMIT 1 /* Answer the following: Which constructor has the highest average points in 2010? highest average points refers to MAX(AVG(points)); in 2010 refers to year = 2010 */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 GROUP BY T1.constructorId ORDER BY AVG(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions? the most pole positions refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps? the most fastest laps refers to MAX(COUNT(fastestLap)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes? the most podium finishes refers to MAX(COUNT(position <= 3)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position <= 3) DESC LIMIT 1 /* Answer the following: Which driver has the most race starts? the most race starts refers to MAX(COUNT(raceId)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes? the most race finishes refers to MAX(COUNT(statusId != 'DNF')) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.statusId != 'DNF') DESC LIMIT 1 /* Answer the following: Which driver has the most race wins? the most race wins refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most championship wins? the most championship wins refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most points scored in a single season? the most points scored in a single season refers to MAX(SUM(points)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the most points scored in their career? the most points scored in their career refers to MAX(SUM(points)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in a single season? the most fastest laps in a single season refers to MAX(COUNT(fastestLap)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in their career? the most fastest laps in their career refers to MAX(COUNT(fastestLap)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions in a single season? the most pole positions in a single season refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions in their career? the most pole positions in their career refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in a single season? the most podium finishes in a single season refers to MAX(COUNT(position <= 3)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position <= 3) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in their career? the most podium finishes in their career refers to MAX(COUNT(position <= 3)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position <= 3) DESC LIMIT 1 /* Answer the following: Which driver has the most race starts in a single season? the most race starts in a single season refers to MAX(COUNT(raceId)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most race starts in their career? the most race starts in their career refers to MAX(COUNT(raceId)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in a single season? the most race finishes in a single season refers to MAX(COUNT(statusId != 'DNF')) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.statusId != 'DNF') DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in their career? the most race finishes in their career refers to MAX(COUNT(statusId != 'DNF')) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.statusId != 'DNF') DESC LIMIT 1 /* Answer the following: Which driver has the most race wins in a single season? the most race wins in a single season refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins in their career? the most race wins in their career refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most championship wins in a single season? the most championship wins in a single season refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most championship wins in their career? the most championship wins in their career refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most points scored in a single season? the most points scored in a single season refers to MAX(SUM(points)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the most points scored in their career? the most points scored in their career refers to MAX(SUM(points)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in a single season? the most fastest laps in a single season refers to MAX(COUNT(fastestLap)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in their career? the most fastest laps in their career refers to MAX(COUNT(fastestLap)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions in a single season? the most pole positions in a single season refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions in their career? the most pole positions in their career refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in a single season? the most podium finishes in a single season refers to MAX(COUNT(position <= 3)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position <= 3) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in their career? the most podium finishes in their career refers to MAX(COUNT(position <= 3)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position <= 3) DESC LIMIT 1 /* Answer the following: Which driver has the most race starts in a single season? the most race starts in a single season refers to MAX(COUNT(raceId)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most race starts in their career? the most race starts in their career refers to MAX(COUNT(raceId)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in a single season? the most race finishes in a single season refers to MAX(COUNT(statusId != 'DNF')) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.statusId != 'DNF') DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in their career? the most race finishes in their career refers to MAX(COUNT(statusId != 'DNF')) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.statusId != 'DNF') DESC LIMIT 1 /* Answer the following: Which driver has the most race wins in a single season? the most race wins in a single season refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins in their career? the most race wins in their career refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most championship wins in a single season? the most championship wins in a single season refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most championship wins in their career? the most championship wins in their career refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most points scored in a single season? the most points scored in a single season refers to MAX(SUM(points)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the most points scored in their career? the most points scored in their career refers to MAX(SUM(points)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in a single season? the most fastest laps in a single season refers to MAX(COUNT(fastestLap)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in their career? the most fastest laps in their career refers to MAX(COUNT(fastestLap)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions in a single season? the most pole positions in a single season refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions in their career? the most pole positions in their career refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in a single season? the most podium finishes in a single season refers to MAX(COUNT(position <= 3)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position <= 3) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in their career? the most podium finishes in their career refers to MAX(COUNT(position <= 3)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position <= 3) DESC LIMIT 1 /* Answer the following: Which driver has the most race starts in a single season? the most race starts in a single season refers to MAX(COUNT(raceId)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most race starts in their career? the most race starts in their career refers to MAX(COUNT(raceId)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in a single season? the most race finishes in a single season refers to MAX(COUNT(statusId != 'DNF')) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.statusId != 'DNF') DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in their career? the most race finishes in their career refers to MAX(COUNT(statusId != 'DNF')) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.statusId != 'DNF') DESC LIMIT 1 /* Answer the following: Which driver has the most race wins in a single season? the most race wins in a single season refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins in their career? the most race wins in their career refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most championship wins in a single season? the most championship wins in a single season refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most championship wins in their career? the most championship wins in their career refers to MAX(COUNT(position = 1)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.position = 1) DESC LIMIT 1 /* Answer the following: Which driver has the most points scored in a single season? the most points scored in a single season refers to MAX(SUM(points)) */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T
SELECT forename, surname, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob) FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1
SELECT c.name, COUNT(r.raceId) as race_count FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitId HAVING race_count = 4 /* Answer the following: List the drivers who won the most races in 2008. in 2008 refers to year = 2008; won the most races refers to MAX(wins) */ SELECT d.forename, d.surname, MAX(ds.wins) as wins FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driverId JOIN races r ON ds.raceId = r.raceId WHERE r.year = 2008 GROUP BY d.driverId ORDER BY wins DESC LIMIT 1 /* Answer the following: List the constructors who scored the most points in 2010. in 2010 refers to year = 2010; scored the most points refers to MAX(points) */ SELECT c.name, MAX(cs.points) as points FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId JOIN races r ON cs.raceId = r.raceId WHERE r.year = 2010 GROUP BY c.constructorId ORDER BY points DESC LIMIT 1 /* Answer the following: List the drivers who had the fastest lap times in 2005. in 2005 refers to year = 2005; fastest lap times refers to MIN(fastestLapTime) */ SELECT d.forename, d.surname, MIN(r.fastestLapTime) as fastest_lap_time FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2005 GROUP BY d.driverId ORDER BY fastest_lap_time ASC LIMIT 1 /* Answer the following: List the circuits where the most pit stops were made in 2012. in 2012 refers to year = 2012; most pit stops refers to MAX(stop) */ SELECT c.name, MAX(p.stop) as pit_stops FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN pitStops p ON r.raceId = p.raceId WHERE r.year = 2012 GROUP BY c.circuitId ORDER BY pit_stops DESC LIMIT 1
SELECT c.name AS circuit_name, c.location AS circuit_location, r.name AS race_name FROM circuits AS c INNER JOIN races AS r ON c.circuitId = r.circuitId WHERE c.country = 'USA' AND r.year = 2006
SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE strftime('%m', races.date) = '09' AND strftime('%Y', races.date) = '2005';
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10
SELECT COUNT(T1.raceId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T2.forename = 'Michael' AND T2.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit' AND T1.points = (SELECT MAX(points) FROM results)
SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: Which constructor has won the most races? most races refers to MAX(wins) */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions? most pole positions refers to MAX(grid) where grid = 1 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.grid = 1 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which circuit has the highest altitude? highest altitude refers to MAX(alt) */ SELECT T1.name FROM circuits AS T1 ORDER BY T1.alt DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps? most fastest laps refers to MAX(fastestLap) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLap DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a single race? most points in a single race refers to MAX(points) */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which driver has the most wins in a single season? most wins in a single season refers to MAX(wins) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which driver has the most second place finishes? most second place finishes refers to position = 2 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 2 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes? most podium finishes refers to position <= 3 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position <= 3 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish)? DNFs refers to statusId != 1 */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.statusId != 1 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in a single season? most fastest laps in a single season refers to MAX(fastestLap) */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions in a single season? most pole positions in a single season refers to grid = 1 */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.grid = 1 GROUP BY T1.driverId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most wins in a single season? most wins in a single season refers to MAX(wins) */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in a single season? most podium finishes in a single season refers to position <= 3 */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position <= 3 GROUP BY T1.driverId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish) in a single season? DNFs in a single season refers to statusId != 1 */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.statusId != 1 GROUP BY T1.driverId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in a single season? most wins in a single season refers to MAX(wins) */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.constructorId, T3.year ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a single season? most points in a single season refers to MAX(points) */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.constructorId, T3.year ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes in a single season? most podium finishes in a single season refers to position <= 3 */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position <= 3 GROUP BY T1.constructorId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most DNFs (Did Not Finish) in a single season? DNFs in a single season refers to statusId != 1 */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.statusId != 1 GROUP BY T1.constructorId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most pole positions in a single season? most pole positions in a single season refers to grid = 1 */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.grid = 1 GROUP BY T1.constructorId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most fastest laps in a single season? most fastest laps in a single season refers to MAX(fastestLap) */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.constructorId, T3.year ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most points in a single race? most points in a single race refers to MAX(points) */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a single race? most points in a single race refers to MAX(points) */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which driver has the most wins in a single race? most wins in a single race refers to MAX(wins) */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in a single race? most wins in a single race refers to MAX(wins) */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in a single race? most podium finishes in a single race refers to position <= 3 */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position <= 3 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes in a single race? most podium finishes in a single race refers to position <= 3 */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position <= 3 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish) in a single race? DNFs in a single race refers to statusId != 1 */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.statusId != 1 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most DNFs (Did Not Finish) in a single race? DNFs in a single race refers to statusId != 1 */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.statusId != 1 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions in a single race? most pole positions in a single race refers to grid = 1 */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.grid = 1 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most pole positions in a single race? most pole positions in a single race refers to grid = 1 */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.grid = 1 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in a single race? most fastest laps in a single race refers to MAX(fastestLap) */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.fastestLap DESC LIMIT 1 /* Answer the following: Which constructor has the most fastest laps in a single race? most fastest laps in a single race refers to MAX(fastestLap) */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.fastestLap DESC LIMIT 1 /* Answer the following: Which driver has the most points in a single season? most points in a single season refers to MAX(points) */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a single season? most points in a single season refers to MAX(points) */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.constructorId, T3.year ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the most wins in a single season? most wins in a single season refers to MAX(wins) */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in a single season? most wins in a single season refers to MAX(wins) */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.constructorId, T3.year ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in a single season? most podium finishes in a single season refers to position <= 3 */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position <= 3 GROUP BY T1.driverId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes in a single season? most podium finishes in a single season refers to position <= 3 */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position <= 3 GROUP BY T1.constructorId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish) in a single season? DNFs in a single season refers to statusId != 1 */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.statusId != 1 GROUP BY T1.driverId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most DNFs (Did Not Finish) in a single season? DNFs in a single season refers to statusId != 1 */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.statusId != 1 GROUP BY T1.constructorId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions in a single season? most pole positions in a single season refers to grid = 1 */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.grid = 1 GROUP BY T1.driverId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most pole positions in a single season? most pole positions in a single season refers to grid = 1 */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.grid = 1 GROUP BY T1.constructorId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in a single season? most fastest laps in a single season refers to MAX(fastestLap) */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which constructor has the most fastest laps in a single season? most fastest laps in a single season refers to MAX(fastestLap) */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.constructorId, T3.year ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most points in a single race? most points in a single race refers to MAX(points) */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a single race? most points in a single race refers to MAX(points) */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which driver has the most wins in a single race? most wins in a single race refers to MAX(wins) */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in a single race? most wins in a single race refers to MAX(wins) */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in a single race? most podium finishes in a single race refers to position <= 3 */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position <= 3 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes in a single race? most podium finishes in a single race refers to position <= 3 */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position <= 3 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish) in a single race? DNFs in a single race refers to statusId != 1 */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.statusId != 1 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most DNFs (Did Not Finish) in a single race? DNFs in a single race refers to statusId != 1 */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.statusId != 1 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions in a single race? most pole positions in a single race refers to grid = 1 */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.grid = 1 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most pole positions in a single race? most pole positions in a single race refers to grid = 1 */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.grid = 1 ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps in a single race? most fastest laps in a single race refers to MAX(fastestLap) */ SELECT T1.forename, T1.surname, T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.fastestLap DESC LIMIT 1 /* Answer the following: Which constructor has the most fastest laps in a single race? most fastest laps in a single race refers to MAX(fastestLap) */ SELECT T1.name, T2.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.fastestLap DESC LIMIT 1 /* Answer the following: Which driver has the most points in a single season? most points in a single season refers to MAX(points) */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a single season? most points in a single season refers to MAX(points) */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.constructorId, T3.year ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which driver has the most wins in a single season? most wins in a single season refers to MAX(wins) */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in a single season? most wins in a single season refers to MAX(wins) */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.constructorId, T3.year ORDER BY COUNT(T2.wins) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes in a single season? most podium finishes in a single season refers to position <= 3 */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position <= 3 GROUP BY T1.driverId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes in a single season? most podium finishes in a single season refers to position <= 3 */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position <= 3 GROUP BY T1.constructorId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish) in a single season? DNFs in a single season refers to statusId != 1 */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.statusId != 1 GROUP BY T1.driverId, T3.year ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most DNFs (Did Not Finish) in a single season? DNFs in a single season refers to statusId != 1 */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2
SELECT AVG(T1.points) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Eddie' AND T3.surname = 'Irvine' AND T2.year = 2000 /* Answer the following: What is the average number of pit stops made by drivers in the 2010 season? average pit stops = AVG(stop where year = 2010) */ SELECT AVG(T1.stop) FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2010 /* Answer the following: What is the average number of laps completed by drivers in the 2005 season? average laps = AVG(laps where year = 2005) */ SELECT AVG(T1.laps) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2005 /* Answer the following: What is the average grid position of drivers in the 1998 season? average grid position = AVG(grid where year = 1998) */ SELECT AVG(T1.grid) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 1998 /* Answer the following: What is the average number of wins by constructors in the 2007 season? average wins = AVG(wins where year = 2007) */ SELECT AVG(T1.wins) FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2007 /* Answer the following: What is the average number of laps led by drivers in the 2012 season? average laps led = AVG(lap where year = 2012) */ SELECT AVG(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2012 AND T1.position = 1 /* Answer the following: What is the average number of pit stops made by drivers in the 2015 season? average pit stops = AVG(stop where year = 2015) */ SELECT AVG(T1.stop) FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2015 /* Answer the following: What is the average number of laps completed by drivers in the 2008 season? average laps = AVG(laps where year = 2008) */ SELECT AVG(T1.laps) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 /* Answer the following: What is the average grid position of drivers in the 2003 season? average grid position = AVG(grid where year = 2003) */ SELECT AVG(T1.grid) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2003 /* Answer the following: What is the average number of wins by constructors in the 2009 season? average wins = AVG(wins where year = 2009) */ SELECT AVG(T1.wins) FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009
SELECT races.name, results.points FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.surname = 'Hamilton' ORDER BY races.year ASC LIMIT 1
SELECT races.name, circuits.country, races.date FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date
SELECT T1.name, T1.year, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.laps DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix'
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'
SELECT `name`, `lat` FROM `circuits` WHERE `name` IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY `lat` DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in the 2010 season? most wins refers to max(wins) */ SELECT T2.`forename`, T2.`surname` FROM `driverStandings` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2010) ORDER BY T1.`wins` DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 2008 season? most points refers to max(points) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2008) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: What was the fastest lap time in the 2012 season? fastest lap time refers to min(fastestLapTime) */ SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2012) /* Answer the following: Who was the driver of the car with the number 5 in the 2015 season? car with the number 5 refers to number = 5 */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`number` = 5 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2015) LIMIT 1 /* Answer the following: Which constructor had the car with the number 3 in the 2011 season? car with the number 3 refers to number = 3 */ SELECT T2.`name` FROM `results` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`number` = 3 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2011) LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 2009 season? fastest lap refers to min(fastestLapTime) */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`fastestLapTime` = (SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2009)) AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2009) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2007 season? most wins refers to max(wins) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2007) ORDER BY T1.`wins` DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 2006 season? most points refers to max(points) */ SELECT T2.`forename`, T2.`surname` FROM `driverStandings` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2006) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 2005 season? most points refers to max(points) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2005) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: What was the fastest lap time in the 2004 season? fastest lap time refers to min(fastestLapTime) */ SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2004) /* Answer the following: Who was the driver of the car with the number 1 in the 2003 season? car with the number 1 refers to number = 1 */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`number` = 1 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2003) LIMIT 1 /* Answer the following: Which constructor had the car with the number 2 in the 2002 season? car with the number 2 refers to number = 2 */ SELECT T2.`name` FROM `results` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`number` = 2 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2002) LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 2001 season? fastest lap refers to min(fastestLapTime) */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`fastestLapTime` = (SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2001)) AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2001) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2000 season? most wins refers to max(wins) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2000) ORDER BY T1.`wins` DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 1999 season? most points refers to max(points) */ SELECT T2.`forename`, T2.`surname` FROM `driverStandings` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1999) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 1998 season? most points refers to max(points) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1998) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: What was the fastest lap time in the 1997 season? fastest lap time refers to min(fastestLapTime) */ SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1997) /* Answer the following: Who was the driver of the car with the number 3 in the 1996 season? car with the number 3 refers to number = 3 */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`number` = 3 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1996) LIMIT 1 /* Answer the following: Which constructor had the car with the number 4 in the 1995 season? car with the number 4 refers to number = 4 */ SELECT T2.`name` FROM `results` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`number` = 4 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1995) LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 1994 season? fastest lap refers to min(fastestLapTime) */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`fastestLapTime` = (SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1994)) AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1994) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 1993 season? most wins refers to max(wins) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1993) ORDER BY T1.`wins` DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 1992 season? most points refers to max(points) */ SELECT T2.`forename`, T2.`surname` FROM `driverStandings` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1992) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 1991 season? most points refers to max(points) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1991) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: What was the fastest lap time in the 1990 season? fastest lap time refers to min(fastestLapTime) */ SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1990) /* Answer the following: Who was the driver of the car with the number 1 in the 1989 season? car with the number 1 refers to number = 1 */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`number` = 1 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1989) LIMIT 1 /* Answer the following: Which constructor had the car with the number 2 in the 1988 season? car with the number 2 refers to number = 2 */ SELECT T2.`name` FROM `results` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`number` = 2 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1988) LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 1987 season? fastest lap refers to min(fastestLapTime) */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`fastestLapTime` = (SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1987)) AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1987) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 1986 season? most wins refers to max(wins) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1986) ORDER BY T1.`wins` DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 1985 season? most points refers to max(points) */ SELECT T2.`forename`, T2.`surname` FROM `driverStandings` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1985) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 1984 season? most points refers to max(points) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1984) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: What was the fastest lap time in the 1983 season? fastest lap time refers to min(fastestLapTime) */ SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1983) /* Answer the following: Who was the driver of the car with the number 1 in the 1982 season? car with the number 1 refers to number = 1 */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`number` = 1 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1982) LIMIT 1 /* Answer the following: Which constructor had the car with the number 2 in the 1981 season? car with the number 2 refers to number = 2 */ SELECT T2.`name` FROM `results` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`number` = 2 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1981) LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 1980 season? fastest lap refers to min(fastestLapTime) */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`fastestLapTime` = (SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1980)) AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1980) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 1979 season? most wins refers to max(wins) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1979) ORDER BY T1.`wins` DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 1978 season? most points refers to max(points) */ SELECT T2.`forename`, T2.`surname` FROM `driverStandings` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1978) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 1977 season? most points refers to max(points) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1977) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: What was the fastest lap time in the 1976 season? fastest lap time refers to min(fastestLapTime) */ SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1976) /* Answer the following: Who was the driver of the car with the number 1 in the 1975 season? car with the number 1 refers to number = 1 */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`number` = 1 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1975) LIMIT 1 /* Answer the following: Which constructor had the car with the number 2 in the 1974 season? car with the number 2 refers to number = 2 */ SELECT T2.`name` FROM `results` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`number` = 2 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1974) LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 1973 season? fastest lap refers to min(fastestLapTime) */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`fastestLapTime` = (SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1973)) AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1973) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 1972 season? most wins refers to max(wins) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1972) ORDER BY T1.`wins` DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 1971 season? most points refers to max(points) */ SELECT T2.`forename`, T2.`surname` FROM `driverStandings` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1971) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 1970 season? most points refers to max(points) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1970) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: What was the fastest lap time in the 1969 season? fastest lap time refers to min(fastestLapTime) */ SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1969) /* Answer the following: Who was the driver of the car with the number 1 in the 1968 season? car with the number 1 refers to number = 1 */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`number` = 1 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1968) LIMIT 1 /* Answer the following: Which constructor had the car with the number 2 in the 1967 season? car with the number 2 refers to number = 2 */ SELECT T2.`name` FROM `results` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`number` = 2 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1967) LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 1966 season? fastest lap refers to min(fastestLapTime) */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`fastestLapTime` = (SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1966)) AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1966) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 1965 season? most wins refers to max(wins) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1965) ORDER BY T1.`wins` DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 1964 season? most points refers to max(points) */ SELECT T2.`forename`, T2.`surname` FROM `driverStandings` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1964) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 1963 season? most points refers to max(points) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1963) ORDER BY T1.`points` DESC LIMIT 1 /* Answer the following: What was the fastest lap time in the 1962 season? fastest lap time refers to min(fastestLapTime) */ SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1962) /* Answer the following: Who was the driver of the car with the number 1 in the 1961 season? car with the number 1 refers to number = 1 */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`number` = 1 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1961) LIMIT 1 /* Answer the following: Which constructor had the car with the number 2 in the 1960 season? car with the number 2 refers to number = 2 */ SELECT T2.`name` FROM `results` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`number` = 2 AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1960) LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 1959 season? fastest lap refers to min(fastestLapTime) */ SELECT T2.`forename`, T2.`surname` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`fastestLapTime` = (SELECT MIN(`fastestLapTime`) FROM `results` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1959)) AND T1.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 1959) LIMIT 1 /* Answer the following: Which constructor had the most wins in the 1958 season? most wins refers to max(wins) */ SELECT T2.`name` FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId`
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'
SELECT country FROM circuits ORDER BY alt DESC LIMIT 1
SELECT COUNT(driverId) FROM drivers WHERE code IS NULL
SELECT c.country FROM drivers d INNER JOIN circuits c ON d.driverId = c.circuitId ORDER BY d.dob ASC LIMIT 1 /* Answer the following: Who is the oldest driver? oldest driver refers to min(dob) */ SELECT forename, surname FROM drivers ORDER BY dob ASC LIMIT 1 /* Answer the following: What is the nationality of the oldest constructor? oldest constructor refers to min(year) in seasons */ SELECT nationality FROM constructors c INNER JOIN races r ON c.constructorId = r.constructorId INNER JOIN seasons s ON r.year = s.year ORDER BY s.year ASC LIMIT 1 /* Answer the following: Who is the youngest driver and which country is he/she from? youngest driver refers to max(dob); country refers to country in circuits */ SELECT d.forename, d.surname, c.country FROM drivers d INNER JOIN circuits c ON d.driverId = c.circuitId ORDER BY d.dob DESC LIMIT 1 /* Answer the following: What is the nationality of the youngest constructor? youngest constructor refers to max(year) in seasons */ SELECT nationality FROM constructors c INNER JOIN races r ON c.constructorId = r.constructorId INNER JOIN seasons s ON r.year = s.year ORDER BY s.year DESC LIMIT 1 /* Answer the following: Which driver has the most wins? most wins refers to max(wins) in driverStandings */ SELECT d.forename, d.surname FROM drivers d INNER JOIN driverStandings ds ON d.driverId = ds.driverId ORDER BY ds.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most wins? most wins refers to max(wins) in constructorStandings */ SELECT c.name FROM constructors c INNER JOIN constructorStandings cs ON c.constructorId = cs.constructorId ORDER BY cs.wins DESC LIMIT 1 /* Answer the following: Which driver has the fastest lap time? fastest lap time refers to min(fastestLapTime) in results */ SELECT d.forename, d.surname FROM drivers d INNER JOIN results r ON d.driverId = r.driverId ORDER BY r.fastestLapTime ASC LIMIT 1 /* Answer the following: Which constructor has the fastest lap time? fastest lap time refers to min(fastestLapTime) in results */ SELECT c.name FROM constructors c INNER JOIN results r ON c.constructorId = r.constructorId ORDER BY r.fastestLapTime ASC LIMIT 1
SELECT surname FROM drivers WHERE nationality = 'Italian'
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'
SELECT c.name FROM races r INNER JOIN circuits c ON r.circuitId = c.circuitId WHERE r.name = 'Spanish Grand Prix' AND r.year = 2009 /* Answer the following: Who won the 2010 British Grand Prix? */ SELECT d.forename, d.surname FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN drivers d ON res.driverId = d.driverId WHERE r.name = 'British Grand Prix' AND r.year = 2010 AND res.positionOrder = 1 /* Answer the following: Which constructor won the most races in 2008? */ SELECT c.name, COUNT(*) as wins FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN constructors c ON res.constructorId = c.constructorId WHERE r.year = 2008 AND res.positionOrder = 1 GROUP BY c.name ORDER BY wins DESC LIMIT 1 /* Answer the following: Who was the driver with the most fastest laps in 2011? */ SELECT d.forename, d.surname, COUNT(*) as fastest_laps FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN drivers d ON res.driverId = d.driverId WHERE r.year = 2011 AND res.rank = 1 GROUP BY d.driverId ORDER BY fastest_laps DESC LIMIT 1 /* Answer the following: How many pit stops did the winner of the 2012 Monaco Grand Prix make? */ SELECT COUNT(*) as pit_stops FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN pitStops p ON r.raceId = p.raceId AND res.driverId = p.driverId WHERE r.name = 'Monaco Grand Prix' AND r.year = 2012 AND res.positionOrder = 1 /* Answer the following: Who was the constructor for the driver who qualified first for the 2013 Australian Grand Prix? */ SELECT c.name FROM races r INNER JOIN qualifying q ON r.raceId = q.raceId INNER JOIN constructors c ON q.constructorId = c.constructorId WHERE r.name = 'Australian Grand Prix' AND r.year = 2013 AND q.position = 1 /* Answer the following: What was the fastest lap time in the 2014 Italian Grand Prix? */ SELECT MIN(res.fastestLapTime) as fastest_lap_time FROM races r INNER JOIN results res ON r.raceId = res.raceId WHERE r.name = 'Italian Grand Prix' AND r.year = 2014 /* Answer the following: Who was the driver with the most points in the 2015 season? */ SELECT d.forename, d.surname, SUM(ds.points) as total_points FROM races r INNER JOIN driverStandings ds ON r.raceId = ds.raceId INNER JOIN drivers d ON ds.driverId = d.driverId WHERE r.year = 2015 GROUP BY d.driverId ORDER BY total_points DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 2016 season? */ SELECT c.name, SUM(cs.points) as total_points FROM races r INNER JOIN constructorStandings cs ON r.raceId = cs.raceId INNER JOIN constructors c ON cs.constructorId = c.constructorId WHERE r.year = 2016 GROUP BY c.constructorId ORDER BY total_points DESC LIMIT 1 /* Answer the following: Who was the driver with the most wins in the 2017 season? */ SELECT d.forename, d.surname, COUNT(*) as wins FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN drivers d ON res.driverId = d.driverId WHERE r.year = 2017 AND res.positionOrder = 1 GROUP BY d.driverId ORDER BY wins DESC LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2018 season? */ SELECT c.name, COUNT(*) as wins FROM races r INNER JOIN results res ON r.raceId = res.raceId INNER JOIN constructors c ON res.constructorId = c.constructorId WHERE r.year = 2018 AND res.positionOrder = 1 GROUP BY c.constructorId ORDER BY wins DESC LIMIT 1 /* Answer the following: Who was the driver with the most pole positions in the 2019 season? */ SELECT d.forename, d.surname, COUNT(*) as pole_positions FROM races r INNER JOIN qualifying q ON r.raceId = q.raceId INNER JOIN drivers d ON q.driverId = d.driverId WHERE r.year = 2019 AND q.position = 1 GROUP BY d.driverId ORDER BY pole_positions DESC LIMIT 1 /* Answer the following: Which constructor had the most pole positions in the 2020 season? */ SELECT c.name, COUNT(*) as pole_positions FROM races r INNER JOIN qualifying q ON r.raceId = q.raceId INNER JOIN constructors c ON q.constructorId = c.constructorId WHERE r.year = 2020 AND q.position = 1 GROUP BY c.constructorId ORDER BY pole_positions DESC LIMIT 1
SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'
SELECT races.name, races.date, races.time, races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit'
SELECT races.time FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit'
SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy'
SELECT date FROM races WHERE circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Barcelona-Catalunya' )
SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009
SELECT MIN(T1.fastestLapTime) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1
SELECT T2.driverRef FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T1.positionOrder = 1
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.rank ASC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2010 season? most wins refers to MAX(wins) */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap time in the Australian Grand Prix? fastest lap time refers to min(fastestLapTime) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the highest altitude? highest altitude refers to MAX(alt) */ SELECT T1.name FROM circuits AS T1 ORDER BY T1.alt DESC LIMIT 1 /* Answer the following: Who is the driver with the most pit stops in the 2015 season? most pit stops refers to MAX(stop) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2015 ORDER BY T2.stop DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 2008 season? most points refers to MAX(points) */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in the 2012 season? most wins refers to MAX(wins) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2012 ORDER BY T2.wins DESC LIMIT 1 /* Answer the following: Which driver had the fastest lap in the 2011 season? fastest lap refers to min(fastestLap) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2011 ORDER BY T2.fastestLap ASC LIMIT 1 /* Answer the following: Which driver had the most pole positions in the 2013 season? most pole positions refers to MAX(grid) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2013 ORDER BY T2.grid DESC LIMIT 1 /* Answer the following: Which driver had the most podium finishes in the 2014 season? most podium finishes refers to MAX(position) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2014 AND T2.position <= 3 ORDER BY T2.position DESC LIMIT 1
SELECT MAX(results.fastestLapSpeed) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'
SELECT DISTINCT races.year FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT T3.positionOrder FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T2.grid = 4
SELECT COUNT(driverId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL
SELECT MIN(T1.fastestLapTime) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008 /* Answer the following: How many races has Ferrari won in 2010? */ SELECT COUNT(T1.raceId) FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.name = 'Ferrari' AND T3.year = 2010 AND T1.position = 1 /* Answer the following: Who was the driver with the most wins in 2015? */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2015 GROUP BY T1.driverId ORDER BY COUNT(T1.position = 1) DESC LIMIT 1 /* Answer the following: What is the total number of pit stops made by Sebastian Vettel in 2012? */ SELECT COUNT(T1.stop) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Sebastian' AND T2.surname = 'Vettel' AND T3.year = 2012 /* Answer the following: Which constructor had the most points in 2009? */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2009 GROUP BY T1.constructorId ORDER BY SUM(T1.points) DESC LIMIT 1 /* Answer the following: Who was the driver with the fastest lap in the 2011 Monaco Grand Prix? */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Monaco Grand Prix' AND T3.year = 2011 ORDER BY T1.fastestLapTime ASC LIMIT 1
SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.positionOrder = 2
SELECT T2.forename, T2.surname, T2.url FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T1.time LIKE '%:%:%.%'
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'American' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix'
SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND (SELECT COUNT(raceId) FROM results WHERE driverId = T3.driverId) > 0
SELECT SUM(points) FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )
SELECT AVG(SUBSTR(T2.fastestLapTime, 4, 2) + SUBSTR(T2.fastestLapTime, 1, 2) * 60 + SUBSTR(T2.fastestLapTime, 7, 3) / 1000) AS avgFastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'
SELECT CAST(SUM(CASE WHEN time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(raceId) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') /* Answer the following: What is the win rate of the constructor "Ferrari" in 2008? win rate refers to DIVIDE(COUNT(position = 1), COUNT(*)) */ SELECT CAST(SUM(CASE WHEN position = 1 THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) AND constructorId IN (SELECT constructorId FROM constructors WHERE name = 'Ferrari') /* Answer the following: What is the average pit stop duration for the driver "Lewis Hamilton" in 2008? average pit stop duration = AVG(milliseconds) */ SELECT AVG(milliseconds) FROM pitStops WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) AND driverId IN (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') /* Answer the following: What is the average qualifying time for the driver "Sebastian Vettel" in Q3 in 2008? average qualifying time = AVG(q3) */ SELECT AVG(q3) FROM qualifying WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) AND driverId IN (SELECT driverId FROM drivers WHERE forename = 'Sebastian' AND surname = 'Vettel') /* Answer the following: What is the average lap time for the driver "Fernando Alonso" in 2008? average lap time = AVG(milliseconds) */ SELECT AVG(milliseconds) FROM lapTimes WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008) AND driverId IN (SELECT driverId FROM drivers WHERE forename = 'Fernando' AND surname = 'Alonso')
SELECT (CAST((julianday(T1.time) - julianday(T2.time)) * 24 * 60 * 60 * 1000 AS REAL) / (julianday(T1.time) * 24 * 60 * 60 * 1000)) * 100 AS percentage FROM (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND positionOrder = 1) AS T1, (SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND positionOrder = (SELECT MAX(positionOrder) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix'))) AS T2
SELECT COUNT(circuitId) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne'
SELECT lat, lng FROM circuits WHERE country = 'USA'
SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'
SELECT AVG(points) FROM constructorResults WHERE constructorId IN ( SELECT constructorId FROM constructors WHERE nationality = 'British' )
SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which driver has the fastest lap time? */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: Which race has the most pit stops? */ SELECT T1.name FROM races AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId GROUP BY T1.raceId ORDER BY COUNT(T2.stop) DESC LIMIT 1 /* Answer the following: Which driver has the most wins in a season? */ SELECT T1.forename, T1.surname, T2.year FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T2.year ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in a season? */ SELECT T1.name, T2.year FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.year ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Which driver has the most points in a race? */ SELECT T1.forename, T1.surname, T2.raceId FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a race? */ SELECT T1.name, T2.raceId FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.points DESC LIMIT 1 /* Answer the following: Which driver has the most laps in a race? */ SELECT T1.forename, T1.surname, T2.raceId FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.laps DESC LIMIT 1 /* Answer the following: Which constructor has the most laps in a race? */ SELECT T1.name, T2.raceId FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.laps DESC LIMIT 1
SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0 /* Answer the following: List the drivers who have won the race at circuit 6. race at circuit 6 refers to circuitId = 6; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.circuitId = 6 AND T1.position = 1 /* Answer the following: List the races where the driver with driverId 20 has participated. driver with driverId 20 refers to driverId = 20; */ SELECT T2.name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.driverId = 20 /* Answer the following: List the drivers who have participated in the race with raceId 18. race with raceId 18 refers to raceId = 18; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 18 /* Answer the following: List the drivers who have won the race at circuit 6 in the year 2008. race at circuit 6 in the year 2008 refers to circuitId = 6 and year = 2008; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.circuitId = 6 AND T3.year = 2008 AND T1.position = 1 /* Answer the following: List the drivers who have won the race at circuit 6 in the year 2008 and drove for the constructor with constructorId 1. race at circuit 6 in the year 2008 and constructor with constructorId 1 refers to circuitId = 6, year = 2008 and constructorId = 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.circuitId = 6 AND T3.year = 2008 AND T1.constructorId = 1 AND T1.position = 1 /* Answer the following: List the drivers who have won the race at circuit 6 in the year 2008 and drove for the constructor with constructorId 1 and started from the pole position. race at circuit 6 in the year 2008, constructor with constructorId 1 and started from the pole position refers to circuitId = 6, year = 2008, constructorId = 1 and grid = 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.circuitId = 6 AND T3.year = 2008 AND T1.constructorId = 1 AND T1.position = 1 AND T1.grid = 1 /* Answer the following: List the drivers who have won the race at circuit 6 in the year 2008 and drove for the constructor with constructorId 1 and started from the pole position and set the fastest lap. race at circuit 6 in the year 2008, constructor with constructorId 1, started from the pole position and set the fastest lap refers to circuitId = 6, year = 2008, constructorId = 1, grid = 1 and fastestLap is not null; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.circuitId = 6 AND T3.year = 2008 AND T1.constructorId = 1 AND T1.position = 1 AND T1.grid = 1 AND T1.fastestLap IS NOT NULL
SELECT COUNT(T1.constructorId) FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'Japanese' AND T1.points = 0 GROUP BY T1.constructorId HAVING COUNT(T1.raceId) = 2
SELECT name FROM constructors WHERE constructorId IN ( SELECT constructorId FROM constructorStandings WHERE position = 1 )
SELECT COUNT(DISTINCT constructors.constructorId) FROM constructors INNER JOIN results ON constructors.constructorId = results.constructorId WHERE constructors.nationality = 'French' AND results.laps > 50
SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.nationality = 'Japanese' AND T3.year BETWEEN 2007 AND 2009
SELECT T1.year, AVG(T3.milliseconds) / 1000.0 FROM seasons AS T1 INNER JOIN results AS T2 ON T1.year = T2.raceId INNER JOIN lapTimes AS T3 ON T2.driverId = T3.driverId WHERE T2.position = 1 AND T3.time IS NOT NULL GROUP BY T1.year
SELECT forename, surname FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE rank = 2) AND STRFTIME('%Y', dob) > '1975'
SELECT COUNT(DISTINCT T2.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapTime ASC LIMIT 1
SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN driverStandings AS T3 ON T3.driverId = T1.driverId WHERE T2.year = 2009 AND T3.position = 1 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: Who is the driver with the most wins in 2010? in 2010 refers to year = 2010; the most wins refers to MAX(wins); driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T1.driverId WHERE T2.year = 2010 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor had the most points in 2011? in 2011 refers to year = 2011; the most points refers to MAX(points); constructor refers to name */ SELECT T3.name FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T3.constructorId = T1.constructorId WHERE T2.year = 2011 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which circuit had the most races in 2012? in 2012 refers to year = 2012; the most races refers to MAX(count(raceId)); circuit refers to name */ SELECT T2.name, COUNT(T1.raceId) AS num_races FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2012 GROUP BY T2.name ORDER BY num_races DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap time in 2013? in 2013 refers to year = 2013; the fastest lap time refers to MIN(fastestLapTime); driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T1.driverId WHERE T2.year = 2013 ORDER BY T1.fastestLapTime LIMIT 1 /* Answer the following: Which constructor had the most wins in 2014? in 2014 refers to year = 2014; the most wins refers to MAX(wins); constructor refers to name */ SELECT T3.name FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T3.constructorId = T1.constructorId WHERE T2.year = 2014 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in 2015? in 2015 refers to year = 2015; the most points refers to MAX(points); driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T1.driverId WHERE T2.year = 2015 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which constructor had the most points in 2016? in 2016 refers to year = 2016; the most points refers to MAX(points); constructor refers to name */ SELECT T3.name FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T3.constructorId = T1.constructorId WHERE T2.year = 2016 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins in 2017? in 2017 refers to year = 2017; the most wins refers to MAX(wins); driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T1.driverId WHERE T2.year = 2017 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor had the most wins in 2018? in 2018 refers to year = 2018; the most wins refers to MAX(wins); constructor refers to name */ SELECT T3.name FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T3.constructorId = T1.constructorId WHERE T2.year = 2018 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in 2019? in 2019 refers to year = 2019; the most points refers to MAX(points); driver refers to forename and surname */ SELECT T3.forename, T3.surname FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T1.driverId WHERE T2.year = 2019 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which constructor had the most points in 2020? in 2020 refers to year = 2020; the most points refers to MAX(points); constructor refers to name */ SELECT T3.name FROM constructorStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T3.constructorId = T1.constructorId WHERE T2.year = 2020 ORDER BY T1.points DESC LIMIT 1
SELECT AVG(fastestLapSpeed) FROM results WHERE raceId IN ( SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009 )
SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds ASC LIMIT 1 /* Answer the following: Who is the driver with the most wins? most wins refers to Max(wins); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor has the most points? most points refers to Max(points); */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which driver has the fastest lap time? fastest lap time refers to Min(fastestLapTime) except fastestLapTime = null; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which circuit has the highest altitude? highest altitude refers to Max(alt); */ SELECT T1.name FROM circuits AS T1 ORDER BY T1.alt DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions? most pole positions refers to Max(position) where position = 1; */ SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 1 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes? most podium finishes refers to Max(position) where position <= 3; */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position <= 3 GROUP BY T2.constructorId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps? most fastest laps refers to Max(fastestLap); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish)? DNFs refers to statusId where status contains 'DNF'; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN status AS T3 ON T1.statusId = T3.statusId WHERE T3.status LIKE '%DNF%' GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most pit stops? most pit stops refers to Max(stop); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY COUNT(T1.stop) DESC LIMIT 1 /* Answer the following: Which driver has the most laps led? most laps led refers to Max(lap) where position = 1; */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.lap) DESC LIMIT 1 /* Answer the following: Which driver has the most second place finishes? most second place finishes refers to Max(position) where position = 2; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 2 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most third place finishes? most third place finishes refers to Max(position) where position = 3; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 3 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fourth place finishes? most fourth place finishes refers to Max(position) where position = 4; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 4 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fifth place finishes? most fifth place finishes refers to Max(position) where position = 5; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 5 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most sixth place finishes? most sixth place finishes refers to Max(position) where position = 6; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 6 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most seventh place finishes? most seventh place finishes refers to Max(position) where position = 7; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 7 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most eighth place finishes? most eighth place finishes refers to Max(position) where position = 8; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 8 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most ninth place finishes? most ninth place finishes refers to Max(position) where position = 9; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 9 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most tenth place finishes? most tenth place finishes refers to Max(position) where position = 10; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 10 GROUP BY T2.driverId ORDER BY COUNT(*) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.laps > 50 AND T2.dob < '1985-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year BETWEEN 2000 AND 2005
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND T2.milliseconds/1000 < 120
SELECT code FROM drivers WHERE nationality = 'America'
SELECT raceId FROM races WHERE year = 2009
SELECT COUNT(driverId) FROM results WHERE raceId = 18
SELECT driverId, code FROM drivers WHERE nationality = 'Dutch' ORDER BY dob DESC LIMIT 3 /* Answer the following: List the names of the top 5 constructors with the most wins. most wins refers to MAX(wins) */ SELECT name FROM constructors ORDER BY (SELECT SUM(wins) FROM constructorStandings WHERE constructors.constructorId = constructorStandings.constructorId) DESC LIMIT 5 /* Answer the following: What is the average lap time of all races? average lap time refers to AVG(time) */ SELECT AVG(time) FROM lapTimes /* Answer the following: Which driver has the most pit stops? most pit stops refers to MAX(stop) */ SELECT driverId FROM pitStops GROUP BY driverId ORDER BY COUNT(stop) DESC LIMIT 1 /* Answer the following: Which constructor has the most qualifying sessions? most qualifying sessions refers to MAX(qualifyId) */ SELECT constructorId FROM qualifying GROUP BY constructorId ORDER BY COUNT(qualifyId) DESC LIMIT 1 /* Answer the following: What is the total number of races held in USA? USA refers to country = 'USA' */ SELECT COUNT(raceId) FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'USA') /* Answer the following: Which driver has the most number of fastest laps? most number of fastest laps refers to MAX(fastestLap) */ SELECT driverId FROM results GROUP BY driverId ORDER BY COUNT(fastestLap) DESC LIMIT 1 /* Answer the following: Which constructor has the most number of podium finishes? podium finishes refers to position <= 3 */ SELECT constructorId FROM results WHERE position <= 3 GROUP BY constructorId ORDER BY COUNT(position) DESC LIMIT 1 /* Answer the following: Which driver has the most number of DNF (Did Not Finish)? DNF refers to statusId = 4 */ SELECT driverId FROM results WHERE statusId = 4 GROUP BY driverId ORDER BY COUNT(statusId) DESC LIMIT 1 /* Answer the following: Which circuit has the most number of races held? most number of races refers to MAX(raceId) */ SELECT circuitId FROM races GROUP BY circuitId ORDER BY COUNT(raceId) DESC LIMIT 1
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'
SELECT COUNT(driverId) FROM drivers WHERE STRFTIME('%Y', dob) = '1980' AND nationality = 'Australian'
SELECT drivers.forename, drivers.surname, MIN(lapTimes.time) as EarliestLapTime FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY drivers.driverId ORDER BY EarliestLapTime ASC LIMIT 3
SELECT driverRef FROM drivers WHERE nationality = 'German' AND dob IS NOT NULL ORDER BY dob ASC LIMIT 1 /* Answer the following: Which constructor has won the most races? won the most races refers to MAX(wins) */ SELECT constructorRef FROM constructors WHERE constructorId IN (SELECT constructorId FROM constructorStandings ORDER BY wins DESC LIMIT 1) /* Answer the following: Which driver has the fastest lap time? fastest lap time refers to MIN(fastestLapTime) */ SELECT driverRef FROM drivers WHERE driverId IN (SELECT driverId FROM results ORDER BY fastestLapTime ASC LIMIT 1) /* Answer the following: Which circuit is located at the highest altitude? highest altitude refers to MAX(alt) */ SELECT circuitRef FROM circuits ORDER BY alt DESC LIMIT 1 /* Answer the following: Which race had the most pit stops? most pit stops refers to MAX(stop) */ SELECT name FROM races WHERE raceId IN (SELECT raceId FROM pitStops GROUP BY raceId ORDER BY COUNT(stop) DESC LIMIT 1)
SELECT T1.driverId, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE STRFTIME('%Y', T1.dob) = '1971' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime LIMIT 1
SELECT drivers.forename, drivers.surname, MAX(lapTimes.time) AS LatestLapTime FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE STRFTIME('%Y', drivers.dob) < '1982' AND drivers.nationality = 'Spanish' GROUP BY drivers.driverId ORDER BY LatestLapTime DESC LIMIT 10
SELECT year FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE fastestLapTime IS NOT NULL ORDER BY fastestLapTime ASC LIMIT 1 )
SELECT T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.time DESC LIMIT 1 /* Answer the following: Which driver has the lowest points in driver standings? lowest points refers to Min(points); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.points ASC LIMIT 1 /* Answer the following: Which constructor has the lowest points in constructor standings? lowest points refers to Min(points); */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points ASC LIMIT 1 /* Answer the following: Which driver has the longest pit stop duration? longest pit stop duration refers to Max(duration); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.duration DESC LIMIT 1 /* Answer the following: Which constructor has the lowest position in constructor results? lowest position refers to Max(position); */ SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.position DESC LIMIT 1 /* Answer the following: Which driver has the lowest position in results? lowest position refers to Max(position); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.position DESC LIMIT 1 /* Answer the following: Which circuit has the lowest altitude? lowest altitude refers to Min(alt); */ SELECT name FROM circuits ORDER BY alt ASC LIMIT 1 /* Answer the following: Which driver has the lowest number in drivers? lowest number refers to Min(number); */ SELECT forename, surname FROM drivers ORDER BY number ASC LIMIT 1 /* Answer the following: Which constructor has the lowest constructorId in constructors? lowest constructorId refers to Min(constructorId); */ SELECT name FROM constructors ORDER BY constructorId ASC LIMIT 1 /* Answer the following: Which season has the earliest year in seasons? earliest year refers to Min(year); */ SELECT year FROM seasons ORDER BY year ASC LIMIT 1
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5; /* Answer the following: Who is the driver with the most wins in 2010? most wins refers to MAX(wins); */ SELECT driverId FROM driverStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2010) ORDER BY wins DESC LIMIT 1; /* Answer the following: Which constructor has the most points in 2011? most points refers to MAX(points); */ SELECT constructorId FROM constructorStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2011) ORDER BY points DESC LIMIT 1; /* Answer the following: Which driver has the fastest pit stop in 2012? fastest pit stop refers to MIN(milliseconds); */ SELECT driverId FROM pitStops WHERE raceId IN (SELECT raceId FROM races WHERE year = 2012) ORDER BY milliseconds ASC LIMIT 1; /* Answer the following: Which driver has the fastest lap time in 2013? fastest lap time refers to MIN(time); */ SELECT driverId FROM lapTimes WHERE raceId IN (SELECT raceId FROM races WHERE year = 2013) ORDER BY time ASC LIMIT 1; /* Answer the following: Which driver has the most points in 2014? most points refers to MAX(points); */ SELECT driverId FROM driverStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2014) ORDER BY points DESC LIMIT 1; /* Answer the following: Which constructor has the most wins in 2015? most wins refers to MAX(wins); */ SELECT constructorId FROM constructorStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2015) ORDER BY wins DESC LIMIT 1; /* Answer the following: Which driver has the fastest qualifying time in 2016? fastest qualifying time refers to MIN(q1); */ SELECT driverId FROM qualifying WHERE raceId IN (SELECT raceId FROM races WHERE year = 2016) ORDER BY q1 ASC LIMIT 1; /* Answer the following: Which driver has the most wins in 2017? most wins refers to MAX(wins); */ SELECT driverId FROM driverStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2017) ORDER BY wins DESC LIMIT 1; /* Answer the following: Which constructor has the most points in 2018? most points refers to MAX(points); */ SELECT constructorId FROM constructorStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2018) ORDER BY points DESC LIMIT 1; /* Answer the following: Which driver has the fastest pit stop in 2019? fastest pit stop refers to MIN(milliseconds); */ SELECT driverId FROM pitStops WHERE raceId IN (SELECT raceId FROM races WHERE year = 2019) ORDER BY milliseconds ASC LIMIT 1; /* Answer the following: Which driver has the fastest lap time in 2020? fastest lap time refers to MIN(time); */ SELECT driverId FROM lapTimes WHERE raceId IN (SELECT raceId FROM races WHERE year = 2020) ORDER BY time ASC LIMIT 1;
SELECT COUNT(resultId) FROM results WHERE raceId BETWEEN 50 AND 100 AND statusId = 2 AND time IS NOT NULL
SELECT location, lat, lng, COUNT(circuitId) FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng
SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Who is the driver with the most wins? most wins refers to MAX(count(wins)) */ SELECT driverId FROM driverStandings GROUP BY driverId ORDER BY SUM(wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins? most wins refers to MAX(count(wins)) */ SELECT constructorId FROM constructorStandings GROUP BY constructorId ORDER BY SUM(wins) DESC LIMIT 1 /* Answer the following: Which driver has the fastest average lap time? fastest average lap time refers to MIN(AVG(milliseconds)) */ SELECT driverId FROM lapTimes WHERE milliseconds IS NOT NULL GROUP BY driverId ORDER BY AVG(milliseconds) ASC LIMIT 1 /* Answer the following: Which driver has the shortest average pit stop duration? shortest average pit stop duration refers to MIN(AVG(milliseconds)) */ SELECT driverId FROM pitStops WHERE milliseconds IS NOT NULL GROUP BY driverId ORDER BY AVG(milliseconds) ASC LIMIT 1 /* Answer the following: Which driver has the most pole positions? pole position refers to grid = 1; most refers to MAX(count(grid)) */ SELECT driverId FROM results WHERE grid = 1 GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most pole positions? pole position refers to grid = 1; most refers to MAX(count(grid)) */ SELECT constructorId FROM results WHERE grid = 1 GROUP BY constructorId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps? most fastest laps refers to MAX(count(fastestLap)) */ SELECT driverId FROM results WHERE fastestLap IS NOT NULL GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most fastest laps? most fastest laps refers to MAX(count(fastestLap)) */ SELECT constructorId FROM results WHERE fastestLap IS NOT NULL GROUP BY constructorId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes? podium finish refers to positionOrder <= 3; most refers to MAX(count(positionOrder)) */ SELECT driverId FROM results WHERE positionOrder <= 3 GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes? podium finish refers to positionOrder <= 3; most refers to MAX(count(positionOrder)) */ SELECT constructorId FROM results WHERE positionOrder <= 3 GROUP BY constructorId ORDER BY COUNT(*) DESC LIMIT 1
SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q2 IS NOT NULL AND T1.raceId = 23
SELECT T1.year, T2.name, T2.date, T2.time FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year INNER JOIN qualifying AS T3 ON T2.raceId = T3.raceId INNER JOIN drivers AS T4 ON T3.driverId = T4.driverId WHERE T4.dob = ( SELECT MAX(dob) FROM drivers ) ORDER BY T2.date LIMIT 1 /* Answer the following: Who is the youngest driver to have a pit stop? State the name, date and time of the race. youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname, T2.name, T2.date, T2.time FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.raceId INNER JOIN pitStops AS T3 ON T2.raceId = T3.raceId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) ORDER BY T2.date LIMIT 1 /* Answer the following: Who is the youngest driver to have a lap time? State the name, date and time of the race. youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname, T2.name, T2.date, T2.time FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.raceId INNER JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) ORDER BY T2.date LIMIT 1 /* Answer the following: Who is the youngest driver to have a result? State the name, date and time of the race. youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname, T2.name, T2.date, T2.time FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.raceId INNER JOIN results AS T3 ON T2.raceId = T3.raceId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) ORDER BY T2.date LIMIT 1 /* Answer the following: Who is the youngest driver to have a constructor result? State the name, date and time of the race. youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname, T2.name, T2.date, T2.time FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.raceId INNER JOIN constructorResults AS T3 ON T2.raceId = T3.raceId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) ORDER BY T2.date LIMIT 1 /* Answer the following: Who is the youngest driver to have a constructor standing? State the name, date and time of the race. youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname, T2.name, T2.date, T2.time FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.raceId INNER JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) ORDER BY T2.date LIMIT 1 /* Answer the following: Who is the youngest driver to have a driver standing? State the name, date and time of the race. youngest driver refers to Max (year(dob)); */ SELECT T1.forename, T1.surname, T2.name, T2.date, T2.time FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.raceId INNER JOIN driverStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) ORDER BY T2.date LIMIT 1
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'American' AND T2.statusId = 2
SELECT T2.name, T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'Italian' ORDER BY T1.points DESC LIMIT 1
SELECT T2.url FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.constructorId ORDER BY SUM(T1.wins) DESC LIMIT 1 /* Answer the following: Who is the driver with the most fastest laps? introduction driver refers to forename and surname; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T1.fastestLap) DESC LIMIT 1 /* Answer the following: Which circuit has hosted the most races? introduction circuit refers to name; */ SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.circuitId ORDER BY COUNT(T1.raceId) DESC LIMIT 1 /* Answer the following: Which season had the most races? introduction season refers to year; */ SELECT T1.year FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year GROUP BY T1.year ORDER BY COUNT(T1.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions? introduction driver refers to forename and surname; pole positions refers to grid = 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.grid = 1 GROUP BY T1.driverId ORDER BY COUNT(T1.resultId) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes? introduction constructor refers to name; podium finishes refers to positionOrder <= 3; */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.positionOrder <= 3 GROUP BY T1.constructorId ORDER BY COUNT(T1.resultId) DESC LIMIT 1 /* Answer the following: Which driver has the most wins in a single season? introduction driver refers to forename and surname; wins in a single season refers to MAX(COUNT(raceId)) where positionOrder = 1; */ SELECT T2.forename, T2.surname, T1.year FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder = 1 GROUP BY T1.driverId, T1.year ORDER BY COUNT(T1.raceId) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in a single season? introduction constructor refers to name; wins in a single season refers to MAX(COUNT(raceId)) where positionOrder = 1; */ SELECT T2.name, T1.year FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.positionOrder = 1 GROUP BY T1.constructorId, T1.year ORDER BY COUNT(T1.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most second place finishes? introduction driver refers to forename and surname; second place finishes refers to positionOrder = 2; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder = 2 GROUP BY T1.driverId ORDER BY COUNT(T1.resultId) DESC LIMIT 1 /* Answer the following: Which constructor has the most second place finishes? introduction constructor refers to name; second place finishes refers to positionOrder = 2; */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.positionOrder = 2 GROUP BY T1.constructorId ORDER BY COUNT(T1.resultId) DESC LIMIT 1 /* Answer the following: Which driver has the most third place finishes? introduction driver refers to forename and surname; third place finishes refers to positionOrder = 3; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder = 3 GROUP BY T1.driverId ORDER BY COUNT(T1.resultId) DESC LIMIT 1 /* Answer the following: Which constructor has the most third place finishes? introduction constructor refers to name; third place finishes refers to positionOrder = 3; */ SELECT T2.name FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.positionOrder = 3 GROUP BY T1.constructorId ORDER BY COUNT(T1.resultId) DESC LIMIT 1
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'French Grand Prix' AND T2.lap = 3 ORDER BY T2.time DESC LIMIT 1 /* Answer the following: Which constructor has the most wins in the 2010 season? most wins refers to MAX(wins); */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 GROUP BY T1.name ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Who is the driver with the most points in the 2008 season? most points refers to MAX(points); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 GROUP BY T1.driverId ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: What is the average pit stop duration in the 2012 season? average pit stop duration refers to AVG(milliseconds); */ SELECT AVG(T1.milliseconds) FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2012 /* Answer the following: Which circuit has the highest altitude? highest altitude refers to MAX(alt); */ SELECT name FROM circuits ORDER BY alt DESC LIMIT 1 /* Answer the following: Who is the driver with the fastest lap in the 2011 season? fastest lap refers to MIN(fastestLapTime); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2011 ORDER BY T2.fastestLapTime ASC LIMIT 1 /* Answer the following: Which constructor has the most pole positions in the 2009 season? most pole positions refers to MAX(position) in qualifying where position = 1; */ SELECT T1.name FROM constructors AS T1 INNER JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009 AND T2.position = 1 GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Who is the driver with the most fastest laps in the 2007 season? most fastest laps refers to MAX(fastestLap); */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2007 GROUP BY T1.driverId ORDER BY COUNT(T2.fastestLap) DESC LIMIT 1
SELECT T1.name, MIN(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.lap = 1 GROUP BY T1.name ORDER BY MIN(T2.milliseconds) ASC LIMIT 1 /* Answer the following: Who is the driver with the most wins? most wins refers to MAX(wins); */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY SUM(T1.wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points? most points refers to MAX(points); */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId GROUP BY T2.constructorId ORDER BY SUM(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the fastest average lap time? fastest average lap time refers to MIN(AVG(milliseconds)); */ SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY AVG(T1.milliseconds) ASC LIMIT 1 /* Answer the following: Which driver has the most pit stops? most pit stops refers to MAX(count(stop)); */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY COUNT(T1.stop) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions? most pole positions refers to MAX(count(position)); */ SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.position) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps? most fastest laps refers to MAX(count(fastestLap)); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLap IS NOT NULL GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most podium finishes? most podium finishes refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most DNFs (Did Not Finish)? most DNFs refers to MAX(count(statusId)) where statusId is not 1 (Finished); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.statusId != 1 GROUP BY T2.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest lap times? most fastest lap times refers to MAX(count(fastestLapTime)); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLapTime) DESC LIMIT 1 /* Answer the following: Which driver has the most race starts? most race starts refers to MAX(count(raceId)); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY COUNT(T1.raceId) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes? most race finishes refers to MAX(count(statusId)) where statusId is 1 (Finished); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.statusId = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins? most race wins refers to MAX(count(positionOrder)) where positionOrder is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race points? most race points refers to MAX(sum(points)); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T2.driverId ORDER BY SUM(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race podiums? most race podiums refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race fastest laps? most race fastest laps refers to MAX(count(fastestLap)); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLap IS NOT NULL GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most race retirements? most race retirements refers to MAX(count(statusId)) where statusId is not 1 (Finished); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.statusId != 1 GROUP BY T2.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1 /* Answer the following: Which driver has the most race pole positions? most race pole positions refers to MAX(count(grid)) where grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.grid) DESC LIMIT 1 /* Answer the following: Which driver has the most race fastest lap times? most race fastest lap times refers to MAX(count(fastestLapTime)); */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLapTime) DESC LIMIT 1 /* Answer the following: Which driver has the most race starts from pole position? most race starts from pole position refers to MAX(count(grid)) where grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.grid) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the points? most race finishes in the points refers to MAX(count(points)) where points is greater than 0; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.points > 0 GROUP BY T2.driverId ORDER BY COUNT(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 10? most race finishes in the top 10 refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 10; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 10 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 5? most race finishes in the top 5 refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 5; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 5 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes on the podium? most race finishes on the podium refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins from pole position? most race wins from pole position refers to MAX(count(positionOrder)) where positionOrder is 1 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder = 1 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race fastest laps from pole position? most race fastest laps from pole position refers to MAX(count(fastestLap)) where fastestLap is not null and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLap IS NOT NULL AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most race podium finishes from pole position? most race podium finishes from pole position refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race points from pole position? most race points from pole position refers to MAX(sum(points)) where grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.grid = 1 GROUP BY T2.driverId ORDER BY SUM(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the points from pole position? most race finishes in the points from pole position refers to MAX(count(points)) where points is greater than 0 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.points > 0 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 10 from pole position? most race finishes in the top 10 from pole position refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 10 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 10 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 5 from pole position? most race finishes in the top 5 from pole position refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 5 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 5 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race podium finishes from pole position? most race podium finishes from pole position refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins from pole position? most race wins from pole position refers to MAX(count(positionOrder)) where positionOrder is 1 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder = 1 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race fastest laps from pole position? most race fastest laps from pole position refers to MAX(count(fastestLap)) where fastestLap is not null and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLap IS NOT NULL AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most race podium finishes from pole position? most race podium finishes from pole position refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race points from pole position? most race points from pole position refers to MAX(sum(points)) where grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.grid = 1 GROUP BY T2.driverId ORDER BY SUM(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the points from pole position? most race finishes in the points from pole position refers to MAX(count(points)) where points is greater than 0 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.points > 0 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 10 from pole position? most race finishes in the top 10 from pole position refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 10 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 10 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 5 from pole position? most race finishes in the top 5 from pole position refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 5 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 5 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race podium finishes from pole position? most race podium finishes from pole position refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins from pole position? most race wins from pole position refers to MAX(count(positionOrder)) where positionOrder is 1 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder = 1 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race fastest laps from pole position? most race fastest laps from pole position refers to MAX(count(fastestLap)) where fastestLap is not null and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLap IS NOT NULL AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most race podium finishes from pole position? most race podium finishes from pole position refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race points from pole position? most race points from pole position refers to MAX(sum(points)) where grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.grid = 1 GROUP BY T2.driverId ORDER BY SUM(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the points from pole position? most race finishes in the points from pole position refers to MAX(count(points)) where points is greater than 0 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.points > 0 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 10 from pole position? most race finishes in the top 10 from pole position refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 10 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 10 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 5 from pole position? most race finishes in the top 5 from pole position refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 5 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 5 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race podium finishes from pole position? most race podium finishes from pole position refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins from pole position? most race wins from pole position refers to MAX(count(positionOrder)) where positionOrder is 1 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder = 1 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race fastest laps from pole position? most race fastest laps from pole position refers to MAX(count(fastestLap)) where fastestLap is not null and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLap IS NOT NULL AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most race podium finishes from pole position? most race podium finishes from pole position refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race points from pole position? most race points from pole position refers to MAX(sum(points)) where grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.grid = 1 GROUP BY T2.driverId ORDER BY SUM(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the points from pole position? most race finishes in the points from pole position refers to MAX(count(points)) where points is greater than 0 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.points > 0 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 10 from pole position? most race finishes in the top 10 from pole position refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 10 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 10 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 5 from pole position? most race finishes in the top 5 from pole position refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 5 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 5 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race podium finishes from pole position? most race podium finishes from pole position refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins from pole position? most race wins from pole position refers to MAX(count(positionOrder)) where positionOrder is 1 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder = 1 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race fastest laps from pole position? most race fastest laps from pole position refers to MAX(count(fastestLap)) where fastestLap is not null and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLap IS NOT NULL AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.fastestLap) DESC LIMIT 1 /* Answer the following: Which driver has the most race podium finishes from pole position? most race podium finishes from pole position refers to MAX(count(positionOrder)) where positionOrder is 1, 2 or 3 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder IN (1, 2, 3) AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.positionOrder) DESC LIMIT 1 /* Answer the following: Which driver has the most race points from pole position? most race points from pole position refers to MAX(sum(points)) where grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.grid = 1 GROUP BY T2.driverId ORDER BY SUM(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the points from pole position? most race finishes in the points from pole position refers to MAX(count(points)) where points is greater than 0 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.points > 0 AND T1.grid = 1 GROUP BY T2.driverId ORDER BY COUNT(T1.points) DESC LIMIT 1 /* Answer the following: Which driver has the most race finishes in the top 10 from pole position? most race finishes in the top 10 from pole position refers to MAX(count(positionOrder)) where positionOrder is less than or equal to 10 and grid is 1; */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.positionOrder <= 10 AND T1.grid
SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2006 AND T2.name = 'United States Grand Prix' AND T1.rank < 11
SELECT T1.driverId, T1.forename, T1.surname, AVG(T2.duration) AS avg_duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1985' GROUP BY T1.driverId ORDER BY avg_duration ASC LIMIT 5
SELECT T3.forename, T3.surname, T2.time FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.name = 'Canadian Grand Prix' AND T1.year = 2008 AND T2.positionOrder = 1 /* Answer the following: List all the drivers who have won the race at the 'Circuit de Monaco'. 'Circuit de Monaco' refers to name in circuits table; won the race refers to positionOrder = 1 in results table; */ SELECT DISTINCT T3.forename, T3.surname FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN results AS T4 ON T2.raceId = T4.raceId INNER JOIN drivers AS T3 ON T4.driverId = T3.driverId WHERE T1.name = 'Circuit de Monaco' AND T4.positionOrder = 1 /* Answer the following: What is the nationality of the constructor who won the most races in 2010? won the most races refers to the constructor with the most number of positionOrder = 1 in results table in 2010; */ SELECT T3.nationality FROM (SELECT T2.constructorId, COUNT(*) AS wins FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2010 AND T2.positionOrder = 1 GROUP BY T2.constructorId ORDER BY wins DESC LIMIT 1) AS T4 INNER JOIN constructors AS T3 ON T4.constructorId = T3.constructorId /* Answer the following: Who is the driver with the most wins in 2007? most wins refers to the driver with the most number of positionOrder = 1 in results table in 2007; */ SELECT T3.forename, T3.surname FROM (SELECT T2.driverId, COUNT(*) AS wins FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2007 AND T2.positionOrder = 1 GROUP BY T2.driverId ORDER BY wins DESC LIMIT 1) AS T4 INNER JOIN drivers AS T3 ON T4.driverId = T3.driverId /* Answer the following: What is the average pit stop duration in the 2011 season? average pit stop duration refers to the average of milliseconds in pitStops table; 2011 season refers to year = 2011 in races table; */ SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2011
SELECT T2.constructorRef, T2.url FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2009 AND T3.name = 'Singapore Grand Prix' ORDER BY T1.time ASC LIMIT 1
SELECT forename, surname, dob FROM drivers WHERE STRFTIME('%Y', dob) BETWEEN '1981' AND '1991' AND nationality = 'Austrian'
SELECT forename || ' ' || surname AS FullName, url AS WikiPage, dob AS DateOfBirth FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC
SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'
SELECT T2.name, T2.nationality, MAX(T1.points) AS score FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name, T2.nationality ORDER BY score DESC LIMIT 1
SELECT AVG(T1.points) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'
SELECT CAST(COUNT(raceId) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most wins? most wins refers to MAX(wins); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.name ORDER BY SUM(T2.wins) DESC LIMIT 1 /* Answer the following: Which driver has the fastest average lap time? fastest average lap time refers to MIN(AVG(milliseconds)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY AVG(T2.milliseconds) ASC LIMIT 1 /* Answer the following: Which circuit is the most frequently used? most frequently used refers to MAX(COUNT(circuitId)); circuit refers to name */ SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most pole positions? most pole positions refers to MAX(COUNT(grid = 1)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.grid = 1 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which constructor has the most podium finishes? most podium finishes refers to MAX(COUNT(position <= 3)); constructor refers to name */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position <= 3 GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most fastest laps? most fastest laps refers to MAX(COUNT(fastestLap)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLap IS NOT NULL GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most race wins? most race wins refers to MAX(COUNT(position = 1)); driver refers to forename and surname */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which driver has the most points in a single season? most points in a single season refers to MAX(SUM(points)); driver refers to forename and surname */ SELECT T1.forename, T1.surname, T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.driverId, T3.year ORDER BY SUM(T2.points) DESC LIMIT 1 /* Answer the following: Which constructor has the most points in a single season? most points in a single season refers to MAX(SUM(points)); constructor refers to name */ SELECT T1.name, T3.year FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId GROUP BY T1.constructorId, T3.year ORDER BY SUM(T2.points) DESC LIMIT 1
SELECT wins FROM driverStandings WHERE points = 91
SELECT races.name FROM races INNER JOIN results ON races.raceId = results.raceId ORDER BY results.fastestLapTime ASC LIMIT 1
SELECT c.location || ', ' || c.country AS full_location FROM races r JOIN circuits c ON r.circuitId = c.circuitId ORDER BY r.date DESC LIMIT 1;
SELECT T3.forename, T3.surname FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId WHERE T2.year = 2008 AND T4.name = 'Marina Bay Street Circuit' AND T1.position = 1 ORDER BY T1.q3 LIMIT 1
SELECT T1.forename, T1.surname, T1.nationality, T2.name FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.raceId WHERE T1.dob = (SELECT MAX(dob) FROM drivers) LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race? Who refers to forename+surname; youngest driver to have won a race refers to min(subtract(year, dob)) */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 ORDER BY T2.year - SUBSTR(T1.dob, 1, 4) LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race and what is his nationality? Who refers to forename+surname; youngest driver to have won a race refers to min(subtract(year, dob)); nationality refers to nationality */ SELECT T1.forename, T1.surname, T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 ORDER BY T2.year - SUBSTR(T1.dob, 1, 4) LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race and what is the name of the race? Who refers to forename+surname; youngest driver to have won a race refers to min(subtract(year, dob)); name of the race refers to name */ SELECT T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T2.position = 1 ORDER BY T2.year - SUBSTR(T1.dob, 1, 4) LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race and what is the name of the constructor? Who refers to forename+surname; youngest driver to have won a race refers to min(subtract(year, dob)); name of the constructor refers to name */ SELECT T1.forename, T1.surname, T4.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN constructors AS T4 ON T2.constructorId = T4.constructorId WHERE T2.position = 1 ORDER BY T2.year - SUBSTR(T1.dob, 1, 4) LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race and what is the name of the circuit? Who refers to forename+surname; youngest driver to have won a race refers to min(subtract(year, dob)); name of the circuit refers to name */ SELECT T1.forename, T1.surname, T5.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T5 ON T3.circuitId = T5.circuitId WHERE T2.position = 1 ORDER BY T2.year - SUBSTR(T1.dob, 1, 4) LIMIT 1
SELECT COUNT(T1.statusId), T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.statusId = 3 AND T3.name = 'Canadian Grand Prix' GROUP BY T2.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1
SELECT T1.forename, T1.surname, SUM(T3.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T3 ON T1.driverId = T3.driverId GROUP BY T1.driverId, T1.forename, T1.surname ORDER BY T1.dob LIMIT 1 /* Answer the following: Who is the youngest constructor to have won a race? youngest constructor refers to MIN(dob); won a race refers to position = 1 in results table */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 1 ORDER BY T1.dob DESC LIMIT 1 /* Answer the following: Who is the oldest driver to have participated in a race in the UK? oldest driver refers to MIN(dob); participated in a race in the UK refers to country = 'UK' in circuits table */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.driverId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'UK' ORDER BY T1.dob LIMIT 1 /* Answer the following: Who is the youngest driver to have won a race in the 2008 season? youngest driver refers to MAX(dob); won a race in the 2008 season refers to position = 1 and year = 2008 in races table */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T2.position = 1 ORDER BY T1.dob DESC LIMIT 1 /* Answer the following: Who is the oldest constructor to have won a race? oldest constructor refers to MIN(dob); won a race refers to position = 1 in results table */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 1 ORDER BY T1.dob LIMIT 1 /* Answer the following: Who is the youngest driver to have participated in a race in the UK? youngest driver refers to MAX(dob); participated in a race in the UK refers to country = 'UK' in circuits table */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.driverId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'UK' ORDER BY T1.dob DESC LIMIT 1 /* Answer the following: Who is the oldest driver to have won a race in the 2008 season? oldest driver refers to MIN(dob); won a race in the 2008 season refers to position = 1 and year = 2008 in races table */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T2.position = 1 ORDER BY T1.dob LIMIT 1 /* Answer the following: Who is the youngest constructor to have participated in a race? youngest constructor refers to MAX(dob); participated in a race refers to constructorId in results table */ SELECT T1.name FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.dob DESC LIMIT 1 /* Answer the following: Who is the oldest driver to have won a race? oldest driver refers to MIN(dob); won a race refers to position = 1 in results table */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.position = 1 ORDER BY T1.dob LIMIT 1 /* Answer the following: Who is the youngest driver to have participated in a race? youngest driver refers to MAX(dob); participated in a race refers to driverId in results table */ SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T1.dob DESC LIMIT 1
SELECT MAX(duration) FROM pitStops
SELECT MIN(time) FROM lapTimes /* Answer the following: Which driver has the most wins? */ SELECT driverId FROM driverStandings GROUP BY driverId ORDER BY SUM(wins) DESC LIMIT 1 /* Answer the following: Which constructor has the most points? */ SELECT constructorId FROM constructorStandings GROUP BY constructorId ORDER BY SUM(points) DESC LIMIT 1 /* Answer the following: Which year had the most races? */ SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1 /* Answer the following: Which driver has the fastest lap time on average? */ SELECT driverId, AVG(milliseconds) as avg_time FROM lapTimes GROUP BY driverId ORDER BY avg_time ASC LIMIT 1 /* Answer the following: Which circuit is the highest in altitude? */ SELECT name FROM circuits ORDER BY alt DESC LIMIT 1 /* Answer the following: Which driver has the most pit stops? */ SELECT driverId FROM pitStops GROUP BY driverId ORDER BY COUNT(stop) DESC LIMIT 1 /* Answer the following: Which constructor has the most qualifying sessions? */ SELECT constructorId FROM qualifying GROUP BY constructorId ORDER BY COUNT(qualifyId) DESC LIMIT 1 /* Answer the following: Which driver has the most number of fastest laps? */ SELECT driverId FROM results WHERE rank = 1 GROUP BY driverId ORDER BY COUNT(fastestLap) DESC LIMIT 1 /* Answer the following: Which country has the most circuits? */ SELECT country FROM circuits GROUP BY country ORDER BY COUNT(circuitId) DESC LIMIT 1
SELECT MAX(duration) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'
SELECT T3.forename, T3.surname, T2.duration FROM pitStops AS T2 INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId INNER JOIN races AS T1 ON T2.raceId = T1.raceId WHERE T1.year = 2011 AND T1.name = 'Australian Grand Prix'
SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.time ASC LIMIT 1
SELECT T3.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN circuits AS T3 ON T1.raceId = T3.circuitId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2010 season? most wins refers to MAX(wins) */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2010 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which driver had the fastest pit stop in the 2012 season? fastest pit stop refers to MIN(milliseconds) */ SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2012 ORDER BY T1.milliseconds ASC LIMIT 1 /* Answer the following: Which driver had the most points in the 2015 season? most points refers to MAX(points) */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2015 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which constructor had the most points in the 2008 season? most points refers to MAX(points) */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2008 ORDER BY T1.points DESC LIMIT 1 /* Answer the following: Which driver had the fastest lap in the 2011 season? fastest lap refers to MIN(fastestLapTime) */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2011 ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which driver had the most wins in the 2009 season? most wins refers to MAX(wins) */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2009 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which constructor had the most wins in the 2007 season? most wins refers to MAX(wins) */ SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2007 ORDER BY T1.wins DESC LIMIT 1 /* Answer the following: Which driver had the fastest lap in the 2013 season? fastest lap refers to MIN(fastestLapTime) */ SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2013 ORDER BY T1.fastestLapTime ASC LIMIT 1 /* Answer the following: Which driver had the most points in the 2014 season? most points refers to MAX(points) */ SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2014 ORDER BY T1.points DESC LIMIT 1
SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix Circuit'
SELECT T1.name, MIN(T3.time) AS lap_record FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = 'Italy' GROUP BY T1.name /* Answer the following: Please list the drivers who have won the most races in Italy. most races won refers to COUNT(raceId) */ SELECT T1.forename, T1.surname, COUNT(T2.raceId) AS races_won FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.country = 'Italy' AND T2.position = 1 GROUP BY T1.driverId ORDER BY races_won DESC LIMIT 1 /* Answer the following: Please list the constructors who have won the most races in Italy. most races won refers to COUNT(raceId) */ SELECT T1.name, COUNT(T2.raceId) AS races_won FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.country = 'Italy' AND T2.position = 1 GROUP BY T1.constructorId ORDER BY races_won DESC LIMIT 1 /* Answer the following: Please list the drivers who have the most pole positions in Italy. most pole positions refers to COUNT(qualifyId) where position = 1 */ SELECT T1.forename, T1.surname, COUNT(T2.qualifyId) AS pole_positions FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.country = 'Italy' AND T2.position = 1 GROUP BY T1.driverId ORDER BY pole_positions DESC LIMIT 1 /* Answer the following: Please list the constructors who have the most pole positions in Italy. most pole positions refers to COUNT(qualifyId) where position = 1 */ SELECT T1.name, COUNT(T2.qualifyId) AS pole_positions FROM constructors AS T1 INNER JOIN qualifying AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.country = 'Italy' AND T2.position = 1 GROUP BY T1.constructorId ORDER BY pole_positions DESC LIMIT 1 /* Answer the following: Please list the drivers who have the fastest lap times in Italy. fastest lap times refers to MIN(fastestLapTime) */ SELECT T1.forename, T1.surname, MIN(T2.fastestLapTime) AS fastest_lap FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.country = 'Italy' GROUP BY T1.driverId ORDER BY fastest_lap ASC LIMIT 1 /* Answer the following: Please list the constructors who have the fastest lap times in Italy. fastest lap times refers to MIN(fastestLapTime) */ SELECT T1.name, MIN(T2.fastestLapTime) AS fastest_lap FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.country = 'Italy' GROUP BY T1.constructorId ORDER BY fastest_lap ASC LIMIT 1
SELECT T2.year, T2.name FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time = ( SELECT MIN(time) FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId WHERE races.circuitId = ( SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix Circuit' ) )
SELECT T2.duration FROM lapTimes AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.name = 'Austrian Grand Prix Circuit' AND T1.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = T1.raceId)
SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T2.time = '1:29.488'
SELECT AVG(milliseconds) FROM pitStops WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )
SELECT AVG(milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'
SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? Indicate the team's api id. highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which match had the highest number of home team goals? Indicate the match's api id. highest number of home team goals refers to MAX(home_team_goal); */ SELECT match_api_id FROM Match ORDER BY home_team_goal DESC LIMIT 1 /* Answer the following: Which country has the most number of leagues? most number of leagues refers to COUNT(league_id); */ SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: Which player has the highest potential? Indicate the player's api id. highest potential refers to MAX(potential); */ SELECT player_api_id FROM Player_Attributes ORDER BY potential DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation passing? Indicate the team's api id. highest chance creation passing refers to MAX(chanceCreationPassing); */ SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationPassing DESC LIMIT 1 /* Answer the following: Which match had the highest number of away team goals? Indicate the match's api id. highest number of away team goals refers to MAX(away_team_goal); */ SELECT match_api_id FROM Match ORDER BY away_team_goal DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? Indicate the player's api id. highest free kick accuracy refers to MAX(free_kick_accuracy); */ SELECT player_api_id FROM Player_Attributes ORDER BY free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure? Indicate the team's api id. highest defence pressure refers to MAX(defencePressure); */ SELECT team_api_id FROM Team_Attributes ORDER BY defencePressure DESC LIMIT 1 /* Answer the following: Which match had the highest total number of goals? Indicate the match's api id. highest total number of goals refers to MAX(home_team_goal + away_team_goal); */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1
SELECT player_name, height FROM Player ORDER BY height DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? Indicate the team's name. highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country has the most leagues? Indicate the country's name. most leagues refers to COUNT(league_id); */ SELECT name FROM Country INNER JOIN League ON Country.id = League.country_id GROUP BY name ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? Indicate his name. highest overall rating refers to MAX(overall_rating); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: Which match had the highest number of home team goals? Indicate the match's id. highest number of home team goals refers to MAX(home_team_goal); */ SELECT match_api_id FROM Match ORDER BY home_team_goal DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation shooting? Indicate the team's name. highest chance creation shooting refers to MAX(chanceCreationShooting); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY chanceCreationShooting DESC LIMIT 1 /* Answer the following: Which player has the highest potential? Indicate his name. highest potential refers to MAX(potential); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY potential DESC LIMIT 1 /* Answer the following: Which match had the highest number of away team goals? Indicate the match's id. highest number of away team goals refers to MAX(away_team_goal); */ SELECT match_api_id FROM Match ORDER BY away_team_goal DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? Indicate his name. highest free kick accuracy refers to MAX(free_kick_accuracy); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure? Indicate the team's name. highest defence pressure refers to MAX(defencePressure); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY defencePressure DESC LIMIT 1
SELECT preferred_foot FROM Player_Attributes ORDER BY potential ASC LIMIT 1 /* Answer the following: What is the name of the team with the lowest build up play speed? lowest build up play speed refers to MIN(buildUpPlaySpeed); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed ASC LIMIT 1 /* Answer the following: What is the name of the country where the league with the least number of matches is located? least number of matches refers to MIN(COUNT(match_api_id)); */ SELECT T3.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.id GROUP BY T1.league_id ORDER BY COUNT(T1.match_api_id) ASC LIMIT 1 /* Answer the following: What is the name of the player with the lowest overall rating? lowest overall rating refers to MIN(overall_rating); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating ASC LIMIT 1 /* Answer the following: What is the name of the team with the lowest defence pressure? lowest defence pressure refers to MIN(defencePressure); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defencePressure ASC LIMIT 1 /* Answer the following: What is the season with the least number of matches? least number of matches refers to MIN(COUNT(match_api_id)); */ SELECT season FROM Match GROUP BY season ORDER BY COUNT(match_api_id) ASC LIMIT 1 /* Answer the following: What is the name of the player with the lowest sprint speed? lowest sprint speed refers to MIN(sprint_speed); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.sprint_speed ASC LIMIT 1 /* Answer the following: What is the name of the team with the lowest chance creation shooting? lowest chance creation shooting refers to MIN(chanceCreationShooting); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.chanceCreationShooting ASC LIMIT 1 /* Answer the following: What is the name of the player with the lowest strength? lowest strength refers to MIN(strength); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.strength ASC LIMIT 1 /* Answer the following: What is the name of the team with the lowest build up play passing? lowest build up play passing refers to MIN(buildUpPlayPassing); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlayPassing ASC LIMIT 1
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low' /* Answer the following: How many matches were played in the 2014/2015 season? season = '2014/2015'; matches refer to match_api_id; */ SELECT COUNT(match_api_id) FROM Match WHERE season = '2014/2015' /* Answer the following: How many teams have a build up play speed of over 70? build up play speed of over 70 refers to buildUpPlaySpeed > 70; teams refer to team_api_id; */ SELECT COUNT(DISTINCT team_api_id) FROM Team_Attributes WHERE buildUpPlaySpeed > 70 /* Answer the following: How many players have a height of over 190 cm and a weight of over 80 kg? height of over 190 cm refers to height > 190; weight of over 80 kg refers to weight > 80; players refer to player_api_id; */ SELECT COUNT(DISTINCT player_api_id) FROM Player WHERE height > 190 AND weight > 80 /* Answer the following: How many leagues are there in the country with the country_id of 1? country_id of 1 refers to country_id = 1; leagues refer to league_id; */ SELECT COUNT(DISTINCT league_id) FROM League WHERE country_id = 1 /* Answer the following: How many teams have a defence pressure of over 60? defence pressure of over 60 refers to defencePressure > 60; teams refer to team_api_id; */ SELECT COUNT(DISTINCT team_api_id) FROM Team_Attributes WHERE defencePressure > 60 /* Answer the following: How many matches were there where the home team scored more than 3 goals? home team scored more than 3 goals refers to home_team_goal > 3; matches refer to match_api_id; */ SELECT COUNT(match_api_id) FROM Match WHERE home_team_goal > 3 /* Answer the following: How many players have a sprint speed of over 80? sprint speed of over 80 refers to sprint_speed > 80; players refer to player_api_id; */ SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE sprint_speed > 80 /* Answer the following: How many teams have a build up play passing of over 60? build up play passing of over 60 refers to buildUpPlayPassing > 60; teams refer to team_api_id; */ SELECT COUNT(DISTINCT team_api_id) FROM Team_Attributes WHERE buildUpPlayPassing > 60 /* Answer the following: How many matches were there where the away team scored more than 2 goals? away team scored more than 2 goals refers to away_team_goal > 2; matches refer to match_api_id; */ SELECT COUNT(match_api_id) FROM Match WHERE away_team_goal > 2
SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1 /* Answer the following: Who is the player with the highest overall rating? player with the highest overall rating refers to MAX(overall_rating); who refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which team scored the most goals in 2016? team that scored the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 refers to season = '2015/2016'; */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' GROUP BY T2.team_long_name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1 /* Answer the following: Which country had the most goals in the 2016 season? country that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016'; */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1 /* Answer the following: Which player has the highest potential? player with the highest potential refers to MAX(potential); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.potential DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? team with the highest build up play speed refers to MAX(buildUpPlaySpeed); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? player with the highest free kick accuracy refers to MAX(free_kick_accuracy); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure? team with the highest defence pressure refers to MAX(defencePressure); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defencePressure DESC LIMIT 1 /* Answer the following: Which player has the highest agility? player with the highest agility refers to MAX(agility); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.agility DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation passing? team with the highest chance creation passing refers to MAX(chanceCreationPassing); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.chanceCreationPassing DESC LIMIT 1 /* Answer the following: Which player has the highest reactions? player with the highest reactions refers to MAX(reactions); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.reactions DESC LIMIT 1 /* Answer the following: Which team has the highest build up play passing? team with the highest build up play passing refers to MAX(buildUpPlayPassing); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlayPassing DESC LIMIT 1 /* Answer the following: Which player has the highest shot power? player with the highest shot power refers to MAX(shot_power); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.shot_power DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation shooting? team with the highest chance creation shooting refers to MAX(chanceCreationShooting); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.chanceCreationShooting DESC LIMIT 1 /* Answer the following: Which player has the highest long shots? player with the highest long shots refers to MAX(long_shots); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.long_shots DESC LIMIT 1 /* Answer the following: Which team has the highest defence aggression? team with the highest defence aggression refers to MAX(defenceAggression); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defenceAggression DESC LIMIT 1 /* Answer the following: Which player has the highest interceptions? player with the highest interceptions refers to MAX(interceptions); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.interceptions DESC LIMIT 1 /* Answer the following: Which team has the highest defence team width? team with the highest defence team width refers to MAX(defenceTeamWidth); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defenceTeamWidth DESC LIMIT 1 /* Answer the following: Which player has the highest penalties? player with the highest penalties refers to MAX(penalties); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.penalties DESC LIMIT 1 /* Answer the following: Which team has the highest build up play dribbling? team with the highest build up play dribbling refers to MAX(buildUpPlayDribbling); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlayDribbling DESC LIMIT 1 /* Answer the following: Which player has the highest marking? player with the highest marking refers to MAX(marking); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.marking DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation crossing? team with the highest chance creation crossing refers to MAX(chanceCreationCrossing); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.chanceCreationCrossing DESC LIMIT 1 /* Answer the following: Which player has the highest standing tackle? player with the highest standing tackle refers to MAX(standing_tackle); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.standing_tackle DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed class? team with the highest build up play speed class refers to MAX(buildUpPlaySpeedClass); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeedClass DESC LIMIT 1 /* Answer the following: Which player has the highest sliding tackle? player with the highest sliding tackle refers to MAX(sliding_tackle); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.sliding_tackle DESC LIMIT 1 /* Answer the following: Which team has the highest gk diving? team with the highest gk diving refers to MAX(gk_diving); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Player_Attributes AS T1 INNER JOIN Team AS T2 ON T1.player_api_id = T2.team_api_id ORDER BY T1.gk_diving DESC LIMIT 1 /* Answer the following: Which player has the highest gk handling? player with the highest gk handling refers to MAX(gk_handling); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.gk_handling DESC LIMIT 1 /* Answer the following: Which team has the highest gk kicking? team with the highest gk kicking refers to MAX(gk_kicking); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Player_Attributes AS T1 INNER JOIN Team AS T2 ON T1.player_api_id = T2.team_api_id ORDER BY T1.gk_kicking DESC LIMIT 1 /* Answer the following: Which player has the highest gk positioning? player with the highest gk positioning refers to MAX(gk_positioning); which player refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.gk_positioning DESC LIMIT 1 /* Answer the following: Which team has the highest gk reflexes? team with the highest gk reflexes refers to MAX(gk_reflexes); which team refers to team_long_name; */ SELECT T2.team_long_name FROM Player_Attributes AS T1 INNER JOIN Team AS T2 ON T1.player_api_id = T2.team_api_id ORDER BY T1.gk_reflexes DESC LIMIT 1
SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' GROUP BY T1.home_team_api_id ORDER BY SUM(CASE WHEN T1.home_team_goal < T1.away_team_goal THEN 1 ELSE 0 END) ASC LIMIT 1 /* Answer the following: Who is the player with the highest overall rating in 2016? highest overall rating refers to max(overall_rating); in 2016 refers to date LIKE '2016%' */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '2016%' ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which team had the highest build up play speed in 2015? highest build up play speed refers to max(buildUpPlaySpeed); in 2015 refers to date LIKE '2015%' */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.date LIKE '2015%' ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country had the most matches in the 2014 season? most matches refers to COUNT(match_api_id); 2014 season refers to season = '2013/2014' */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.season = '2013/2014' GROUP BY T1.country_id ORDER BY COUNT(T1.match_api_id) DESC LIMIT 1 /* Answer the following: Which league had the most goals in the 2015 season? most goals refers to SUM(home_team_goal + away_team_goal); 2015 season refers to season = '2014/2015' */ SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2014/2015' GROUP BY T1.league_id ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1
SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.penalties DESC LIMIT 10 /* Answer the following: List the names of the top 5 teams with the highest build up play speed. team name refers to team_long_name; highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 5 /* Answer the following: Identify the country with the most number of leagues. country refers to country_name; most number of leagues refers to MAX(count(League)) */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which season had the most number of matches? most number of matches refers to MAX(count(Match)) */ SELECT season FROM Match GROUP BY season ORDER BY COUNT(id) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? player refers to player_name; highest overall rating refers to MAX(overall_rating) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure? team refers to team_long_name; highest defence pressure refers to MAX(defencePressure) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defencePressure DESC LIMIT 1 /* Answer the following: Which country has the most number of teams? country refers to country_name; most number of teams refers to MAX(count(Team)) */ SELECT T2.name FROM Team AS T1 INNER JOIN Country AS T2 ON T1.id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which player has the highest sprint speed? player refers to player_name; highest sprint speed refers to MAX(sprint_speed) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.sprint_speed DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation shooting? team refers to team_long_name; highest chance creation shooting refers to MAX(chanceCreationShooting) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.chanceCreationShooting DESC LIMIT 1 /* Answer the following: Which player has the highest shot power? player refers to player_name; highest shot power refers to MAX(shot_power) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.shot_power DESC LIMIT 1
SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN League AS T3 ON T1.league_id = T3.id WHERE T3.name = 'Scotland Premier League' AND T1.season = '2009/2010' AND T1.away_team_goal > T1.home_team_goal GROUP BY T1.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Who is the player with the highest overall rating in 2010? highest overall rating refers to MAX(overall_rating); in 2010 refers to date LIKE '2010%'; player refers to player_api_id */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '2010%' ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed in 2015? highest build up play speed refers to MAX(buildUpPlaySpeed); in 2015 refers to date LIKE '2015%'; team refers to team_api_id */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.date LIKE '2015%' ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to MAX(COUNT(League.id)); country refers to Country.name */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T1.country_id ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which player scored the most goals in home games during the 2011 season? most goals in home games refers to MAX(home_team_goal); during the 2011 season refers to season = '2011/2012'; player refers to home_player_1, home_player_2, ..., home_player_11 */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id WHERE T1.season = '2011/2012' GROUP BY T2.player_api_id ORDER BY SUM(T1.home_team_goal) DESC LIMIT 1
SELECT T1.team_long_name, T2.buildUpPlaySpeed FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.buildUpPlaySpeed DESC LIMIT 4 /* Answer the following: What is the name of the player with the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1 /* Answer the following: What is the name of the country with the most leagues? most leagues refers to COUNT(league_id); */ SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id GROUP BY T2.country_id ORDER BY COUNT(T2.id) DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest defence pressure? highest defence pressure refers to MAX(defencePressure); */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.defencePressure DESC LIMIT 1 /* Answer the following: What is the name of the team with the most home goals? most home goals refers to SUM(home_team_goal); */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id GROUP BY T2.home_team_api_id ORDER BY SUM(T2.home_team_goal) DESC LIMIT 1 /* Answer the following: What is the name of the team with the most away goals? most away goals refers to SUM(away_team_goal); */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id GROUP BY T2.away_team_api_id ORDER BY SUM(T2.away_team_goal) DESC LIMIT 1 /* Answer the following: What is the name of the player with the highest potential? highest potential refers to MAX(potential); */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.potential DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest chance creation passing? highest chance creation passing refers to MAX(chanceCreationPassing); */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.chanceCreationPassing DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest defence pressure? highest defence pressure refers to MAX(defencePressure); */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.defencePressure DESC LIMIT 1
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' AND T1.home_team_goal = T1.away_team_goal GROUP BY T1.league_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.birthday), T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND T2.date >= '2013-01-01 00:00:00' AND T2.date <= '2015-12-31 00:00:00'
SELECT League.name, COUNT(Match.league_id) AS Matches_Played FROM Match JOIN League ON Match.league_id = League.id GROUP BY Match.league_id ORDER BY Matches_Played DESC LIMIT 1
SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'
SELECT player_api_id FROM Player_Attributes WHERE substr(date,1,4) = '2010' ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: List the team's api id which had the highest build up play speed in 2015. highest build up play speed refers to MAX(buildUpPlaySpeed); in 2015 refers to substr(date,1,4) = '2015'; */ SELECT team_api_id FROM Team_Attributes WHERE substr(date,1,4) = '2015' ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: List the match's api id which had the most goals in 2011. most goals refers to MAX(home_team_goal + away_team_goal); in 2011 refers to substr(date,1,4) = '2011'; */ SELECT match_api_id FROM Match WHERE substr(date,1,4) = '2011' ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: List the league's id which had the most matches in 2012. most matches refers to MAX(COUNT(match_api_id)); in 2012 refers to substr(date,1,4) = '2012'; */ SELECT league_id FROM Match WHERE substr(date,1,4) = '2012' GROUP BY league_id ORDER BY COUNT(match_api_id) DESC LIMIT 1 /* Answer the following: List the country's id which had the most leagues in 2013. most leagues refers to MAX(COUNT(league_id)); in 2013 refers to substr(date,1,4) = '2013'; */ SELECT country_id FROM League WHERE substr(date,1,4) = '2013' GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: List the player's api id who had the highest potential in 2014. highest potential refers to MAX(potential); in 2014 refers to substr(date,1,4) = '2014'; */ SELECT player_api_id FROM Player_Attributes WHERE substr(date,1,4) = '2014' ORDER BY potential DESC LIMIT 1 /* Answer the following: List the team's api id which had the highest chance creation passing in 2015. highest chance creation passing refers to MAX(chanceCreationPassing); in 2015 refers to substr(date,1,4) = '2015'; */ SELECT team_api_id FROM Team_Attributes WHERE substr(date,1,4) = '2015' ORDER BY chanceCreationPassing DESC LIMIT 1 /* Answer the following: List the match's api id which had the most fouls committed in 2011. most fouls committed refers to MAX(foulcommit); in 2011 refers to substr(date,1,4) = '2011'; */ SELECT match_api_id FROM Match WHERE substr(date,1,4) = '2011' ORDER BY foulcommit DESC LIMIT 1 /* Answer the following: List the league's id which had the most teams in 2012. most teams refers to MAX(COUNT(team_api_id)); in 2012 refers to substr(date,1,4) = '2012'; */ SELECT league_id FROM Team WHERE substr(date,1,4) = '2012' GROUP BY league_id ORDER BY COUNT(team_api_id) DESC LIMIT 1 /* Answer the following: List the country's id which had the most players in 2013. most players refers to MAX(COUNT(player_api_id)); in 2013 refers to substr(date,1,4) = '2013'; */ SELECT country_id FROM Player WHERE substr(date,1,4) = '2013' GROUP BY country_id ORDER BY COUNT(player_api_id) DESC LIMIT 1
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59
SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE strftime('%Y', T1.date) = '2012' AND T1.buildUpPlayPassing > ( SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE buildUpPlayPassing IS NOT NULL AND strftime('%Y', date) = '2012' )
SELECT CAST(SUM(CASE WHEN T1.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.player_fifa_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'
SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) as total_goals FROM League L JOIN Match M ON L.id = M.league_id GROUP BY L.name ORDER BY total_goals ASC LIMIT 5 /* Answer the following: List the top 5 players with the highest overall rating. highest overall rating refers to MAX(overall_rating); */ SELECT P.player_name, MAX(A.overall_rating) as max_rating FROM Player P JOIN Player_Attributes A ON P.player_api_id = A.player_api_id GROUP BY P.player_name ORDER BY max_rating DESC LIMIT 5 /* Answer the following: List the top 5 teams with the highest average build up play speed. highest average build up play speed refers to MAX(AVG(buildUpPlaySpeed)); */ SELECT T.team_long_name, AVG(A.buildUpPlaySpeed) as avg_speed FROM Team T JOIN Team_Attributes A ON T.team_api_id = A.team_api_id GROUP BY T.team_long_name ORDER BY avg_speed DESC LIMIT 5 /* Answer the following: List the top 5 countries with the most number of leagues. most number of leagues refers to MAX(COUNT(league_id)); */ SELECT C.name, COUNT(L.id) as num_leagues FROM Country C JOIN League L ON C.id = L.country_id GROUP BY C.name ORDER BY num_leagues DESC LIMIT 5 /* Answer the following: List the top 5 players with the most number of matches played. most number of matches played refers to MAX(COUNT(match_api_id)); */ SELECT P.player_name, COUNT(M.id) as num_matches FROM Player P JOIN Match M ON P.player_api_id = M.home_player_1 OR P.player_api_id = M.home_player_2 OR P.player_api_id = M.home_player_3 OR P.player_api_id = M.home_player_4 OR P.player_api_id = M.home_player_5 OR P.player_api_id = M.home_player_6 OR P.player_api_id = M.home_player_7 OR P.player_api_id = M.home_player_8 OR P.player_api_id = M.home_player_9 OR P.player_api_id = M.home_player_10 OR P.player_api_id = M.home_player_11 OR P.player_api_id = M.away_player_1 OR P.player_api_id = M.away_player_2 OR P.player_api_id = M.away_player_3 OR P.player_api_id = M.away_player_4 OR P.player_api_id = M.away_player_5 OR P.player_api_id = M.away_player_6 OR P.player_api_id = M.away_player_7 OR P.player_api_id = M.away_player_8 OR P.player_api_id = M.away_player_9 OR P.player_api_id = M.away_player_10 OR P.player_api_id = M.away_player_11 GROUP BY P.player_name ORDER BY num_matches DESC LIMIT 5
SELECT AVG(T1.long_shots) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Ahmed Samir Farag'
SELECT T1.player_name, AVG(T2.heading_accuracy) AS avg_heading_accuracy FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY avg_heading_accuracy DESC LIMIT 10 /* Answer the following: What is the average overall rating of the players from the team with the highest build up play speed? average overall rating = DIVIDE(SUM(overall_rating), COUNT(player_fifa_api_id)); highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT AVG(T3.overall_rating) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Player_Attributes AS T3 ON T2.team_api_id = T3.player_api_id WHERE T1.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) /* Answer the following: Which country has the most number of leagues? most number of leagues refers to MAX(COUNT(league_id)) */ SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY COUNT(T2.id) DESC LIMIT 1 /* Answer the following: What is the average number of goals scored by the home team in matches where the away team scored more than 2 goals? average number of goals scored by the home team = DIVIDE(SUM(home_team_goal), COUNT(match_api_id)); away team scored more than 2 goals refers to away_team_goal > 2 */ SELECT AVG(home_team_goal) FROM Match WHERE away_team_goal > 2 /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating) */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date >= '2014-01-01 00:00:00' AND T1.date <= '2014-12-31 23:59:59' AND T1.chanceCreationPassing < ( SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date >= '2014-01-01 00:00:00' AND date <= '2014-12-31 23:59:59' ) ORDER BY T1.chanceCreationPassing DESC /* Answer the following: List the names of the players who have played for the team with team_api_id 8191 and have an overall rating greater than 75. names of the players refers to player_name; played for the team with team_api_id 8191 refers to home_team_api_id = 8191 OR away_team_api_id = 8191; overall rating greater than 75 refers to overall_rating > 75 */ SELECT DISTINCT T2.player_name FROM Match AS T1 INNER JOIN Player_Attributes AS T3 ON T1.home_player_1 = T3.player_api_id OR T1.home_player_2 = T3.player_api_id OR T1.home_player_3 = T3.player_api_id OR T1.home_player_4 = T3.player_api_id OR T1.home_player_5 = T3.player_api_id OR T1.home_player_6 = T3.player_api_id OR T1.home_player_7 = T3.player_api_id OR T1.home_player_8 = T3.player_api_id OR T1.home_player_9 = T3.player_api_id OR T1.home_player_10 = T3.player_api_id OR T1.home_player_11 = T3.player_api_id OR T1.away_player_1 = T3.player_api_id OR T1.away_player_2 = T3.player_api_id OR T1.away_player_3 = T3.player_api_id OR T1.away_player_4 = T3.player_api_id OR T1.away_player_5 = T3.player_api_id OR T1.away_player_6 = T3.player_api_id OR T1.away_player_7 = T3.player_api_id OR T1.away_player_8 = T3.player_api_id OR T1.away_player_9 = T3.player_api_id OR T1.away_player_10 = T3.player_api_id OR T1.away_player_11 = T3.player_api_id INNER JOIN Player AS T2 ON T3.player_api_id = T2.player_api_id WHERE (T1.home_team_api_id = 8191 OR T1.away_team_api_id = 8191) AND T3.overall_rating > 75 /* Answer the following: List the names of the countries where the total number of home goals is greater than the total number of away goals. names of the countries refers to name; total number of home goals is greater than the total number of away goals refers to SUM(home_team_goal) > SUM(away_team_goal) */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T1.country_id HAVING SUM(T1.home_team_goal) > SUM(T1.away_team_goal) /* Answer the following: List the names of the players who have a higher overall rating than their potential. names of the players refers to player_name; higher overall rating than their potential refers to overall_rating > potential */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > T1.potential /* Answer the following: List the names of the teams where the total number of home goals is greater than the total number of away goals. names of the teams refers to team_long_name; total number of home goals is greater than the total number of away goals refers to SUM(home_team_goal) > SUM(away_team_goal) */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id GROUP BY T1.home_team_api_id HAVING SUM(T1.home_team_goal) > SUM(T1.away_team_goal)
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers' /* Answer the following: What is the overall rating of the player Lionel Messi? overall rating refers to overall_rating; Lionel Messi refers to player_name = 'Lionel Messi'; */ SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Lionel Messi') /* Answer the following: Which country does the league 'Premier League' belong to? country refers to name; Premier League refers to name = 'Premier League'; */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Premier League' /* Answer the following: How many goals did the home team score in the match with the match_api_id 198992? home team score refers to home_team_goal; match with the match_api_id 198992 refers to match_api_id = 198992; */ SELECT home_team_goal FROM Match WHERE match_api_id = 198992 /* Answer the following: What is the build up play speed of the team with the team_api_id 9825? build up play speed refers to buildUpPlaySpeed; team with the team_api_id 9825 refers to team_api_id = 9825; */ SELECT buildUpPlaySpeed FROM Team_Attributes WHERE team_api_id = 9825
SELECT player_name FROM Player WHERE SUBSTR(birthday,1,4) = '1970' AND SUBSTR(birthday,6,2) = '10'
SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Franco Zennaro') /* Answer the following: How many goals did the home team score in the match with the match_api_id of 198872? */ SELECT `home_team_goal` FROM `Match` WHERE `match_api_id` = 198872 /* Answer the following: What is the name of the team with the team_api_id of 9987? */ SELECT `team_long_name` FROM `Team` WHERE `team_api_id` = 9987 /* Answer the following: What is the build up play speed of the team with the team_api_id of 9987? */ SELECT `buildUpPlaySpeed` FROM `Team_Attributes` WHERE `team_api_id` = 9987 /* Answer the following: What is the name of the country with the country_id of 1? */ SELECT `name` FROM `Country` WHERE `id` = 1 /* Answer the following: What is the name of the league with the league_id of 1? */ SELECT `name` FROM `League` WHERE `id` = 1 /* Answer the following: How many matches were played in the season of 2008/2009? */ SELECT COUNT(*) FROM `Match` WHERE `season` = '2008/2009'
SELECT buildUpPlayPositioningClass FROM Team_Attributes WHERE team_api_id = ( SELECT team_api_id FROM Team WHERE team_long_name = 'ADO Den Haag' )
SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francois Affolter') AND date = '2014-09-18 00:00:00' /* Answer the following: What is the average overall rating of the team 'FC Barcelona' on 2015/5/5? 'FC Barcelona' refers to team_long_name = 'FC Barcelona'; on 2015/5/5 refers to date = '2015-05-05 00:00:00'; overall rating refers to overall_rating; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT home_player_1 FROM Match WHERE home_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'FC Barcelona') AND date = '2015-05-05 00:00:00') /* Answer the following: What is the build up play speed of the team 'FC Barcelona' on 2015/5/5? 'FC Barcelona' refers to team_long_name = 'FC Barcelona'; on 2015/5/5 refers to date = '2015-05-05 00:00:00'; build up play speed refers to buildUpPlaySpeed; */ SELECT buildUpPlaySpeed FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'FC Barcelona') AND date = '2015-05-05 00:00:00' /* Answer the following: What is the name of the league in which the match with the match_api_id 198992 took place? match_api_id 198992 refers to match_api_id = 198992; name of the league refers to name; */ SELECT name FROM League WHERE id = (SELECT league_id FROM Match WHERE match_api_id = 198992) /* Answer the following: What is the name of the country in which the match with the match_api_id 198992 took place? match_api_id 198992 refers to match_api_id = 198992; name of the country refers to name; */ SELECT name FROM Country WHERE id = (SELECT country_id FROM Match WHERE match_api_id = 198992)
SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011' /* Answer the following: How many matches were played in the league 'Premier League' in the season 2011/2012? 'Premier League' refers to name = 'Premier League'; season 2011/2012 refers to season = '2011/2012' */ SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Premier League') AND season = '2011/2012' /* Answer the following: What is the average build up play speed of the team 'FC Barcelona' in year 2015? 'FC Barcelona' refers to team_long_name = 'FC Barcelona'; in year 2015 refers to strftime('%Y', date) = '2015'; */ SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'FC Barcelona') AND strftime('%Y', date) = '2015' /* Answer the following: How many goals did the home team score in the match with match_api_id 198992? match_api_id 198992 refers to match_api_id = 198992; */ SELECT home_team_goal FROM Match WHERE match_api_id = 198992 /* Answer the following: What is the name of the country where the league 'Bundesliga' is played? 'Bundesliga' refers to name = 'Bundesliga'; */ SELECT name FROM Country WHERE id = (SELECT country_id FROM League WHERE name = 'Bundesliga') /* Answer the following: What is the height and weight of the player with player_api_id 505942? player_api_id 505942 refers to player_api_id = 505942; */ SELECT height, weight FROM Player WHERE player_api_id = 505942 /* Answer the following: What is the average overall rating of all players in year 2010? in year 2010 refers to strftime('%Y', date) = '2010'; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE strftime('%Y', date) = '2010' /* Answer the following: How many matches were played in the country 'Spain' in the season 2012/2013? 'Spain' refers to name = 'Spain'; season 2012/2013 refers to season = '2012/2013' */ SELECT COUNT(*) FROM Match WHERE country_id = (SELECT id FROM Country WHERE name = 'Spain') AND season = '2012/2013' /* Answer the following: What is the team long name and short name of the team with team_api_id 9825? team_api_id 9825 refers to team_api_id = 9825; */ SELECT team_long_name, team_short_name FROM Team WHERE team_api_id = 9825 /* Answer the following: What is the preferred foot of the player with player_fifa_api_id 218353? player_fifa_api_id 218353 refers to player_fifa_api_id = 218353; */ SELECT preferred_foot FROM Player_Attributes WHERE player_fifa_api_id = 218353
SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Scotland Premier League' AND T1.season = '2015/2016'
SELECT T1.preferred_foot FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.birthday DESC LIMIT 1 /* Answer the following: What is the name of the youngest player's team? youngest player refers to latest birthday; team refers to team_long_name */ SELECT T3.team_long_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_6 OR T1.player_api_id = T2.home_player_7 OR T1.player_api_id = T2.home_player_8 OR T1.player_api_id = T2.home_player_9 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 OR T1.player_api_id = T2.away_player_1 OR T1.player_api_id = T2.away_player_2 OR T1.player_api_id = T2.away_player_3 OR T1.player_api_id = T2.away_player_4 OR T1.player_api_id = T2.away_player_5 OR T1.player_api_id = T2.away_player_6 OR T1.player_api_id = T2.away_player_7 OR T1.player_api_id = T2.away_player_8 OR T1.player_api_id = T2.away_player_9 OR T1.player_api_id = T2.away_player_10 OR T1.player_api_id = T2.away_player_11 INNER JOIN Team AS T3 ON T2.home_team_api_id = T3.team_api_id OR T2.away_team_api_id = T3.team_api_id ORDER BY T1.birthday DESC LIMIT 1 /* Answer the following: What is the name of the youngest player's country? youngest player refers to latest birthday; country refers to name */ SELECT T3.name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_6 OR T1.player_api_id = T2.home_player_7 OR T1.player_api_id = T2.home_player_8 OR T1.player_api_id = T2.home_player_9 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 OR T1.player_api_id = T2.away_player_1 OR T1.player_api_id = T2.away_player_2 OR T1.player_api_id = T2.away_player_3 OR T1.player_api_id = T2.away_player_4 OR T1.player_api_id = T2.away_player_5 OR T1.player_api_id = T2.away_player_6 OR T1.player_api_id = T2.away_player_7 OR T1.player_api_id = T2.away_player_8 OR T1.player_api_id = T2.away_player_9 OR T1.player_api_id = T2.away_player_10 OR T1.player_api_id = T2.away_player_11 INNER JOIN Country AS T3 ON T2.country_id = T3.id ORDER BY T1.birthday DESC LIMIT 1 /* Answer the following: What is the name of the youngest player's league? youngest player refers to latest birthday; league refers to name */ SELECT T3.name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_6 OR T1.player_api_id = T2.home_player_7 OR T1.player_api_id = T2.home_player_8 OR T1.player_api_id = T2.home_player_9 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 OR T1.player_api_id = T2.away_player_1 OR T1.player_api_id = T2.away_player_2 OR T1.player_api_id = T2.away_player_3 OR T1.player_api_id = T2.away_player_4 OR T1.player_api_id = T2.away_player_5 OR T1.player_api_id = T2.away_player_6 OR T1.player_api_id = T2.away_player_7 OR T1.player_api_id = T2.away_player_8 OR T1.player_api_id = T2.away_player_9 OR T1.player_api_id = T2.away_player_10 OR T1.player_api_id = T2.away_player_11 INNER JOIN League AS T3 ON T2.league_id = T3.id ORDER BY T1.birthday DESC LIMIT 1
SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE potential = ( SELECT MAX(potential) FROM Player_Attributes ) )
SELECT COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight < 130 AND T2.preferred_foot = 'left'
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Risky' /* Answer the following: List the players who have a potential of 90 and above. potential refers to potential; potential >= 90; players refers to player_name; */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential >= 90 /* Answer the following: List the countries where the league's name is 'Premier League'. league's name refers to name; name = 'Premier League'; countries refers to Country.name; */ SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Premier League' /* Answer the following: List the matches where the home team scored more than 5 goals. home team scored more than 5 goals refers to home_team_goal > 5; matches refers to match_api_id; */ SELECT T1.match_api_id FROM Match AS T1 WHERE T1.home_team_goal > 5 /* Answer the following: List the players who are taller than 200 cm. taller than 200 cm refers to height > 200; players refers to player_name; */ SELECT T1.player_name FROM Player AS T1 WHERE T1.height > 200 /* Answer the following: List the teams that have a build up play speed class of 'Fast'. build up play speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast'; teams refers to team_long_name; */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast'
SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'David Wilson' )
SELECT player_name, birthday FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1)
SELECT name FROM League WHERE country_id = ( SELECT id FROM Country WHERE name = 'Netherlands' )
SELECT AVG(M.home_team_goal) FROM Match AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Poland' AND M.season = '2010/2011'
SELECT T1.player_name, AVG(T2.finishing) AS avg_finishing FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height IN ( SELECT MAX(height) FROM Player UNION SELECT MIN(height) FROM Player ) GROUP BY T1.player_name ORDER BY avg_finishing DESC LIMIT 1 /* Answer the following: Which team has the highest average build up play speed in 2015? build up play speed refers to buildUpPlaySpeed; highest average build up play speed = MAX(AVG(buildUpPlaySpeed)); */ SELECT T1.team_long_name, AVG(T2.buildUpPlaySpeed) AS avg_speed FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.date LIKE '2015%' GROUP BY T1.team_long_name ORDER BY avg_speed DESC LIMIT 1 /* Answer the following: Which country has the most number of leagues? most number of leagues = MAX(COUNT(league_id)); */ SELECT T1.name, COUNT(T2.id) AS num_leagues FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY num_leagues DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating in 2016? overall rating refers to overall_rating; highest overall rating = MAX(overall_rating); */ SELECT T1.player_name, MAX(T2.overall_rating) AS max_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.date LIKE '2016%' GROUP BY T1.player_name ORDER BY max_rating DESC LIMIT 1 /* Answer the following: Which match has the highest total goals in 2015? total goals refers to home_team_goal + away_team_goal; highest total goals = MAX(home_team_goal + away_team_goal); */ SELECT match_api_id, (home_team_goal + away_team_goal) AS total_goals FROM Match WHERE date LIKE '2015%' ORDER BY total_goals DESC LIMIT 1 /* Answer the following: Which team has the highest average defence pressure in 2014? defence pressure refers to defencePressure; highest average defence pressure = MAX(AVG(defencePressure)); */ SELECT T1.team_long_name, AVG(T2.defencePressure) AS avg_pressure FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.date LIKE '2014%' GROUP BY T1.team_long_name ORDER BY avg_pressure DESC LIMIT 1 /* Answer the following: Which player has the highest average reactions in 2013? reactions refers to reactions; highest average reactions = MAX(AVG(reactions)); */ SELECT T1.player_name, AVG(T2.reactions) AS avg_reactions FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.date LIKE '2013%' GROUP BY T1.player_name ORDER BY avg_reactions DESC LIMIT 1 /* Answer the following: Which team has the highest average build up play passing in 2012? build up play passing refers to buildUpPlayPassing; highest average build up play passing = MAX(AVG(buildUpPlayPassing)); */ SELECT T1.team_long_name, AVG(T2.buildUpPlayPassing) AS avg_passing FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.date LIKE '2012%' GROUP BY T1.team_long_name ORDER BY avg_passing DESC LIMIT 1 /* Answer the following: Which player has the highest average shot power in 2011? shot power refers to shot_power; highest average shot power = MAX(AVG(shot_power)); */ SELECT T1.player_name, AVG(T2.shot_power) AS avg_shot_power FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.date LIKE '2011%' GROUP BY T1.player_name ORDER BY avg_shot_power DESC LIMIT 1 /* Answer the following: Which team has the highest average chance creation shooting in 2010? chance creation shooting refers to chanceCreationShooting; highest average chance creation shooting = MAX(AVG(chanceCreationShooting)); */ SELECT T1.team_long_name, AVG(T2.chanceCreationShooting) AS avg_shooting FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.date LIKE '2010%' GROUP BY T1.team_long_name ORDER BY avg_shooting DESC LIMIT 1
SELECT player_name FROM Player WHERE height > 180
SELECT COUNT(player_api_id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170 /* Answer the following: List the team names that have a speed class of 'Fast'. team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast'; */ SELECT team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast' /* Answer the following: How many matches were played in the season 2014/2015? matches refers to match_api_id; season 2014/2015 refers to season = '2014/2015'; */ SELECT COUNT(match_api_id) FROM Match WHERE season = '2014/2015' /* Answer the following: How many players are taller than 180 cm and weigh less than 170 lbs? players refers to player_api_id; taller than 180 cm refers to height > 180; weigh less than 170 lbs refers to weight < 170; */ SELECT COUNT(player_api_id) FROM Player WHERE height > 180 AND weight < 170 /* Answer the following: List the names of players who have an overall rating greater than 85. player's name refers to player_name; overall rating greater than 85 refers to overall_rating > 85; */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > 85 /* Answer the following: How many teams have a defence pressure class of 'High'? teams refers to team_api_id; defence pressure class of 'High' refers to defencePressureClass = 'High'; */ SELECT COUNT(team_api_id) FROM Team_Attributes WHERE defencePressureClass = 'High'
SELECT DISTINCT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > 80 AND strftime('%Y', T1.date) BETWEEN '2008' AND '2010' /* Answer the following: Which teams had a buildUpPlaySpeed of over 70 in 2015? Please list team names. buildUpPlaySpeed > 70; in 2015 refers to strftime('%Y', date) = '2015'; */ SELECT DISTINCT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeed > 70 AND strftime('%Y', T1.date) = '2015' /* Answer the following: How many matches were played in the 2014 season? 2014 season refers to season = '2014/2015'; */ SELECT COUNT(*) FROM Match WHERE season = '2014/2015' /* Answer the following: Which countries had leagues where the total number of goals scored in the 2013 season was over 1000? Please list country names. total number of goals scored refers to SUM(home_team_goal + away_team_goal); 2013 season refers to season = '2013/2014'; over 1000 refers to HAVING SUM(home_team_goal + away_team_goal) > 1000; */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.season = '2013/2014' GROUP BY T1.country_id HAVING SUM(T1.home_team_goal + T1.away_team_goal) > 1000 /* Answer the following: Which players had the most penalties in 2012? Please list player names. most penalties refers to MAX(penalties); in 2012 refers to strftime('%Y', date) = '2012'; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.date) = '2012' ORDER BY T1.penalties DESC LIMIT 1 /* Answer the following: Which teams had the highest defencePressure in 2011? Please list team names. highest defencePressure refers to MAX(defencePressure); in 2011 refers to strftime('%Y', date) = '2011'; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE strftime('%Y', T1.date) = '2011' ORDER BY T1.defencePressure DESC LIMIT 1
SELECT potential FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran' )
SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE preferred_foot = 'left'
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast'
SELECT T1.buildUpPlayPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_short_name = 'CLB' /* Answer the following: What is the overall rating of player with player_api_id 505942? overall rating refers to overall_rating; player_api_id 505942 refers to player_api_id = 505942; */ SELECT T1.overall_rating FROM Player_Attributes AS T1 WHERE T1.player_api_id = 505942 /* Answer the following: What is the name of the league with id 1? name of the league refers to name; id 1 refers to id = 1; */ SELECT T1.name FROM League AS T1 WHERE T1.id = 1 /* Answer the following: What is the name of the country with id 1? name of the country refers to name; id 1 refers to id = 1; */ SELECT T1.name FROM Country AS T1 WHERE T1.id = 1 /* Answer the following: What is the name of the team with team_api_id 9987? name of the team refers to team_long_name; team_api_id 9987 refers to team_api_id = 9987; */ SELECT T1.team_long_name FROM Team AS T1 WHERE T1.team_api_id = 9987 /* Answer the following: What is the name of the player with player_api_id 505942? name of the player refers to player_name; player_api_id 505942 refers to player_api_id = 505942; */ SELECT T1.player_name FROM Player AS T1 WHERE T1.player_api_id = 505942 /* Answer the following: What is the date of the match with match_api_id 1988725? date of the match refers to date; match_api_id 1988725 refers to match_api_id = 1988725; */ SELECT T1.date FROM Match AS T1 WHERE T1.match_api_id = 1988725 /* Answer the following: What is the home team goal of the match with match_api_id 1988725? home team goal refers to home_team_goal; match_api_id 1988725 refers to match_api_id = 1988725; */ SELECT T1.home_team_goal FROM Match AS T1 WHERE T1.match_api_id = 1988725 /* Answer the following: What is the away team goal of the match with match_api_id 1988725? away team goal refers to away_team_goal; match_api_id 1988725 refers to match_api_id = 1988725; */ SELECT T1.away_team_goal FROM Match AS T1 WHERE T1.match_api_id = 1988725 /* Answer the following: What is the name of the home team of the match with match_api_id 1988725? name of the home team refers to team_long_name; match_api_id 1988725 refers to match_api_id = 1988725; */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.match_api_id = 1988725 /* Answer the following: What is the name of the away team of the match with match_api_id 1988725? name of the away team refers to team_long_name; match_api_id 1988725 refers to match_api_id = 1988725; */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T1.match_api_id = 1988725 /* Answer the following: What is the name of the player with player_api_id 505942? name of the player refers to player_name; player_api_id 505942 refers to player_api_id = 505942; */ SELECT T1.player_name FROM Player AS T1 WHERE T1.player_api_id = 505942 /* Answer the following: What is the name of the player who scored the goal in the match with match_api_id 1988725? name of the player refers to player_name; match_api_id 1988725 refers to match_api_id = 1988725; goal refers to goal; */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.goal = T2.player_api_id WHERE T1.match_api_id = 1988725 /* Answer the following: What is the name of the player who committed the foul in the match with match_api_id 1988725? name of the player refers to player_name; match_api_id 1988725 refers to match_api_id = 1988725; foulcommit refers to foulcommit; */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.foulcommit = T2.player_api_id WHERE T1.match_api_id = 1988725 /* Answer the following: What is the name of the player who received the card in the match with match_api_id 1988725? name of the player refers to player_name; match_api_id 1988725 refers to match_api_id = 1988725; card refers to card; */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.card = T2.player_api_id WHERE T1.match_api_id = 1988725 /* Answer the following: What is the name of the player who made the cross in the match with match_api_id 1988725? name of the player refers to player_name; match_api_id 1988725 refers to match_api_id = 1988725; "cross" refers to "cross"; */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1."cross" = T2.player_api_id WHERE T1.match_api_id = 1988725 /* Answer the following: What is the name of the player who made the corner in the match with match_api_id 1988725? name of the player refers to player_name; match_api_id 1988725 refers to match_api_id = 1988725; corner refers to corner; */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.corner = T2.player_api_id WHERE T1.match_api_id = 1988725 /* Answer the following: What is the name of the player who had the possession in the match with match_api_id 1988725? name of the player refers to player_name; match_api_id 1988725 refers to match_api_id = 1988725; possession refers to possession; */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.possession = T2.player_api_id WHERE T1.match_api_id = 1988725
SELECT T2.team_short_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayPassing > 70 /* Answer the following: How many matches were played in the season 2015/2016? season 2015/2016 refers to season = '2015/2016' */ SELECT COUNT(*) FROM Match WHERE season = '2015/2016' /* Answer the following: Which players have overall rating more than 85? Please list their names. overall rating refers to overall_rating; overall_rating > 85; names refers to player_name; */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > 85 /* Answer the following: Which countries have leagues with more than 10 teams? Please list their names. more than 10 teams refers to COUNT(team_api_id) > 10; names refers to name; */ SELECT T3.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.id GROUP BY T2.id HAVING COUNT(DISTINCT T1.home_team_api_id) > 10 /* Answer the following: Which teams have won more than 10 home games in the season 2015/2016? Please list their long names. more than 10 home games refers to COUNT(home_team_api_id) > 10 where home_team_goal > away_team_goal; long names refers to team_long_name; */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' AND T1.home_team_goal > T1.away_team_goal GROUP BY T1.home_team_api_id HAVING COUNT(T1.id) > 10 /* Answer the following: Which players have played for more than 3 teams? Please list their names. more than 3 teams refers to COUNT(DISTINCT team_api_id) > 3; names refers to player_name; */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id OR T1.away_player_1 = T2.player_api_id OR T1.away_player_2 = T2.player_api_id OR T1.away_player_3 = T2.player_api_id OR T1.away_player_4 = T2.player_api_id OR T1.away_player_5 = T2.player_api_id OR T1.away_player_6 = T2.player_api_id OR T1.away_player_7 = T2.player_api_id OR T1.away_player_8 = T2.player_api_id OR T1.away_player_9 = T2.player_api_id OR T1.away_player_10 = T2.player_api_id OR T1.away_player_11 = T2.player_api_id GROUP BY T2.player_api_id HAVING COUNT(DISTINCT T1.home_team_api_id, T1.away_team_api_id) > 3
SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 170 AND strftime('%Y', T2.date) BETWEEN '2010' AND '2015'
SELECT player_name FROM Player ORDER BY height ASC LIMIT 1 /* Answer the following: Which team has the fastest build up play speed? fastest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which match had the most goals scored? most goals scored refers to MAX(home_team_goal + away_team_goal); */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to COUNT(league_id); */ SELECT name FROM Country INNER JOIN League ON Country.id = League.country_id GROUP BY name ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: Which team has the most aggressive defence? most aggressive defence refers to MAX(defenceAggression); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY defenceAggression DESC LIMIT 1 /* Answer the following: Which player has the best free kick accuracy? best free kick accuracy refers to MAX(free_kick_accuracy); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which match had the most fouls committed? most fouls committed refers to MAX(foulcommit); */ SELECT match_api_id FROM Match ORDER BY foulcommit DESC LIMIT 1 /* Answer the following: Which player has the best shot power? best shot power refers to MAX(shot_power); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY shot_power DESC LIMIT 1 /* Answer the following: Which team has the widest defence team width? widest defence team width refers to MAX(defenceTeamWidth); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY defenceTeamWidth DESC LIMIT 1
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A' /* Answer the following: What is the overall rating of the player named 'Lionel Messi'? Lionel Messi refers to Player.player_name = 'Lionel Messi'; overall rating refers to Player_Attributes.overall_rating; */ SELECT T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Lionel Messi' /* Answer the following: What is the team name of the team with the team_api_id 9987? team_api_id 9987 refers to Team.team_api_id = 9987; team name refers to Team.team_long_name; */ SELECT T1.team_long_name FROM Team AS T1 WHERE T1.team_api_id = 9987 /* Answer the following: What is the build up play speed of the team with the team_api_id 9987? team_api_id 9987 refers to Team_Attributes.team_api_id = 9987; build up play speed refers to Team_Attributes.buildUpPlaySpeed; */ SELECT T2.buildUpPlaySpeed FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_api_id = 9987 /* Answer the following: Who are the players of the home team in the match with the match_api_id 1989924? match_api_id 1989924 refers to Match.match_api_id = 1989924; players of the home team refers to Match.home_player_1 to Match.home_player_11; */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_team_api_id = T2.player_api_id WHERE T1.match_api_id = 1989924 /* Answer the following: What is the goal difference of the match with the match_api_id 1989924? match_api_id 1989924 refers to Match.match_api_id = 1989924; goal difference refers to ABS(Match.home_team_goal - Match.away_team_goal); */ SELECT ABS(T1.home_team_goal - T1.away_team_goal) AS goal_difference FROM Match AS T1 WHERE T1.match_api_id = 1989924 /* Answer the following: What are the odds of the home team winning the match with the match_api_id 1989924 according to the betting company B365? match_api_id 1989924 refers to Match.match_api_id = 1989924; odds of the home team winning refers to Match.B365H; */ SELECT T1.B365H FROM Match AS T1 WHERE T1.match_api_id = 1989924 /* Answer the following: What are the odds of a draw in the match with the match_api_id 1989924 according to the betting company B365? match_api_id 1989924 refers to Match.match_api_id = 1989924; odds of a draw refers to Match.B365D; */ SELECT T1.B365D FROM Match AS T1 WHERE T1.match_api_id = 1989924 /* Answer the following: What are the odds of the away team winning the match with the match_api_id 1989924 according to the betting company B365? match_api_id 1989924 refers to Match.match_api_id = 1989924; odds of the away team winning refers to Match.B365A; */ SELECT T1.B365A FROM Match AS T1 WHERE T1.match_api_id = 1989924
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran' )
SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', T1.date) BETWEEN '2008-08' AND '2008-10'
SELECT T2.team_short_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.home_team_goal = 10
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential = 61 ORDER BY T2.balance DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: List the match ID and the date of the match with the highest total goals scored. highest total goals scored refers to MAX(home_team_goal + away_team_goal); */ SELECT match_api_id, date FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: What is the name of the country with the most leagues? most leagues refers to COUNT(league_id); */ SELECT T1.name FROM Country AS T1 INNER JOIN League AS T2 ON T1.id = T2.country_id GROUP BY T2.country_id ORDER BY COUNT(T2.id) DESC LIMIT 1 /* Answer the following: List the player names and their overall ratings who have the highest overall rating. highest overall rating refers to MAX(overall_rating); */ SELECT T1.player_name, T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest defence pressure? highest defence pressure refers to MAX(defencePressure); */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.defencePressure DESC LIMIT 1 /* Answer the following: List the match ID and the date of the match with the highest total cards. highest total cards refers to MAX(card); */ SELECT match_api_id, date FROM Match ORDER BY card DESC LIMIT 1 /* Answer the following: What is the name of the player with the highest shot power? highest shot power refers to MAX(shot_power); */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.shot_power DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest build up play passing? highest build up play passing refers to MAX(buildUpPlayPassing); */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.buildUpPlayPassing DESC LIMIT 1 /* Answer the following: List the player names and their sprint speed who have the highest sprint speed. highest sprint speed refers to MAX(sprint_speed); */ SELECT T1.player_name, T2.sprint_speed FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.sprint_speed DESC LIMIT 1
SELECT (SELECT AVG(ball_control) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo')) - (SELECT AVG(ball_control) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Appindangoye')) AS difference FROM Player_Attributes /* Answer the following: What is the average overall rating of players in the league named 'Belgium Jupiler League'? AVG(overall_rating) where league_name = 'Belgium Jupiler League'; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT home_player_1 FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League')) /* Answer the following: What is the average height of players in the team named 'FC Barcelona'? AVG(height) where team_name = 'FC Barcelona'; */ SELECT AVG(height) FROM Player WHERE player_api_id IN (SELECT home_player_1 FROM Match WHERE home_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'FC Barcelona')) /* Answer the following: What is the average buildUpPlaySpeed of teams in the country named 'Spain'? AVG(buildUpPlaySpeed) where country_name = 'Spain'; */ SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_api_id IN (SELECT team_api_id FROM Team WHERE id IN (SELECT id FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Spain'))) /* Answer the following: What is the average home team goal in the season '2008/2009'? AVG(home_team_goal) where season = '2008/2009'; */ SELECT AVG(home_team_goal) FROM Match WHERE season = '2008/2009'
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'
SELECT player_name FROM Player WHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada' ORDER BY birthday ASC LIMIT 1 /* Answer the following: Who is the oldest player in the league? oldest player refers to oldest birthday; */ SELECT player_name FROM Player ORDER BY birthday ASC LIMIT 1 /* Answer the following: How old was Aaron Lennon when he first played in a match? age when first played refers to Subtract(match date, birthday); first match refers to earliest date in Match table */ SELECT strftime('%Y', T1.date) - strftime('%Y', T2.birthday) FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id WHERE T2.player_name = 'Aaron Lennon' ORDER BY T1.date ASC LIMIT 1 /* Answer the following: Who is the oldest among all the players and teams? oldest refers to oldest birthday for players and oldest date for teams */ SELECT player_name AS name FROM Player UNION SELECT team_long_name AS name FROM Team ORDER BY birthday ASC, date ASC LIMIT 1 /* Answer the following: When Aaron Lennon played in the 2014 season, how old was he? how old was he refers to age; 2014 season refers to season = '2014/2015'; */ SELECT strftime('%Y', T1.date) - strftime('%Y', T2.birthday) FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id WHERE T2.player_name = 'Aaron Lennon' AND T1.season = '2014/2015' ORDER BY T1.date ASC LIMIT 1 /* Answer the following: Among the elderlies, state the name of the player who played in team YIFAT? elder refers to age > 35; team YIFAT refers to team_long_name = 'YIFAT' */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 INNER JOIN Team AS T3 ON T2.home_team_api_id = T3.team_api_id WHERE strftime('%Y', 'now') - strftime('%Y', T1.birthday) > 35 AND T3.team_long_name = 'YIFAT' /* Answer the following: How many players are older than Aaron Lennon? older than Aaron Lennon refers to birthday < '1987-04-16' */ SELECT COUNT(*) FROM Player WHERE birthday < '1987-04-16'
SELECT player_name FROM Player ORDER BY height DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which match had the most goals? most goals refers to MAX(home_team_goal + away_team_goal); */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to COUNT(league_id); */ SELECT name FROM Country INNER JOIN League ON Country.id = League.country_id GROUP BY name ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation shooting? highest chance creation shooting refers to MAX(chanceCreationShooting); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY chanceCreationShooting DESC LIMIT 1 /* Answer the following: Which player has the highest penalties score? highest penalties score refers to MAX(penalties); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY penalties DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure? highest defence pressure refers to MAX(defencePressure); */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY defencePressure DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? highest free kick accuracy refers to MAX(free_kick_accuracy); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which player has the highest sprint speed? highest sprint speed refers to MAX(sprint_speed); */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY sprint_speed DESC LIMIT 1
SELECT COUNT(T1.player_api_id) FROM Player_Attributes AS T1 WHERE T1.preferred_foot = 'left' AND T1.attacking_work_rate = 'low' /* Answer the following: How many teams have a build up play speed of over 70? build up play speed of over 70 refers to buildUpPlaySpeed > 70; */ SELECT COUNT(T1.team_api_id) FROM Team_Attributes AS T1 WHERE T1.buildUpPlaySpeed > 70 /* Answer the following: How many matches were played in the 2015/2016 season? 2015/2016 season refers to season = '2015/2016'; */ SELECT COUNT(T1.match_api_id) FROM Match AS T1 WHERE T1.season = '2015/2016' /* Answer the following: How many players have a height of over 190cm? height of over 190cm refers to height > 190; */ SELECT COUNT(T1.player_api_id) FROM Player AS T1 WHERE T1.height > 190 /* Answer the following: How many countries have leagues in the database? */ SELECT COUNT(DISTINCT T1.country_id) FROM League AS T1 /* Answer the following: How many matches resulted in a draw? draw refers to home_team_goal = away_team_goal; */ SELECT COUNT(T1.match_api_id) FROM Match AS T1 WHERE T1.home_team_goal = T1.away_team_goal /* Answer the following: How many players have a sprint speed of over 90? sprint speed of over 90 refers to sprint_speed > 90; */ SELECT COUNT(T1.player_api_id) FROM Player_Attributes AS T1 WHERE T1.sprint_speed > 90 /* Answer the following: How many teams have a defence pressure of over 80? defence pressure of over 80 refers to defencePressure > 80; */ SELECT COUNT(T1.team_api_id) FROM Team_Attributes AS T1 WHERE T1.defencePressure > 80 /* Answer the following: How many matches were played by the home team with the team_api_id of 9987 in the 2011/2012 season? home team with the team_api_id of 9987 refers to home_team_api_id = 9987; 2011/2012 season refers to season = '2011/2012'; */ SELECT COUNT(T1.match_api_id) FROM Match AS T1 WHERE T1.home_team_api_id = 9987 AND T1.season = '2011/2012' /* Answer the following: How many players have a shot power of over 85? shot power of over 85 refers to shot_power > 85; */ SELECT COUNT(T1.player_api_id) FROM Player_Attributes AS T1 WHERE T1.shot_power > 85
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League'
SELECT T1.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Germany'
SELECT player_name FROM Player WHERE player_api_id = ( SELECT player_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes ) LIMIT 1 ) /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_long_name FROM Team WHERE team_api_id = ( SELECT team_api_id FROM Team_Attributes WHERE buildUpPlaySpeed = ( SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes ) LIMIT 1 ) /* Answer the following: Which league has the most matches played? most matches played refers to MAX(match_api_id); */ SELECT name FROM League WHERE id = ( SELECT league_id FROM Match GROUP BY league_id ORDER BY COUNT(match_api_id) DESC LIMIT 1 ) /* Answer the following: Which country has the most leagues? most leagues refers to MAX(league_id); */ SELECT name FROM Country WHERE id = ( SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(id) DESC LIMIT 1 ) /* Answer the following: Which match had the most goals scored? most goals scored refers to MAX(home_team_goal + away_team_goal); */ SELECT match_api_id FROM Match WHERE (home_team_goal + away_team_goal) = ( SELECT MAX(home_team_goal + away_team_goal) FROM Match ) LIMIT 1 /* Answer the following: Which player has the highest potential? highest potential refers to MAX(potential); */ SELECT player_name FROM Player WHERE player_api_id = ( SELECT player_api_id FROM Player_Attributes WHERE potential = ( SELECT MAX(potential) FROM Player_Attributes ) LIMIT 1 )
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) < '1986' AND player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE defensive_work_rate = 'high' )
SELECT player_name, MAX(crossing) AS max_crossing FROM Player_Attributes WHERE player_fifa_api_id IN (SELECT player_fifa_api_id FROM Player WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone')) GROUP BY player_fifa_api_id ORDER BY max_crossing DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); */ SELECT team_long_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 1) /* Answer the following: Which country has the most number of leagues? */ SELECT name FROM Country WHERE id IN (SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(*) DESC LIMIT 1) /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1) /* Answer the following: Which match has the highest number of goals? highest number of goals refers to MAX(home_team_goal + away_team_goal); */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation shooting? highest chance creation shooting refers to MAX(chanceCreationShooting); */ SELECT team_long_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationShooting DESC LIMIT 1)
SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk' )
SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE player_fifa_api_id IN ( SELECT player_fifa_api_id FROM Player WHERE height > 180 ) AND volleys > 70
SELECT player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE volleys > 70 AND dribbling > 70 /* Answer the following: Please list the names of the teams whose build up play speed and defence pressure are over 60. build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed > 60; defence pressure refers to defencePressure; defencePressure > 60; */ SELECT team_long_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE buildUpPlaySpeed > 60 AND defencePressure > 60 /* Answer the following: Please list the names of the countries whose leagues have more than 10 teams. more than 10 teams refers to COUNT(team_api_id) > 10; */ SELECT Country.name FROM Country INNER JOIN League ON Country.id = League.country_id INNER JOIN Team ON League.id = Team.league_id GROUP BY League.id HAVING COUNT(Team.team_api_id) > 10 /* Answer the following: Please list the names of the players who scored more than 10 goals in home games. more than 10 goals refers to home_team_goal > 10; */ SELECT player_name FROM Player INNER JOIN Match ON Player.player_api_id = Match.home_player_1 OR Player.player_api_id = Match.home_player_2 OR Player.player_api_id = Match.home_player_3 OR Player.player_api_id = Match.home_player_4 OR Player.player_api_id = Match.home_player_5 OR Player.player_api_id = Match.home_player_6 OR Player.player_api_id = Match.home_player_7 OR Player.player_api_id = Match.home_player_8 OR Player.player_api_id = Match.home_player_9 OR Player.player_api_id = Match.home_player_10 OR Player.player_api_id = Match.home_player_11 GROUP BY player_name HAVING SUM(home_team_goal) > 10 /* Answer the following: Please list the names of the teams who scored more than 20 goals in away games. more than 20 goals refers to away_team_goal > 20; */ SELECT team_long_name FROM Team INNER JOIN Match ON Team.team_api_id = Match.away_team_api_id GROUP BY team_long_name HAVING SUM(away_team_goal) > 20
SELECT COUNT(*) FROM Match INNER JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Belgium' AND Match.season = '2008/2009' /* Answer the following: How many players have an overall rating above 85? overall rating above 85 refers to overall_rating > 85; */ SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating > 85 /* Answer the following: How many teams have a build up play speed above 70? build up play speed above 70 refers to buildUpPlaySpeed > 70; */ SELECT COUNT(*) FROM Team_Attributes WHERE buildUpPlaySpeed > 70 /* Answer the following: How many matches did the home team win by more than 3 goals? home team win by more than 3 goals refers to home_team_goal - away_team_goal > 3; */ SELECT COUNT(*) FROM Match WHERE home_team_goal - away_team_goal > 3 /* Answer the following: How many players have a preferred foot of 'left'? preferred foot of 'left' refers to preferred_foot = 'left'; */ SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' /* Answer the following: How many teams have a defence pressure above 60? defence pressure above 60 refers to defencePressure > 60; */ SELECT COUNT(*) FROM Team_Attributes WHERE defencePressure > 60 /* Answer the following: How many matches ended in a draw in the 2010/2011 season? draw in the 2010/2011 season refers to home_team_goal = away_team_goal and season = '2010/2011'; */ SELECT COUNT(*) FROM Match WHERE home_team_goal = away_team_goal AND season = '2010/2011' /* Answer the following: How many players have a sprint speed above 90? sprint speed above 90 refers to sprint_speed > 90; */ SELECT COUNT(*) FROM Player_Attributes WHERE sprint_speed > 90 /* Answer the following: How many teams have a build up play passing above 80? build up play passing above 80 refers to buildUpPlayPassing > 80; */ SELECT COUNT(*) FROM Team_Attributes WHERE buildUpPlayPassing > 80 /* Answer the following: How many matches did the away team win by more than 2 goals? away team win by more than 2 goals refers to away_team_goal - home_team_goal > 2; */ SELECT COUNT(*) FROM Match WHERE away_team_goal - home_team_goal > 2
SELECT T1.long_passing FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.birthday ASC LIMIT 1 /* Answer the following: What is the name of the oldest team? oldest team refers to earliest date in Team_Attributes; */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.date ASC LIMIT 1 /* Answer the following: What is the name of the oldest league? oldest league refers to earliest date in Match; */ SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id ORDER BY T1.date ASC LIMIT 1 /* Answer the following: What is the name of the oldest country? oldest country refers to earliest date in Match; */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id ORDER BY T1.date ASC LIMIT 1 /* Answer the following: What is the name of the oldest player? oldest player refers to oldest birthday; */ SELECT T1.player_name FROM Player AS T1 ORDER BY T1.birthday ASC LIMIT 1 /* Answer the following: What is the name of the team with the oldest player? oldest player refers to oldest birthday; */ SELECT T3.team_long_name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_6 OR T1.player_api_id = T2.home_player_7 OR T1.player_api_id = T2.home_player_8 OR T1.player_api_id = T2.home_player_9 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 OR T1.player_api_id = T2.away_player_1 OR T1.player_api_id = T2.away_player_2 OR T1.player_api_id = T2.away_player_3 OR T1.player_api_id = T2.away_player_4 OR T1.player_api_id = T2.away_player_5 OR T1.player_api_id = T2.away_player_6 OR T1.player_api_id = T2.away_player_7 OR T1.player_api_id = T2.away_player_8 OR T1.player_api_id = T2.away_player_9 OR T1.player_api_id = T2.away_player_10 OR T1.player_api_id = T2.away_player_11 INNER JOIN Team AS T3 ON T2.home_team_api_id = T3.team_api_id OR T2.away_team_api_id = T3.team_api_id ORDER BY T1.birthday ASC LIMIT 1
SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Belgium Jupiler League' AND STRFTIME('%Y', T1.date) = '2009' AND STRFTIME('%m', T1.date) = '04' /* Answer the following: What is the average overall rating of the player Lionel Messi? Lionel Messi refers to Player.player_name = 'Lionel Messi'; overall rating refers to Player_Attributes.overall_rating; */ SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Lionel Messi' /* Answer the following: How many goals did the home team score in the match between FC Barcelona and Real Madrid on November 29, 2010? FC Barcelona refers to Team.team_long_name = 'FC Barcelona'; Real Madrid refers to Team.team_long_name = 'Real Madrid'; on November 29, 2010 refers to Match.date = '2010-11-29'; home team goals refers to Match.home_team_goal; */ SELECT T1.home_team_goal FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id INNER JOIN Team AS T3 ON T1.away_team_api_id = T3.team_api_id WHERE T2.team_long_name = 'FC Barcelona' AND T3.team_long_name = 'Real Madrid' AND T1.date = '2010-11-29' /* Answer the following: What is the build up play speed of the team Manchester United in 2015? Manchester United refers to Team.team_long_name = 'Manchester United'; in 2015 refers to strftime('%Y', Team_Attributes.date) = '2015'; build up play speed refers to Team_Attributes.buildUpPlaySpeed; */ SELECT T2.buildUpPlaySpeed FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Manchester United' AND STRFTIME('%Y', T2.date) = '2015' /* Answer the following: How many matches were held in the country Spain in 2010? Spain refers to Country.name = 'Spain'; in 2010 refers to strftime('%Y', Match.date) = '2010'; */ SELECT COUNT(T1.id) FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Spain' AND STRFTIME('%Y', T1.date) = '2010'
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2008/2009' GROUP BY T1.league_id ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Who is the player with the highest overall rating? player with the highest overall rating refers to MAX(overall_rating); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which team had the highest buildUpPlaySpeed in 2010? team that had the highest buildUpPlaySpeed in 2010 refers to MAX(buildUpPlaySpeed WHERE date LIKE '%2010%'); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.date LIKE '%2010%' ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country had the most leagues? country that had the most leagues refers to MAX(country_id); */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T1.country_id ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which player has the highest potential? player that has the highest potential refers to MAX(potential); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.potential DESC LIMIT 1 /* Answer the following: Which team has the highest chanceCreationShooting? team that has the highest chanceCreationShooting refers to MAX(chanceCreationShooting); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.chanceCreationShooting DESC LIMIT 1 /* Answer the following: Which player has the highest free_kick_accuracy? player that has the highest free_kick_accuracy refers to MAX(free_kick_accuracy); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest defencePressure? team that has the highest defencePressure refers to MAX(defencePressure); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defencePressure DESC LIMIT 1 /* Answer the following: Which player has the highest agility? player that has the highest agility refers to MAX(agility); */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.agility DESC LIMIT 1 /* Answer the following: Which team has the highest buildUpPlayDribbling? team that has the highest buildUpPlayDribbling refers to MAX(buildUpPlayDribbling); */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlayDribbling DESC LIMIT 1
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T2.birthday) < '1986' /* Answer the following: What is the average number of goals scored by the home team in the 2008/2009 season? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 2008/2009 season refers to season = '2008/2009'; */ SELECT AVG(home_team_goal) FROM Match WHERE season = '2008/2009' /* Answer the following: What is the average build up play speed of teams in the league named 'Premier League'? average build up play speed = DIVIDE(SUM(buildUpPlaySpeed), COUNT(id)); 'Premier League' refers to name = 'Premier League'; */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Match AS T3 ON T2.team_api_id = T3.home_team_api_id INNER JOIN League AS T4 ON T3.league_id = T4.id WHERE T4.name = 'Premier League' /* Answer the following: What is the average height of players in the team named 'FC Barcelona'? average height = DIVIDE(SUM(height), COUNT(id)); 'FC Barcelona' refers to team_long_name = 'FC Barcelona'; */ SELECT AVG(T2.height) FROM Player AS T2 INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 INNER JOIN Team AS T4 ON T3.home_team_api_id = T4.team_api_id WHERE T4.team_long_name = 'FC Barcelona' /* Answer the following: What is the average number of goals scored by the away team in matches where the home team is 'FC Barcelona'? average number of goals = DIVIDE(SUM(away_team_goal), COUNT(id)); 'FC Barcelona' refers to team_long_name = 'FC Barcelona'; */ SELECT AVG(T1.away_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'FC Barcelona' /* Answer the following: What is the average overall rating of players who prefer their right foot? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); prefer their right foot refers to preferred_foot = 'right'; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE preferred_foot = 'right' /* Answer the following: What is the average number of goals scored by the home team in matches where the away team is 'FC Barcelona'? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 'FC Barcelona' refers to team_long_name = 'FC Barcelona'; */ SELECT AVG(T1.home_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'FC Barcelona' /* Answer the following: What is the average overall rating of players who prefer their left foot? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); prefer their left foot refers to preferred_foot = 'left'; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE preferred_foot = 'left' /* Answer the following: What is the average number of goals scored by the away team in the 2008/2009 season? average number of goals = DIVIDE(SUM(away_team_goal), COUNT(id)); 2008/2009 season refers to season = '2008/2009'; */ SELECT AVG(away_team_goal) FROM Match WHERE season = '2008/2009' /* Answer the following: What is the average build up play speed of teams in the league named 'Bundesliga'? average build up play speed = DIVIDE(SUM(buildUpPlaySpeed), COUNT(id)); 'Bundesliga' refers to name = 'Bundesliga'; */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Match AS T3 ON T2.team_api_id = T3.home_team_api_id INNER JOIN League AS T4 ON T3.league_id = T4.id WHERE T4.name = 'Bundesliga' /* Answer the following: What is the average height of players in the team named 'Real Madrid CF'? average height = DIVIDE(SUM(height), COUNT(id)); 'Real Madrid CF' refers to team_long_name = 'Real Madrid CF'; */ SELECT AVG(T2.height) FROM Player AS T2 INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 INNER JOIN Team AS T4 ON T3.home_team_api_id = T4.team_api_id WHERE T4.team_long_name = 'Real Madrid CF' /* Answer the following: What is the average number of goals scored by the home team in matches where the away team is 'Real Madrid CF'? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 'Real Madrid CF' refers to team_long_name = 'Real Madrid CF'; */ SELECT AVG(T1.home_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Real Madrid CF' /* Answer the following: What is the average overall rating of players who are goalkeepers? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); goalkeepers refers to gk_diving > 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE gk_diving > 0 /* Answer the following: What is the average number of goals scored by the away team in matches where the home team is 'Real Madrid CF'? average number of goals = DIVIDE(SUM(away_team_goal), COUNT(id)); 'Real Madrid CF' refers to team_long_name = 'Real Madrid CF'; */ SELECT AVG(T1.away_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Real Madrid CF' /* Answer the following: What is the average overall rating of players who are not goalkeepers? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); not goalkeepers refers to gk_diving = 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE gk_diving = 0 /* Answer the following: What is the average number of goals scored by the home team in the 2009/2010 season? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 2009/2010 season refers to season = '2009/2010'; */ SELECT AVG(home_team_goal) FROM Match WHERE season = '2009/2010' /* Answer the following: What is the average build up play speed of teams in the league named 'Serie A'? average build up play speed = DIVIDE(SUM(buildUpPlaySpeed), COUNT(id)); 'Serie A' refers to name = 'Serie A'; */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Match AS T3 ON T2.team_api_id = T3.home_team_api_id INNER JOIN League AS T4 ON T3.league_id = T4.id WHERE T4.name = 'Serie A' /* Answer the following: What is the average height of players in the team named 'Juventus'? average height = DIVIDE(SUM(height), COUNT(id)); 'Juventus' refers to team_long_name = 'Juventus'; */ SELECT AVG(T2.height) FROM Player AS T2 INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 INNER JOIN Team AS T4 ON T3.home_team_api_id = T4.team_api_id WHERE T4.team_long_name = 'Juventus' /* Answer the following: What is the average number of goals scored by the home team in matches where the away team is 'Juventus'? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 'Juventus' refers to team_long_name = 'Juventus'; */ SELECT AVG(T1.home_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Juventus' /* Answer the following: What is the average overall rating of players who are defenders? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); defenders refers to marking > 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE marking > 0 /* Answer the following: What is the average number of goals scored by the away team in matches where the home team is 'Juventus'? average number of goals = DIVIDE(SUM(away_team_goal), COUNT(id)); 'Juventus' refers to team_long_name = 'Juventus'; */ SELECT AVG(T1.away_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Juventus' /* Answer the following: What is the average overall rating of players who are not defenders? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); not defenders refers to marking = 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE marking = 0 /* Answer the following: What is the average number of goals scored by the home team in the 2010/2011 season? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 2010/2011 season refers to season = '2010/2011'; */ SELECT AVG(home_team_goal) FROM Match WHERE season = '2010/2011' /* Answer the following: What is the average build up play speed of teams in the league named 'La Liga'? average build up play speed = DIVIDE(SUM(buildUpPlaySpeed), COUNT(id)); 'La Liga' refers to name = 'La Liga'; */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Match AS T3 ON T2.team_api_id = T3.home_team_api_id INNER JOIN League AS T4 ON T3.league_id = T4.id WHERE T4.name = 'La Liga' /* Answer the following: What is the average height of players in the team named 'Paris Saint-Germain'? average height = DIVIDE(SUM(height), COUNT(id)); 'Paris Saint-Germain' refers to team_long_name = 'Paris Saint-Germain'; */ SELECT AVG(T2.height) FROM Player AS T2 INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 INNER JOIN Team AS T4 ON T3.home_team_api_id = T4.team_api_id WHERE T4.team_long_name = 'Paris Saint-Germain' /* Answer the following: What is the average number of goals scored by the home team in matches where the away team is 'Paris Saint-Germain'? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 'Paris Saint-Germain' refers to team_long_name = 'Paris Saint-Germain'; */ SELECT AVG(T1.home_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Paris Saint-Germain' /* Answer the following: What is the average overall rating of players who are midfielders? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); midfielders refers to short_passing > 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE short_passing > 0 /* Answer the following: What is the average number of goals scored by the away team in matches where the home team is 'Paris Saint-Germain'? average number of goals = DIVIDE(SUM(away_team_goal), COUNT(id)); 'Paris Saint-Germain' refers to team_long_name = 'Paris Saint-Germain'; */ SELECT AVG(T1.away_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Paris Saint-Germain' /* Answer the following: What is the average overall rating of players who are not midfielders? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); not midfielders refers to short_passing = 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE short_passing = 0 /* Answer the following: What is the average number of goals scored by the home team in the 2011/2012 season? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 2011/2012 season refers to season = '2011/2012'; */ SELECT AVG(home_team_goal) FROM Match WHERE season = '2011/2012' /* Answer the following: What is the average build up play speed of teams in the league named 'Ligue 1'? average build up play speed = DIVIDE(SUM(buildUpPlaySpeed), COUNT(id)); 'Ligue 1' refers to name = 'Ligue 1'; */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Match AS T3 ON T2.team_api_id = T3.home_team_api_id INNER JOIN League AS T4 ON T3.league_id = T4.id WHERE T4.name = 'Ligue 1' /* Answer the following: What is the average height of players in the team named 'Manchester United'? average height = DIVIDE(SUM(height), COUNT(id)); 'Manchester United' refers to team_long_name = 'Manchester United'; */ SELECT AVG(T2.height) FROM Player AS T2 INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 INNER JOIN Team AS T4 ON T3.home_team_api_id = T4.team_api_id WHERE T4.team_long_name = 'Manchester United' /* Answer the following: What is the average number of goals scored by the home team in matches where the away team is 'Manchester United'? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 'Manchester United' refers to team_long_name = 'Manchester United'; */ SELECT AVG(T1.home_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Manchester United' /* Answer the following: What is the average overall rating of players who are forwards? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); forwards refers to finishing > 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE finishing > 0 /* Answer the following: What is the average number of goals scored by the away team in matches where the home team is 'Manchester United'? average number of goals = DIVIDE(SUM(away_team_goal), COUNT(id)); 'Manchester United' refers to team_long_name = 'Manchester United'; */ SELECT AVG(T1.away_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Manchester United' /* Answer the following: What is the average overall rating of players who are not forwards? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); not forwards refers to finishing = 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE finishing = 0 /* Answer the following: What is the average number of goals scored by the home team in the 2012/2013 season? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 2012/2013 season refers to season = '2012/2013'; */ SELECT AVG(home_team_goal) FROM Match WHERE season = '2012/2013' /* Answer the following: What is the average build up play speed of teams in the league named 'Bundesliga 2'? average build up play speed = DIVIDE(SUM(buildUpPlaySpeed), COUNT(id)); 'Bundesliga 2' refers to name = 'Bundesliga 2'; */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Match AS T3 ON T2.team_api_id = T3.home_team_api_id INNER JOIN League AS T4 ON T3.league_id = T4.id WHERE T4.name = 'Bundesliga 2' /* Answer the following: What is the average height of players in the team named 'Bayern Munich'? average height = DIVIDE(SUM(height), COUNT(id)); 'Bayern Munich' refers to team_long_name = 'Bayern Munich'; */ SELECT AVG(T2.height) FROM Player AS T2 INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 INNER JOIN Team AS T4 ON T3.home_team_api_id = T4.team_api_id WHERE T4.team_long_name = 'Bayern Munich' /* Answer the following: What is the average number of goals scored by the home team in matches where the away team is 'Bayern Munich'? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 'Bayern Munich' refers to team_long_name = 'Bayern Munich'; */ SELECT AVG(T1.home_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Bayern Munich' /* Answer the following: What is the average overall rating of players who are wingers? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); wingers refers to crossing > 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE crossing > 0 /* Answer the following: What is the average number of goals scored by the away team in matches where the home team is 'Bayern Munich'? average number of goals = DIVIDE(SUM(away_team_goal), COUNT(id)); 'Bayern Munich' refers to team_long_name = 'Bayern Munich'; */ SELECT AVG(T1.away_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Bayern Munich' /* Answer the following: What is the average overall rating of players who are not wingers? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); not wingers refers to crossing = 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE crossing = 0 /* Answer the following: What is the average number of goals scored by the home team in the 2013/2014 season? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 2013/2014 season refers to season = '2013/2014'; */ SELECT AVG(home_team_goal) FROM Match WHERE season = '2013/2014' /* Answer the following: What is the average build up play speed of teams in the league named 'Serie B'? average build up play speed = DIVIDE(SUM(buildUpPlaySpeed), COUNT(id)); 'Serie B' refers to name = 'Serie B'; */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Match AS T3 ON T2.team_api_id = T3.home_team_api_id INNER JOIN League AS T4 ON T3.league_id = T4.id WHERE T4.name = 'Serie B' /* Answer the following: What is the average height of players in the team named 'AC Milan'? average height = DIVIDE(SUM(height), COUNT(id)); 'AC Milan' refers to team_long_name = 'AC Milan'; */ SELECT AVG(T2.height) FROM Player AS T2 INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 INNER JOIN Team AS T4 ON T3.home_team_api_id = T4.team_api_id WHERE T4.team_long_name = 'AC Milan' /* Answer the following: What is the average number of goals scored by the home team in matches where the away team is 'AC Milan'? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 'AC Milan' refers to team_long_name = 'AC Milan'; */ SELECT AVG(T1.home_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'AC Milan' /* Answer the following: What is the average overall rating of players who are center backs? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); center backs refers to standing_tackle > 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE standing_tackle > 0 /* Answer the following: What is the average number of goals scored by the away team in matches where the home team is 'AC Milan'? average number of goals = DIVIDE(SUM(away_team_goal), COUNT(id)); 'AC Milan' refers to team_long_name = 'AC Milan'; */ SELECT AVG(T1.away_team_goal) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'AC Milan' /* Answer the following: What is the average overall rating of players who are not center backs? average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); not center backs refers to standing_tackle = 0; */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE standing_tackle = 0 /* Answer the following: What is the average number of goals scored by the home team in the 2014/2015 season? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 2014/2015 season refers to season = '2014/2015'; */ SELECT AVG(home_team_goal) FROM Match WHERE season = '2014/2015' /* Answer the following: What is the average build up play speed of teams in the league named 'Eredivisie'? average build up play speed = DIVIDE(SUM(buildUpPlaySpeed), COUNT(id)); 'Eredivisie' refers to name = 'Eredivisie'; */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Match AS T3 ON T2.team_api_id = T3.home_team_api_id INNER JOIN League AS T4 ON T3.league_id = T4.id WHERE T4.name = 'Eredivisie' /* Answer the following: What is the average height of players in the team named 'Ajax'? average height = DIVIDE(SUM(height), COUNT(id)); 'Ajax' refers to team_long_name = 'Ajax'; */ SELECT AVG(T2.height) FROM Player AS T2 INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 INNER JOIN Team AS T4 ON T3.home_team_api_id = T4.team_api_id WHERE T4.team_long_name = 'Ajax' /* Answer the following: What is the average number of goals scored by the home team in matches where the away team is 'Ajax'? average number of goals = DIVIDE(SUM(home_team_goal), COUNT(id)); 'Ajax'
SELECT (CAST((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')) AS REAL) - CAST((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) AS REAL)) * 100 / CAST((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) AS REAL) AS RESULT
SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Heart of Midlothian'
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'
SELECT SUM(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox' /* Answer the following: What is the average overall rating of all players in the league 'Belgium Jupiler League'? 'Belgium Jupiler League' refers to T2.name = 'Belgium Jupiler League'; average overall rating refers to AVG(overall_rating) */ SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN League AS T2 ON T1.player_api_id = T2.id WHERE T2.name = 'Belgium Jupiler League' /* Answer the following: What is the total number of goals scored by the team 'FC Barcelona' in the season '2015/2016'? 'FC Barcelona' refers to T2.team_long_name = 'FC Barcelona'; season '2015/2016' refers to T1.season = '2015/2016'; total number of goals scored refers to SUM(home_team_goal) + SUM(away_team_goal) */ SELECT (SUM(T1.home_team_goal) + SUM(T1.away_team_goal)) AS total_goals FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T2.team_long_name = 'FC Barcelona' AND T1.season = '2015/2016' /* Answer the following: What is the average build up play speed of all teams in the league 'England Premier League'? 'England Premier League' refers to T2.name = 'England Premier League'; average build up play speed refers to AVG(buildUpPlaySpeed) */ SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN League AS T2 ON T1.team_api_id = T2.id WHERE T2.name = 'England Premier League' /* Answer the following: What is the total number of matches played in the season '2014/2015'? season '2014/2015' refers to season = '2014/2015'; total number of matches played refers to COUNT(*) */ SELECT COUNT(*) FROM Match WHERE season = '2014/2015'
SELECT MAX(T2.chanceCreationPassing), T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Ajax' GROUP BY T2.chanceCreationPassingClass ORDER BY T2.chanceCreationPassing DESC LIMIT 1 /* Answer the following: Who is the player with the highest overall rating? highest overall rating refers to MAX(overall_rating); */ SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 1 /* Answer the following: What is the highest build up play speed score and what is it classified as? highest build up play speed score refers to MAX(buildUpPlaySpeed); classified as buildUpPlaySpeedClass */ SELECT MAX(T1.buildUpPlaySpeed), T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 GROUP BY T1.buildUpPlaySpeedClass ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: What is the highest number of goals scored by a home team? highest number of goals scored by a home team refers to MAX(home_team_goal); */ SELECT MAX(home_team_goal) FROM Match /* Answer the following: What is the highest number of goals scored by an away team? highest number of goals scored by an away team refers to MAX(away_team_goal); */ SELECT MAX(away_team_goal) FROM Match /* Answer the following: What is the highest number of goals scored in a match? highest number of goals scored in a match refers to MAX(home_team_goal + away_team_goal); */ SELECT MAX(home_team_goal + away_team_goal) AS total_goals FROM Match /* Answer the following: What is the highest number of goals scored by a team in a match? highest number of goals scored by a team in a match refers to MAX(home_team_goal, away_team_goal); */ SELECT MAX(home_team_goal, away_team_goal) AS max_goals FROM Match /* Answer the following: What is the highest number of goals scored by a team in a season? highest number of goals scored by a team in a season refers to MAX(home_team_goal + away_team_goal) GROUP BY season, home_team_api_id, away_team_api_id; */ SELECT season, home_team_api_id, away_team_api_id, MAX(home_team_goal + away_team_goal) AS max_goals FROM Match GROUP BY season, home_team_api_id, away_team_api_id ORDER BY max_goals DESC LIMIT 1 /* Answer the following: What is the highest number of goals scored by a team in a league? highest number of goals scored by a team in a league refers to MAX(home_team_goal + away_team_goal) GROUP BY league_id, home_team_api_id, away_team_api_id; */ SELECT league_id, home_team_api_id, away_team_api_id, MAX(home_team_goal + away_team_goal) AS max_goals FROM Match GROUP BY league_id, home_team_api_id, away_team_api_id ORDER BY max_goals DESC LIMIT 1 /* Answer the following: What is the highest number of goals scored by a team in a country? highest number of goals scored by a team in a country refers to MAX(home_team_goal + away_team_goal) GROUP BY country_id, home_team_api_id, away_team_api_id; */ SELECT country_id, home_team_api_id, away_team_api_id, MAX(home_team_goal + away_team_goal) AS max_goals FROM Match GROUP BY country_id, home_team_api_id, away_team_api_id ORDER BY max_goals DESC LIMIT 1 /* Answer the following: What is the highest number of goals scored by a player in a match? highest number of goals scored by a player in a match refers to MAX(home_player_1, home_player_2, ..., home_player_11, away_player_1, away_player_2, ..., away_player_11); */ SELECT MAX(home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11) AS max_goals FROM Match /* Answer the following: What is the highest number of goals scored by a player in a season? highest number of goals scored by a player in a season refers to MAX(home_player_1, home_player_2, ..., home_player_11, away_player_1, away_player_2, ..., away_player_11) GROUP BY season; */ SELECT season, MAX(home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11) AS max_goals FROM Match GROUP BY season ORDER BY max_goals DESC LIMIT 1 /* Answer the following: What is the highest number of goals scored by a player in a league? highest number of goals scored by a player in a league refers to MAX(home_player_1, home_player_2, ..., home_player_11, away_player_1, away_player_2, ..., away_player_11) GROUP BY league_id; */ SELECT league_id, MAX(home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11) AS max_goals FROM Match GROUP BY league_id ORDER BY max_goals DESC LIMIT 1 /* Answer the following: What is the highest number of goals scored by a player in a country? highest number of goals scored by a player in a country refers to MAX(home_player_1, home_player_2, ..., home_player_11, away_player_1, away_player_2, ..., away_player_11) GROUP BY country_id; */ SELECT country_id, MAX(home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11) AS max_goals FROM Match GROUP BY country_id ORDER BY max_goals DESC LIMIT 1
SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo')
SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon' /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); team refers to team_long_name */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country has the most number of leagues? most number of leagues refers to COUNT(league_id); country refers to name */ SELECT T2.name, COUNT(T1.league_id) AS number_of_leagues FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T2.name ORDER BY number_of_leagues DESC LIMIT 1 /* Answer the following: Which match had the most home team goals? most home team goals refers to MAX(home_team_goal); match refers to match_api_id */ SELECT match_api_id, home_team_goal FROM Match ORDER BY home_team_goal DESC LIMIT 1 /* Answer the following: Who is the tallest player? tallest player refers to MAX(height); player refers to player_name */ SELECT player_name, height FROM Player ORDER BY height DESC LIMIT 1
SELECT AVG(M.away_team_goal) FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id INNER JOIN League AS L ON M.league_id = L.id INNER JOIN Country AS C ON L.country_id = C.id WHERE T.team_long_name = 'Parma' AND C.name = 'Italy'
SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = 77 AND T1.date = '2016-06-23' ORDER BY T2.birthday LIMIT 1 /* Answer the following: Who is the player with the highest overall rating who is also a member of the team with the highest buildUpPlaySpeed? Give the name of the player. highest overall rating refers to MAX(overall_rating); highest buildUpPlaySpeed refers to MAX(buildUpPlaySpeed); */ SELECT T3.player_name FROM Player_Attributes AS T1 INNER JOIN Team_Attributes AS T2 ON T1.player_fifa_api_id = T2.team_fifa_api_id INNER JOIN Player AS T3 ON T1.player_api_id = T3.player_api_id WHERE T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) AND T2.buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) /* Answer the following: Who is the player with the highest overall rating who played in the match with the highest total goals? Give the name of the player. highest overall rating refers to MAX(overall_rating); highest total goals refers to MAX(home_team_goal + away_team_goal); */ SELECT T3.player_name FROM Player_Attributes AS T1 INNER JOIN Match AS T2 ON T1.player_fifa_api_id = T2.home_team_api_id OR T1.player_fifa_api_id = T2.away_team_api_id INNER JOIN Player AS T3 ON T1.player_api_id = T3.player_api_id WHERE T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) AND (T2.home_team_goal + T2.away_team_goal) = (SELECT MAX(home_team_goal + away_team_goal) FROM Match) /* Answer the following: Who is the player with the highest overall rating who played in the match with the highest total goals in the league with the highest defencePressure? Give the name of the player. highest overall rating refers to MAX(overall_rating); highest total goals refers to MAX(home_team_goal + away_team_goal); highest defencePressure refers to MAX(defencePressure); */ SELECT T4.player_name FROM Player_Attributes AS T1 INNER JOIN Match AS T2 ON T1.player_fifa_api_id = T2.home_team_api_id OR T1.player_fifa_api_id = T2.away_team_api_id INNER JOIN Team_Attributes AS T3 ON T2.home_team_api_id = T3.team_api_id OR T2.away_team_api_id = T3.team_api_id INNER JOIN Player AS T4 ON T1.player_api_id = T4.player_api_id WHERE T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) AND (T2.home_team_goal + T2.away_team_goal) = (SELECT MAX(home_team_goal + away_team_goal) FROM Match) AND T3.defencePressure = (SELECT MAX(defencePressure) FROM Team_Attributes) /* Answer the following: Who is the player with the highest overall rating who played in the match with the highest total goals in the league with the highest defencePressure in the country with the highest number of teams? Give the name of the player. highest overall rating refers to MAX(overall_rating); highest total goals refers to MAX(home_team_goal + away_team_goal); highest defencePressure refers to MAX(defencePressure); highest number of teams refers to MAX(COUNT(team_api_id)); */ SELECT T5.player_name FROM Player_Attributes AS T1 INNER JOIN Match AS T2 ON T1.player_fifa_api_id = T2.home_team_api_id OR T1.player_fifa_api_id = T2.away_team_api_id INNER JOIN Team_Attributes AS T3 ON T2.home_team_api_id = T3.team_api_id OR T2.away_team_api_id = T3.team_api_id INNER JOIN League AS T4 ON T2.league_id = T4.id INNER JOIN Player AS T5 ON T1.player_api_id = T5.player_api_id WHERE T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) AND (T2.home_team_goal + T2.away_team_goal) = (SELECT MAX(home_team_goal + away_team_goal) FROM Match) AND T3.defencePressure = (SELECT MAX(defencePressure) FROM Team_Attributes) AND T4.country_id IN (SELECT country_id FROM Team GROUP BY country_id ORDER BY COUNT(team_api_id) DESC LIMIT 1)
SELECT T1.overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Mooy' AND T1.`date` = '2016-02-04 00:00:00'
SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Parravicini' AND T1.date = '2010-08-30 00:00:00'
SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Migliore' AND T1.date = '2015-05-01 00:00:00'
SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Berigaud') AND `date` = '2013-02-22 00:00:00' /* Answer the following: Provide the number of goals scored by the home team in the match between team 9987 and team 9993 on 2015/12/20. team 9987 refers to home_team_api_id = 9987; team 9993 refers to away_team_api_id = 9993; on 2015/12/20 refers to date = '2015-12-20 00:00:00' */ SELECT home_team_goal FROM Match WHERE home_team_api_id = 9987 AND away_team_api_id = 9993 AND `date` = '2015-12-20 00:00:00' /* Answer the following: What is the build up play speed of team 9987 on 2015/9/10? team 9987 refers to team_api_id = 9987; on 2015/9/10 refers to date = '2015-09-10 00:00:00' */ SELECT buildUpPlaySpeed FROM Team_Attributes WHERE team_api_id = 9987 AND `date` = '2015-09-10 00:00:00' /* Answer the following: How many matches were played in the league with id 1 in the 2008/2009 season? league with id 1 refers to league_id = 1; in the 2008/2009 season refers to season = '2008/2009' */ SELECT COUNT(*) FROM Match WHERE league_id = 1 AND season = '2008/2009' /* Answer the following: What is the average overall rating of player with id 505942 on 2016/2/18? player with id 505942 refers to player_api_id = 505942; on 2016/2/18 refers to date = '2016-02-18 00:00:00' */ SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = 505942 AND `date` = '2016-02-18 00:00:00'
SELECT date FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') ORDER BY crossing DESC LIMIT 1 /* Answer the following: Which team has the highest buildUpPlaySpeed? highest buildUpPlaySpeed refers to MAX(buildUpPlaySpeed) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 1) /* Answer the following: Which country has the most number of leagues? most number of leagues refers to MAX(COUNT(league_id)) */ SELECT name FROM Country WHERE id = (SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1) /* Answer the following: Which match has the highest total goals? highest total goals refers to MAX(home_team_goal + away_team_goal) */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Who is the tallest player? tallest player refers to MAX(height) */ SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player) /* Answer the following: Which team has the highest chanceCreationShooting? highest chanceCreationShooting refers to MAX(chanceCreationShooting) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationShooting DESC LIMIT 1) /* Answer the following: Which match has the highest betting odds for home team win? highest betting odds for home team win refers to MAX(B365H) */ SELECT match_api_id FROM Match ORDER BY B365H DESC LIMIT 1 /* Answer the following: Who is the player with the highest overall rating? highest overall rating refers to MAX(overall_rating) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1) /* Answer the following: Which team has the highest buildUpPlayDribbling? highest buildUpPlayDribbling refers to MAX(buildUpPlayDribbling) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlayDribbling DESC LIMIT 1) /* Answer the following: Which match has the highest betting odds for a draw? highest betting odds for a draw refers to MAX(B365D) */ SELECT match_api_id FROM Match ORDER BY B365D DESC LIMIT 1 /* Answer the following: Who is the player with the highest potential? highest potential refers to MAX(potential) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY potential DESC LIMIT 1) /* Answer the following: Which team has the highest defencePressure? highest defencePressure refers to MAX(defencePressure) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY defencePressure DESC LIMIT 1) /* Answer the following: Which match has the highest betting odds for away team win? highest betting odds for away team win refers to MAX(B365A) */ SELECT match_api_id FROM Match ORDER BY B365A DESC LIMIT 1 /* Answer the following: Who is the player with the highest free kick accuracy? highest free kick accuracy refers to MAX(free_kick_accuracy) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY free_kick_accuracy DESC LIMIT 1) /* Answer the following: Which team has the highest buildUpPlayPassing? highest buildUpPlayPassing refers to MAX(buildUpPlayPassing) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlayPassing DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds? highest total betting odds refers to MAX(B365H + B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest shot power? highest shot power refers to MAX(shot_power) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY shot_power DESC LIMIT 1) /* Answer the following: Which team has the highest chanceCreationPassing? highest chanceCreationPassing refers to MAX(chanceCreationPassing) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationPassing DESC LIMIT 1) /* Answer the following: Which match has the highest betting odds for home team win or draw? highest betting odds for home team win or draw refers to MAX(B365H + B365D) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D) DESC LIMIT 1 /* Answer the following: Who is the player with the highest agility? highest agility refers to MAX(agility) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY agility DESC LIMIT 1) /* Answer the following: Which team has the highest chanceCreationCrossing? highest chanceCreationCrossing refers to MAX(chanceCreationCrossing) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationCrossing DESC LIMIT 1) /* Answer the following: Which match has the highest betting odds for away team win or draw? highest betting odds for away team win or draw refers to MAX(B365A + B365D) */ SELECT match_api_id FROM Match ORDER BY (B365A + B365D) DESC LIMIT 1 /* Answer the following: Who is the player with the highest reactions? highest reactions refers to MAX(reactions) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY reactions DESC LIMIT 1) /* Answer the following: Which team has the highest defenceAggression? highest defenceAggression refers to MAX(defenceAggression) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY defenceAggression DESC LIMIT 1) /* Answer the following: Which match has the highest betting odds for home team win or away team win? highest betting odds for home team win or away team win refers to MAX(B365H + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest balance? highest balance refers to MAX(balance) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY balance DESC LIMIT 1) /* Answer the following: Which team has the highest defenceTeamWidth? highest defenceTeamWidth refers to MAX(defenceTeamWidth) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY defenceTeamWidth DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win? highest total betting odds for a win refers to MAX(B365H + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest jumping? highest jumping refers to MAX(jumping) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY jumping DESC LIMIT 1) /* Answer the following: Which team has the highest buildUpPlaySpeedClass? highest buildUpPlaySpeedClass refers to MAX(buildUpPlaySpeedClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeedClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a draw or a win? highest total betting odds for a draw or a win refers to MAX(B365D + B365H + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365D + B365H + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest stamina? highest stamina refers to MAX(stamina) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY stamina DESC LIMIT 1) /* Answer the following: Which team has the highest buildUpPlayDribblingClass? highest buildUpPlayDribblingClass refers to MAX(buildUpPlayDribblingClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlayDribblingClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a draw or a loss? highest total betting odds for a draw or a loss refers to MAX(B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365D + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest strength? highest strength refers to MAX(strength) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY strength DESC LIMIT 1) /* Answer the following: Which team has the highest buildUpPlayPassingClass? highest buildUpPlayPassingClass refers to MAX(buildUpPlayPassingClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlayPassingClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win or a loss? highest total betting odds for a win or a loss refers to MAX(B365H + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest long shots? highest long shots refers to MAX(long_shots) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY long_shots DESC LIMIT 1) /* Answer the following: Which team has the highest chanceCreationPassingClass? highest chanceCreationPassingClass refers to MAX(chanceCreationPassingClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationPassingClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win or a draw? highest total betting odds for a win or a draw refers to MAX(B365H + B365D) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D) DESC LIMIT 1 /* Answer the following: Who is the player with the highest aggression? highest aggression refers to MAX(aggression) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY aggression DESC LIMIT 1) /* Answer the following: Which team has the highest chanceCreationCrossingClass? highest chanceCreationCrossingClass refers to MAX(chanceCreationCrossingClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationCrossingClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a loss or a draw? highest total betting odds for a loss or a draw refers to MAX(B365A + B365D) */ SELECT match_api_id FROM Match ORDER BY (B365A + B365D) DESC LIMIT 1 /* Answer the following: Who is the player with the highest interceptions? highest interceptions refers to MAX(interceptions) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY interceptions DESC LIMIT 1) /* Answer the following: Which team has the highest chanceCreationShootingClass? highest chanceCreationShootingClass refers to MAX(chanceCreationShootingClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationShootingClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win, a draw or a loss? highest total betting odds for a win, a draw or a loss refers to MAX(B365H + B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest positioning? highest positioning refers to MAX(positioning) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY positioning DESC LIMIT 1) /* Answer the following: Which team has the highest chanceCreationPositioningClass? highest chanceCreationPositioningClass refers to MAX(chanceCreationPositioningClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationPositioningClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win, a draw and a loss? highest total betting odds for a win, a draw and a loss refers to MAX(B365H + B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest vision? highest vision refers to MAX(vision) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY vision DESC LIMIT 1) /* Answer the following: Which team has the highest defencePressureClass? highest defencePressureClass refers to MAX(defencePressureClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY defencePressureClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win, a draw or a loss? highest total betting odds for a win, a draw or a loss refers to MAX(B365H + B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest penalties? highest penalties refers to MAX(penalties) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY penalties DESC LIMIT 1) /* Answer the following: Which team has the highest defenceAggressionClass? highest defenceAggressionClass refers to MAX(defenceAggressionClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY defenceAggressionClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win, a draw and a loss? highest total betting odds for a win, a draw and a loss refers to MAX(B365H + B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest marking? highest marking refers to MAX(marking) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY marking DESC LIMIT 1) /* Answer the following: Which team has the highest defenceTeamWidthClass? highest defenceTeamWidthClass refers to MAX(defenceTeamWidthClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY defenceTeamWidthClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win, a draw and a loss? highest total betting odds for a win, a draw and a loss refers to MAX(B365H + B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest standing tackle? highest standing tackle refers to MAX(standing_tackle) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY standing_tackle DESC LIMIT 1) /* Answer the following: Which team has the highest defenceDefenderLineClass? highest defenceDefenderLineClass refers to MAX(defenceDefenderLineClass) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Team_Attributes ORDER BY defenceDefenderLineClass DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win, a draw and a loss? highest total betting odds for a win, a draw and a loss refers to MAX(B365H + B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest sliding tackle? highest sliding tackle refers to MAX(sliding_tackle) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY sliding_tackle DESC LIMIT 1) /* Answer the following: Which team has the highest gk_diving? highest gk_diving refers to MAX(gk_diving) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Player_Attributes ORDER BY gk_diving DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win, a draw and a loss? highest total betting odds for a win, a draw and a loss refers to MAX(B365H + B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest gk_handling? highest gk_handling refers to MAX(gk_handling) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY gk_handling DESC LIMIT 1) /* Answer the following: Which team has the highest gk_kicking? highest gk_kicking refers to MAX(gk_kicking) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Player_Attributes ORDER BY gk_kicking DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win, a draw and a loss? highest total betting odds for a win, a draw and a loss refers to MAX(B365H + B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D + B365A) DESC LIMIT 1 /* Answer the following: Who is the player with the highest gk_positioning? highest gk_positioning refers to MAX(gk_positioning) */ SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY gk_positioning DESC LIMIT 1) /* Answer the following: Which team has the highest gk_reflexes? highest gk_reflexes refers to MAX(gk_reflexes) */ SELECT team_long_name FROM Team WHERE team_api_id = (SELECT team_api_id FROM Player_Attributes ORDER BY gk_reflexes DESC LIMIT 1) /* Answer the following: Which match has the highest total betting odds for a win, a draw and a loss? highest total betting odds for a win, a draw and a loss refers to MAX(B365H + B365D + B365A) */ SELECT match_api_id FROM Match ORDER BY (B365H + B365D + B365A) DESC LIMIT 1
SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Willem II' AND T2.date = '2011-02-22 00:00:00'
SELECT T2.buildUpPlayDribblingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'LEI' AND T2.date = '2015-09-10 00:00:00'
SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'FC Lorient' AND T2.date = '2010-02-22'
SELECT T1.chanceCreationPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'PEC Zwolle' AND T1.date = '2013-09-20 00:00:00'
SELECT T1.chanceCreationCrossingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Hull City' AND T1.date = '2010-02-22 00:00:00'
SELECT T1.defenceAggressionClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Hannover 96' AND T1.date = '2015-09-10 00:00:00'
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT (CAST((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') AS REAL) - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery') AND date = '2013-07-12')) / (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') * 100 AS percentage_difference FROM Player_Attributes LIMIT 1
SELECT player_name FROM Player ORDER BY height DESC LIMIT 5 /* Answer the following: Who is the player with the highest overall rating? highest overall rating refers to MAX(overall_rating) */ SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY Team_Attributes.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which country has the most leagues? most leagues refers to COUNT(league_id) */ SELECT name FROM Country INNER JOIN League ON Country.id = League.country_id GROUP BY Country.id ORDER BY COUNT(League.id) DESC LIMIT 1 /* Answer the following: Which match had the most goals? most goals refers to SUM(home_team_goal + away_team_goal) */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Which player has played in the most matches? most matches refers to COUNT(match_api_id) */ SELECT player_name FROM Player INNER JOIN Match ON Player.player_api_id IN (Match.home_player_1, Match.home_player_2, Match.home_player_3, Match.home_player_4, Match.home_player_5, Match.home_player_6, Match.home_player_7, Match.home_player_8, Match.home_player_9, Match.home_player_10, Match.home_player_11, Match.away_player_1, Match.away_player_2, Match.away_player_3, Match.away_player_4, Match.away_player_5, Match.away_player_6, Match.away_player_7, Match.away_player_8, Match.away_player_9, Match.away_player_10, Match.away_player_11) GROUP BY Player.player_api_id ORDER BY COUNT(Match.match_api_id) DESC LIMIT 1
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10
SELECT player_name FROM Player WHERE (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', birthday)) >= 35
SELECT SUM(home_team_goal) FROM Match AS M INNER JOIN Player AS P ON M.home_player_1 = P.player_api_id OR M.home_player_2 = P.player_api_id OR M.home_player_3 = P.player_api_id OR M.home_player_4 = P.player_api_id OR M.home_player_5 = P.player_api_id OR M.home_player_6 = P.player_api_id OR M.home_player_7 = P.player_api_id OR M.home_player_8 = P.player_api_id OR M.home_player_9 = P.player_api_id OR M.home_player_10 = P.player_api_id OR M.home_player_11 = P.player_api_id WHERE P.player_name = 'Aaron Lennon'
SELECT SUM(away_team_goal) FROM Match WHERE away_player_1 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ) OR away_player_2 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ) OR away_player_3 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ) OR away_player_4 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ) OR away_player_5 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ) OR away_player_6 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ) OR away_player_7 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ) OR away_player_8 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ) OR away_player_9 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ) OR away_player_10 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ) OR away_player_11 IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') )
SELECT SUM(home_team_goal) FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id WHERE CAST((julianday('now') - julianday(T2.birthday)) / 365 AS INTEGER) <= 30
SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 10
SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE potential = ( SELECT MAX(potential) FROM Player_Attributes ) )
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.attacking_work_rate = 'high'
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T1.birthday LIMIT 1
SELECT T1.player_name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Belgium'
SELECT T3.name, T1.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Country AS T3 ON T2.country_id = T3.id WHERE T1.vision > 89
SELECT T1.name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY AVG(T2.weight) DESC LIMIT 1 /* Answer the following: Which team has the highest average overall rating? highest average overall rating refers to MAX(AVG(overall_rating)) */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Player_Attributes AS T2 ON T1.team_api_id = T2.team_api_id GROUP BY T1.team_long_name ORDER BY AVG(T2.overall_rating) DESC LIMIT 1 /* Answer the following: Which league has the highest average home team goals? highest average home team goals refers to MAX(AVG(home_team_goal)) */ SELECT T1.name FROM League AS T1 INNER JOIN Match AS T2 ON T1.id = T2.league_id GROUP BY T1.name ORDER BY AVG(T2.home_team_goal) DESC LIMIT 1 /* Answer the following: Which season has the highest average away team goals? highest average away team goals refers to MAX(AVG(away_team_goal)) */ SELECT season FROM Match GROUP BY season ORDER BY AVG(away_team_goal) DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.buildUpPlaySpeed DESC LIMIT 1
SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeedClass = 'Slow' /* Answer the following: List down the names of the players who have overall rating above 85. overall rating above 85 refers to overall_rating > 85; names of players refers to player_name */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > 85 /* Answer the following: List down the names of the countries where the league name is 'Premier League'. league name is 'Premier League' refers to name = 'Premier League'; names of countries refers to country.name */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Premier League' /* Answer the following: List down the names of the players who are right footed. right footed refers to preferred_foot = 'right'; names of players refers to player_name */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.preferred_foot = 'right' /* Answer the following: List down the names of the teams where the defence pressure class is 'High'. defence pressure class is 'High' refers to defencePressureClass = 'High'; names of teams refers to team_long_name */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.defencePressureClass = 'High'
SELECT T2.team_short_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.chanceCreationPassingClass = 'Safe' /* Answer the following: Who are the players with overall rating above 85 and preferred foot is left? overall rating above 85 refers to overall_rating > 85; preferred foot is left refers to preferred_foot = 'Left' */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > 85 AND T1.preferred_foot = 'Left' /* Answer the following: What are the names of the countries where the league's name is 'Premier League'? league's name is 'Premier League' refers to name = 'Premier League'; names of the countries refers to Country.name */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Premier League' /* Answer the following: What are the names of the players who played in the match with match_api_id of 198992? match_api_id of 198992 refers to match_api_id = 198992; names of the players refers to player_name */ SELECT T2.player_name FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id OR T1.away_player_1 = T2.player_api_id OR T1.away_player_2 = T2.player_api_id OR T1.away_player_3 = T2.player_api_id OR T1.away_player_4 = T2.player_api_id OR T1.away_player_5 = T2.player_api_id OR T1.away_player_6 = T2.player_api_id OR T1.away_player_7 = T2.player_api_id OR T1.away_player_8 = T2.player_api_id OR T1.away_player_9 = T2.player_api_id OR T1.away_player_10 = T2.player_api_id OR T1.away_player_11 = T2.player_api_id WHERE T1.match_api_id = 198992 /* Answer the following: What are the names of the teams who have 'Slow' build up play speed class? 'Slow' build up play speed class refers to buildUpPlaySpeedClass = 'Slow'; names of the teams refers to team_long_name */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeedClass = 'Slow'
SELECT AVG(T1.height) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Italy'
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest overall rating. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest overall rating refers to MAX(overall_rating) */ SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.overall_rating DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest potential. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest potential refers to MAX(potential) */ SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.potential DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest sprint speed. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest sprint speed refers to MAX(sprint_speed) */ SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.sprint_speed DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest shot power. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest shot power refers to MAX(shot_power) */ SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.shot_power DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest strength. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest strength refers to MAX(strength) */ SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.strength DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest stamina. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest stamina refers to MAX(stamina) */ SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.stamina DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest jumping. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest jumping refers to MAX(jumping) */ SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.jumping DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest aggression. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest aggression refers to MAX(aggression) */ SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.aggression DESC LIMIT 3 /* Answer the following: Please provide the names of top three football players who are over 180 cm tall and have the highest interceptions. over 180 cm tall refers to height > 180; name of football player refers to player_name; highest interceptions refers to MAX(interceptions) */ SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 ORDER BY PA.interceptions DESC LIMIT 3
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-01-01' /* Answer the following: What is the average overall rating of all players in the FIFA database? overall rating refers to overall_rating */ SELECT AVG(overall_rating) FROM Player_Attributes /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT team_api_id FROM Team_Attributes WHERE buildUpPlaySpeed = (SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes) /* Answer the following: How many matches were played in the 2008/2009 season? 2008/2009 season refers to season = '2008/2009' */ SELECT COUNT(*) FROM Match WHERE season = '2008/2009' /* Answer the following: Which country has the most leagues? most leagues refers to COUNT(league_id) */ SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: Which player has the highest potential? highest potential refers to MAX(potential) */ SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes) /* Answer the following: Which team has the most aggressive defence? most aggressive defence refers to MAX(defenceAggression) */ SELECT team_api_id FROM Team_Attributes WHERE defenceAggression = (SELECT MAX(defenceAggression) FROM Team_Attributes)
SELECT ( SELECT jumping FROM Player_Attributes WHERE player_api_id = 6 ) - ( SELECT jumping FROM Player_Attributes WHERE player_api_id = 23 ) AS num /* Answer the following: What is the difference in overall rating between the team with the highest and lowest build up play speed? difference in overall rating between the team with the highest and lowest build up play speed refers to SUBTRACT(MAX(buildUpPlaySpeed), MIN(buildUpPlaySpeed)) */ SELECT ( SELECT MAX(overall_rating) FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 1 ) ) - ( SELECT MIN(overall_rating) FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeed ASC LIMIT 1 ) ) AS num /* Answer the following: What is the difference in the number of goals scored by the home team and the away team in the match with the match_api_id of 1987? difference in the number of goals scored by the home team and the away team in the match with the match_api_id of 1987 refers to SUBTRACT(home_team_goal, away_team_goal) WHERE match_api_id = 1987 */ SELECT home_team_goal - away_team_goal AS num FROM Match WHERE match_api_id = 1987 /* Answer the following: What is the difference in the number of matches played by the team with the team_api_id of 8674 and the team with the team_api_id of 9823? difference in the number of matches played by the team with the team_api_id of 8674 and the team with the team_api_id of 9823 refers to SUBTRACT(COUNT(match_api_id WHERE home_team_api_id = 8674 OR away_team_api_id = 8674), COUNT(match_api_id WHERE home_team_api_id = 9823 OR away_team_api_id = 9823)) */ SELECT ( SELECT COUNT(match_api_id) FROM Match WHERE home_team_api_id = 8674 OR away_team_api_id = 8674 ) - ( SELECT COUNT(match_api_id) FROM Match WHERE home_team_api_id = 9823 OR away_team_api_id = 9823 ) AS num /* Answer the following: What is the difference in the average overall rating between players with a preferred foot of 'right' and players with a preferred foot of 'left'? difference in the average overall rating between players with a preferred foot of 'right' and players with a preferred foot of 'left' refers to SUBTRACT(AVG(overall_rating WHERE preferred_foot = 'right'), AVG(overall_rating WHERE preferred_foot = 'left')) */ SELECT ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE preferred_foot = 'right' ) - ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE preferred_foot = 'left' ) AS num
SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 3 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Who is the tallest player in the database? tallest player refers to MAX(height); player refers to player_name */ SELECT player_name FROM Player ORDER BY height DESC LIMIT 1 /* Answer the following: Which country has the most number of leagues? most number of leagues refers to COUNT(league_id); country refers to country_id */ SELECT country_id FROM League GROUP BY country_id ORDER BY COUNT(league_id) DESC LIMIT 1 /* Answer the following: Which team scored the most goals in home games? most goals in home games refers to MAX(home_team_goal); team refers to home_team_api_id */ SELECT home_team_api_id FROM Match GROUP BY home_team_api_id ORDER BY SUM(home_team_goal) DESC LIMIT 1 /* Answer the following: Which player has the highest overall rating? highest overall rating refers to MAX(overall_rating); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1 /* Answer the following: Which match had the most goals scored? most goals scored refers to MAX(home_team_goal + away_team_goal); match refers to match_api_id */ SELECT match_api_id FROM Match ORDER BY (home_team_goal + away_team_goal) DESC LIMIT 1 /* Answer the following: Which team has the highest average of goals scored in away games? highest average of goals scored in away games refers to AVG(away_team_goal); team refers to away_team_api_id */ SELECT away_team_api_id FROM Match GROUP BY away_team_api_id ORDER BY AVG(away_team_goal) DESC LIMIT 1 /* Answer the following: Which player has the highest sprint speed? highest sprint speed refers to MAX(sprint_speed); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY sprint_speed DESC LIMIT 1 /* Answer the following: Which team has the highest build up play passing? highest build up play passing refers to MAX(buildUpPlayPassing); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlayPassing DESC LIMIT 1 /* Answer the following: Which player has the highest shot power? highest shot power refers to MAX(shot_power); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY shot_power DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation passing? highest chance creation passing refers to MAX(chanceCreationPassing); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationPassing DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? highest free kick accuracy refers to MAX(free_kick_accuracy); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure? highest defence pressure refers to MAX(defencePressure); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY defencePressure DESC LIMIT 1 /* Answer the following: Which player has the highest agility? highest agility refers to MAX(agility); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY agility DESC LIMIT 1 /* Answer the following: Which team has the highest build up play dribbling? highest build up play dribbling refers to MAX(buildUpPlayDribbling); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlayDribbling DESC LIMIT 1 /* Answer the following: Which player has the highest reactions? highest reactions refers to MAX(reactions); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY reactions DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation shooting? highest chance creation shooting refers to MAX(chanceCreationShooting); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationShooting DESC LIMIT 1 /* Answer the following: Which player has the highest balance? highest balance refers to MAX(balance); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY balance DESC LIMIT 1 /* Answer the following: Which team has the highest defence aggression? highest defence aggression refers to MAX(defenceAggression); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY defenceAggression DESC LIMIT 1 /* Answer the following: Which player has the highest jumping? highest jumping refers to MAX(jumping); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY jumping DESC LIMIT 1 /* Answer the following: Which team has the highest defence team width? highest defence team width refers to MAX(defenceTeamWidth); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY defenceTeamWidth DESC LIMIT 1 /* Answer the following: Which player has the highest stamina? highest stamina refers to MAX(stamina); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY stamina DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed class? highest build up play speed class refers to MAX(buildUpPlaySpeedClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlaySpeedClass DESC LIMIT 1 /* Answer the following: Which player has the highest strength? highest strength refers to MAX(strength); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY strength DESC LIMIT 1 /* Answer the following: Which team has the highest build up play passing class? highest build up play passing class refers to MAX(buildUpPlayPassingClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlayPassingClass DESC LIMIT 1 /* Answer the following: Which player has the highest long shots? highest long shots refers to MAX(long_shots); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY long_shots DESC LIMIT 1 /* Answer the following: Which team has the highest build up play positioning class? highest build up play positioning class refers to MAX(buildUpPlayPositioningClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY buildUpPlayPositioningClass DESC LIMIT 1 /* Answer the following: Which player has the highest aggression? highest aggression refers to MAX(aggression); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY aggression DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation passing class? highest chance creation passing class refers to MAX(chanceCreationPassingClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationPassingClass DESC LIMIT 1 /* Answer the following: Which player has the highest interceptions? highest interceptions refers to MAX(interceptions); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY interceptions DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation crossing class? highest chance creation crossing class refers to MAX(chanceCreationCrossingClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationCrossingClass DESC LIMIT 1 /* Answer the following: Which player has the highest positioning? highest positioning refers to MAX(positioning); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY positioning DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation shooting class? highest chance creation shooting class refers to MAX(chanceCreationShootingClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationShootingClass DESC LIMIT 1 /* Answer the following: Which player has the highest vision? highest vision refers to MAX(vision); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY vision DESC LIMIT 1 /* Answer the following: Which team has the highest chance creation positioning class? highest chance creation positioning class refers to MAX(chanceCreationPositioningClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY chanceCreationPositioningClass DESC LIMIT 1 /* Answer the following: Which player has the highest penalties? highest penalties refers to MAX(penalties); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY penalties DESC LIMIT 1 /* Answer the following: Which team has the highest defence pressure class? highest defence pressure class refers to MAX(defencePressureClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY defencePressureClass DESC LIMIT 1 /* Answer the following: Which player has the highest marking? highest marking refers to MAX(marking); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY marking DESC LIMIT 1 /* Answer the following: Which team has the highest defence aggression class? highest defence aggression class refers to MAX(defenceAggressionClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY defenceAggressionClass DESC LIMIT 1 /* Answer the following: Which player has the highest standing tackle? highest standing tackle refers to MAX(standing_tackle); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY standing_tackle DESC LIMIT 1 /* Answer the following: Which team has the highest defence team width class? highest defence team width class refers to MAX(defenceTeamWidthClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY defenceTeamWidthClass DESC LIMIT 1 /* Answer the following: Which player has the highest sliding tackle? highest sliding tackle refers to MAX(sliding_tackle); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY sliding_tackle DESC LIMIT 1 /* Answer the following: Which team has the highest defence defender line class? highest defence defender line class refers to MAX(defenceDefenderLineClass); team refers to team_api_id */ SELECT team_api_id FROM Team_Attributes ORDER BY defenceDefenderLineClass DESC LIMIT 1 /* Answer the following: Which player has the highest gk diving? highest gk diving refers to MAX(gk_diving); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY gk_diving DESC LIMIT 1 /* Answer the following: Which player has the highest gk handling? highest gk handling refers to MAX(gk_handling); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY gk_handling DESC LIMIT 1 /* Answer the following: Which player has the highest gk kicking? highest gk kicking refers to MAX(gk_kicking); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY gk_kicking DESC LIMIT 1 /* Answer the following: Which player has the highest gk positioning? highest gk positioning refers to MAX(gk_positioning); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY gk_positioning DESC LIMIT 1 /* Answer the following: Which player has the highest gk reflexes? highest gk reflexes refers to MAX(gk_reflexes); player refers to player_api_id */ SELECT player_api_id FROM Player_Attributes ORDER BY gk_reflexes DESC LIMIT 1
SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'Left' AND crossing = ( SELECT MAX(crossing) FROM Player_Attributes )
SELECT CAST(SUM(CASE WHEN strength > 80 AND stamina > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa' /* Answer the following: What is the average overall rating of player 'Lionel Messi'? */ SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Lionel Messi' /* Answer the following: What is the team name of team_api_id 9987? */ SELECT T1.team_long_name FROM Team AS T1 WHERE T1.team_api_id = 9987 /* Answer the following: What is the buildUpPlaySpeed of team 'FC Barcelona'? */ SELECT T1.buildUpPlaySpeed FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'FC Barcelona' /* Answer the following: How many goals did the home team score in match 198992? */ SELECT T1.home_team_goal FROM Match AS T1 WHERE T1.match_api_id = 198992 /* Answer the following: Who is the player with player_api_id 505942? */ SELECT T1.player_name FROM Player AS T1 WHERE T1.player_api_id = 505942 /* Answer the following: What is the height and weight of player 'Cristiano Ronaldo'? */ SELECT T1.height, T1.weight FROM Player AS T1 WHERE T1.player_name = 'Cristiano Ronaldo'
SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League') /* Answer the following: What is the name of the player with the highest overall rating in 2010? 2010 refers to date like '2010%'; highest overall rating refers to MAX(overall_rating); name of the player refers to player_name */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '2010%' ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: What is the name of the team with the highest build up play speed in 2010? 2010 refers to date like '2010%'; highest build up play speed refers to MAX(buildUpPlaySpeed); name of the team refers to team_long_name */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.date LIKE '2010%' ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Who is the player with the highest penalties score in 2010? 2010 refers to date like '2010%'; highest penalties score refers to MAX(penalties); player refers to player_name */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '2010%' ORDER BY T1.penalties DESC LIMIT 1 /* Answer the following: What is the name of the country where the match with the highest home team goal was played in 2010? 2010 refers to date like '2010%'; highest home team goal refers to MAX(home_team_goal); name of the country refers to name */ SELECT T2.name FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.date LIKE '2010%' ORDER BY T1.home_team_goal DESC LIMIT 1 /* Answer the following: What is the name of the league where the match with the highest away team goal was played in 2010? 2010 refers to date like '2010%'; highest away team goal refers to MAX(away_team_goal); name of the league refers to name */ SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.date LIKE '2010%' ORDER BY T1.away_team_goal DESC LIMIT 1
SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )
SELECT T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'KSV Cercle Brugge'
SELECT COUNT(id) FROM Match WHERE season = '2015/2016' AND league_id = ( SELECT id FROM League WHERE name = 'Italian Serie A' )
SELECT MAX(home_team_goal) AS Highest_Home_Team_Score FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Eredivisie')
SELECT T1.finishing, T1.curve FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.weight = ( SELECT MAX(weight) FROM Player ) LIMIT 1 /* Answer the following: What is the name of the team with the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlaySpeed = ( SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes ) LIMIT 1 /* Answer the following: What is the name of the country where the league with the most matches played is located? most matches played refers to MAX(count(match_api_id)) */ SELECT T3.name FROM (SELECT T1.league_id, COUNT(T1.match_api_id) AS match_count FROM Match AS T1 GROUP BY T1.league_id ORDER BY match_count DESC LIMIT 1) AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.id /* Answer the following: What is the name of the player with the highest overall rating? highest overall rating refers to MAX(overall_rating) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes ) LIMIT 1 /* Answer the following: What is the name of the team with the highest home team goal? highest home team goal refers to MAX(home_team_goal) */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.home_team_goal = ( SELECT MAX(home_team_goal) FROM Match ) LIMIT 1 /* Answer the following: What is the name of the player with the highest penalties score? highest penalties score refers to MAX(penalties) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.penalties = ( SELECT MAX(penalties) FROM Player_Attributes ) LIMIT 1 /* Answer the following: What is the name of the team with the highest defence pressure? highest defence pressure refers to MAX(defencePressure) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.defencePressure = ( SELECT MAX(defencePressure) FROM Team_Attributes ) LIMIT 1
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which team scored the most goals in the 2015–2016 season? in the 2015–2016 season season = '2015/2016'; team with most goals refers to team_long_name where MAX(home_team_goal + away_team_goal) */ SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id OR T1.away_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' GROUP BY T2.team_long_name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1 /* Answer the following: Which player had the highest overall rating in 2015? in 2015 refers to date LIKE '2015%'; player with highest overall rating refers to player_name where MAX(overall_rating) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.date LIKE '2015%' ORDER BY T1.overall_rating DESC LIMIT 1 /* Answer the following: Which country had the most leagues? most leagues refers to MAX(COUNT(league_id)) */ SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1 /* Answer the following: Which team has the highest build up play speed? highest build up play speed refers to MAX(buildUpPlaySpeed) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.buildUpPlaySpeed DESC LIMIT 1 /* Answer the following: Which player has the highest penalties score? highest penalties score refers to MAX(penalties) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.penalties DESC LIMIT 1 /* Answer the following: Which team has the most aggressive defence? most aggressive defence refers to MAX(defenceAggression) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defenceAggression DESC LIMIT 1 /* Answer the following: Which player has the highest free kick accuracy? highest free kick accuracy refers to MAX(free_kick_accuracy) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.free_kick_accuracy DESC LIMIT 1 /* Answer the following: Which team has the widest defence? widest defence refers to MAX(defenceTeamWidth) */ SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T1.defenceTeamWidth DESC LIMIT 1 /* Answer the following: Which player has the highest sprint speed? highest sprint speed refers to MAX(sprint_speed) */ SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.sprint_speed DESC LIMIT 1
SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id ORDER BY T1.away_team_goal DESC LIMIT 1
SELECT player_name FROM Player WHERE player_api_id = ( SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1 )
SELECT CAST(SUM(CASE WHEN T1.height < 180 AND T2.overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id /* Answer the following: What is the percentage of matches where the home team scored more than 3 goals? percentage refers to DIVIDE(COUNT(home_team_goal > 3), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN home_team_goal > 3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM Match /* Answer the following: What is the percentage of teams that have a build up play speed of over 60? percentage refers to DIVIDE(COUNT(buildUpPlaySpeed > 60), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN buildUpPlaySpeed > 60 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM Team_Attributes /* Answer the following: What is the percentage of leagues where the majority of matches had more than 2 goals scored? percentage refers to DIVIDE(COUNT(league_id where AVG(home_team_goal + away_team_goal) > 2), COUNT(league_id)) * 100% */ SELECT CAST(SUM(CASE WHEN AVG(home_team_goal + away_team_goal) > 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT league_id) FROM Match /* Answer the following: What is the percentage of players who have a sprint speed of over 80 and are over 190 cm tall? percentage refers to DIVIDE(COUNT(height > 190 AND sprint_speed > 80), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN T1.height > 190 AND T2.sprint_speed > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id /* Answer the following: What is the percentage of countries that have more than 10 teams? percentage refers to DIVIDE(COUNT(country_id where COUNT(team_api_id) > 10), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN COUNT(T2.team_api_id) > 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Country AS T1 INNER JOIN Team AS T2 ON T1.id = T2.country_id /* Answer the following: What is the percentage of players who have a shot power of over 80 and are under 170 cm tall? percentage refers to DIVIDE(COUNT(height < 170 AND shot_power > 80), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN T1.height < 170 AND T2.shot_power > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id /* Answer the following: What is the percentage of matches where the away team scored more than 2 goals? percentage refers to DIVIDE(COUNT(away_team_goal > 2), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN away_team_goal > 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM Match /* Answer the following: What is the percentage of teams that have a chance creation shooting of over 50? percentage refers to DIVIDE(COUNT(chanceCreationShooting > 50), COUNT(id)) * 100% */ SELECT CAST(SUM(CASE WHEN chanceCreationShooting > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM Team_Attributes /* Answer the following: What is the percentage of leagues where the majority of matches had less than 2 goals scored? percentage refers to DIVIDE(COUNT(league_id where AVG(home_team_goal + away_team_goal) < 2), COUNT(league_id)) * 100% */ SELECT CAST(SUM(CASE WHEN AVG(home_team_goal + away_team_goal) < 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT league_id) FROM Match
SELECT SUM(CASE WHEN T1.Admission = '+' THEN 1 ELSE 0 END) AS InPatient, SUM(CASE WHEN T1.Admission = '-' THEN 1 ELSE 0 END) AS OutPatient, ABS(SUM(CASE WHEN T1.Admission = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Admission = '-' THEN 1 ELSE 0 END)) * 100 / COUNT(T1.ID) AS Deviation FROM Patient AS T1 WHERE T1.SEX = 'M'
SELECT CAST(SUM(CASE WHEN strftime('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE SEX = 'F'
SELECT (COUNT(DISTINCT CASE WHEN Admission = '+' THEN ID END) * 100.0 / COUNT(DISTINCT ID)) AS percentage FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940'
SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS ratio FROM Patient WHERE Diagnosis = 'SLE'
SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609
SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = '163109'
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500
SELECT T1.ID, YEAR(CURRENT_TIMESTAMP) - YEAR(T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'
SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2
SELECT DISTINCT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE YEAR(P.Birthday) = 1937 AND L.`T-CHO` >= 250
SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5
SELECT CAST(SUM(CASE WHEN T2.SEX = 'F' AND (T1.TP < 6.0 OR T1.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID
SELECT AVG(`aCL IgG`) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50
SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Description) = '1997' AND Admission = '-'
SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient
SELECT COUNT(DISTINCT T2.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.`Examination Date`) = '1997' AND T1.Thrombosis = 1 AND T2.SEX = 'F'
SELECT MAX(STRFTIME('%Y', Birthday)) - MIN(STRFTIME('%Y', Birthday)) AS AgeGap FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE TG >= 200)
SELECT T1.Symptoms, T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID ORDER BY T2.Birthday DESC LIMIT 1
SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1998-01-01' AND '1998-12-31' AND T2.SEX = 'M'
SELECT MAX(T2.Date), STRFTIME('%Y', T1.`First Date`) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' ORDER BY T1.Birthday LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.SEX = 'M' AND T2.UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.SEX = 'F' AND T2.UA <= 6.5 THEN 1 ELSE 0 END) AS ratio FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 LEFT JOIN Examination AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.`Examination Date`) - strftime('%Y', T1.`First Date`) >= 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) > strftime('%Y', T2.`Examination Date`) - 18 AND strftime('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-BIL` > 2.0
SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1
SELECT AVG(strftime('%Y', '1991-10-01') - strftime('%Y', Birthday)) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE Date BETWEEN '1991-10-01' AND '1991-10-31')
SELECT STRFTIME('%Y', T1.`Examination Date`) - STRFTIME('%Y', T2.Birthday) AS Age, T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.HGB = (SELECT MAX(HGB) FROM Laboratory) LIMIT 1
SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'
SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END AS `Cholesterol Status` FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'
SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'AORTITIS' ORDER BY T2.`Examination Date` ASC LIMIT 1
SELECT T2.`aCL IgM` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T1.Description = '1994-02-19' AND T2.`Examination Date` = '1993-11-12'
SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9 AND T2.Date = '1992-06-12'
SELECT '1991' - STRFTIME('%Y', T2.Birthday) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.UA = 8.4 AND STRFTIME('%Y-%m-%d', T1.Date) = '1991-10-21'
SELECT COUNT(T2.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` = '1991-06-13' AND T1.Diagnosis = 'SJS' AND STRFTIME('%Y', T2.Date) = '1995'
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`Examination Date` = '1997-01-27' AND T2.Diagnosis = 'SLE' AND T1.`First Date` = (SELECT MIN(`First Date`) FROM Patient WHERE ID = T1.ID)
SELECT T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-03-01' AND T1.`Examination Date` = '1993-09-27'
SELECT CAST((SUM(CASE WHEN strftime('%Y-%m', T2.Date) = '1981-11' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN strftime('%Y-%m', T2.Date) = '1981-12' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN strftime('%Y-%m', T2.Date) = '1981-11' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Behcet' AND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1997' AND '1997'
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND T3.GPT > 30 AND T3.ALB < 4
SELECT ID FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Birthday) = '1964' AND Admission = '+'
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2 AND T1.`ANA Pattern` = 'S' AND T1.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination)
SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE NULL END) FROM Laboratory
SELECT CAST(SUM(CASE WHEN T1.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 WHERE T1.SEX = 'M' AND STRFTIME('%Y', T1.`First Date`) = '1981'
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND strftime('%Y-%m', T2.Date) = '1991-10' AND T2.`T-BIL` < 2.0
SELECT COUNT(P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.`ANA Pattern` != 'P' AND P.SEX = 'F' AND YEAR(P.Birthday) BETWEEN 1980 AND 1989
SELECT T2.SEX FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID WHERE T1.Diagnosis = 'PSS' AND T3.CRP > 2 AND T3.CRE = 1 AND T3.LDH = 123
SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.PLT > 400 AND T1.Diagnosis = 'SLE'
SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: What is the average age of patients with SLE disease? 'SLE' refers to diagnosis; average age refers to AVG(YEAR(CURRENT_DATE) - YEAR(Birthday)); */ SELECT AVG(YEAR(CURRENT_DATE) - YEAR(Birthday)) AS Average_Age FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'SLE') /* Answer the following: What is the gender distribution of patients with SLE disease? 'SLE' refers to diagnosis; gender distribution refers to COUNT(SEX); */ SELECT SEX, COUNT(*) AS Count FROM Patient WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'SLE') GROUP BY SEX /* Answer the following: What is the most common laboratory result for patients with SLE disease? 'SLE' refers to diagnosis; most common laboratory result refers to MAX(COUNT(*)); */ SELECT GOT, GPT, LDH, ALP, TP, ALB, UA, UN, CRE, `T-BIL`, `T-CHO`, TG, CPK, GLU, WBC, RBC, HGB, HCT, PLT, PT, APTT, FG, PIC, TAT, TAT2, `U-PRO`, IGG, IGA, IGM, CRP, RA, RF, C3, C4, RNP, SM, SC170, SSA, SSB, CENTROMEA, DNA, `DNA-II`, COUNT(*) AS Count FROM Laboratory WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'SLE') GROUP BY GOT, GPT, LDH, ALP, TP, ALB, UA, UN, CRE, `T-BIL`, `T-CHO`, TG, CPK, GLU, WBC, RBC, HGB, HCT, PLT, PT, APTT, FG, PIC, TAT, TAT2, `U-PRO`, IGG, IGA, IGM, CRP, RA, RF, C3, C4, RNP, SM, SC170, SSA, SSB, CENTROMEA, DNA, `DNA-II` ORDER BY Count DESC LIMIT 1 /* Answer the following: What is the average GOT level of patients with SLE disease? 'SLE' refers to diagnosis; average GOT level refers to AVG(GOT); */ SELECT AVG(GOT) AS Average_GOT FROM Laboratory WHERE ID IN (SELECT ID FROM Examination WHERE Diagnosis = 'SLE')
SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.Diagnosis = 'APS'
SELECT COUNT(DISTINCT T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`Date`) = '1997' AND (T1.TP < 6 OR T1.TP > 8.5)
SELECT CAST(SUM(CASE WHEN Examination.Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Examination.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) AS percentage FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Symptoms LIKE '%thrombocytopenia%'
SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) = '1980' AND Diagnosis = 'RA'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND T2.Diagnosis = 'BEHCET' AND T1.Admission = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5
SELECT DATEDIFF(`Examination Date`, `First Date`) AS days FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 821298 ORDER BY `Examination Date` LIMIT 1
SELECT CASE WHEN T1.SEX = 'M' AND T2.UA > 8.0 THEN 'Yes' WHEN T1.SEX = 'F' AND T2.UA > 6.5 THEN 'Yes' ELSE 'No' END AS 'Is_Uric_Acid_Normal' FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266
SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60
SELECT T2.SEX, T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Date) = '1994' AND T1.GOT < 60
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500
SELECT Patient.ID, YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday) AS Age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH BETWEEN 600 AND 800
SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300
SELECT Patient.ID, CASE WHEN Laboratory.ALP < 300 THEN 'Yes' ELSE 'No' END AS ALP_Normal_Range FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = '1982-04-01'
SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0
SELECT T1.TP - 8.5 AS TP_deviation FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.TP > 8.5
SELECT T1.ID, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC
SELECT T1.ID, CASE WHEN T2.ALB BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END AS Albumin_Range FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) = '1982'
SELECT (SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5) / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') * 100 AS percentage FROM dual
SELECT AVG(UA) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE (T2.SEX = 'M' AND T1.UA < 8.0) OR (T2.SEX = 'F' AND T1.UA < 6.5) AND T1.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = T1.ID)
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'RA' AND T2.UN < 30
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5
SELECT CASE WHEN (SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5) > (SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.CRE >= 1.5) THEN 'True' ELSE 'False' END AS result
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory )
SELECT T1.SEX, COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX
SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T1.Birthday, T2.`T-CHO` DESC LIMIT 1
SELECT CAST(SUM(strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS REAL) / COUNT(Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.`T-CHO` >= 250
SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday)) > 50
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.CPK < 250
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250
SELECT T1.ID, T1.SEX, YEAR(CURRENT_TIMESTAMP) - YEAR(T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250
SELECT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU < 180 AND STRFTIME('%Y', T1.Description) = '1991'
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX, T1.ID ORDER BY T1.Birthday ASC
SELECT T1.ID, T1.Diagnosis, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5 /* Answer the following: List all patients who have abnormal liver function test. State their ID, sex and age. abnormal liver function test refers to GOT > 40 or GPT > 40; age = SUBTRACT(year(current_timestamp), year(Birthday)); */ SELECT T1.ID, T1.SEX, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT > 40 OR T2.GPT > 40 /* Answer the following: Who are the patients with high cholesterol level? State their ID, sex and age. high cholesterol level refers to `T-CHO` > 200; age = SUBTRACT(year(current_timestamp), year(Birthday)); */ SELECT T1.ID, T1.SEX, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` > 200 /* Answer the following: List all patients who have abnormal kidney function test. State their ID, sex and age. abnormal kidney function test refers to CRE > 1.2; age = SUBTRACT(year(current_timestamp), year(Birthday)); */ SELECT T1.ID, T1.SEX, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE > 1.2 /* Answer the following: Who are the patients with high blood sugar level? State their ID, sex and age. high blood sugar level refers to GLU > 140; age = SUBTRACT(year(current_timestamp), year(Birthday)); */ SELECT T1.ID, T1.SEX, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 140
SELECT P.ID, P.SEX, P.Admission, L.RBC, CASE WHEN P.Admission = '+' THEN 'Admitted' ELSE 'Not Admitted' END AS Hospital_Admission FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50 AND (L.RBC <= 3.5 OR L.RBC >= 6.0)
SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.HGB < 10
SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB BETWEEN 10 AND 17 ORDER BY T1.Birthday ASC LIMIT 1
SELECT T1.ID, YEAR(CURRENT_TIMESTAMP) - YEAR(T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT >= 52 GROUP BY T1.ID HAVING COUNT(T2.ID) >= 2
SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29
SELECT SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS LowerThanNormal, SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS HigherThanNormal, (SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END)) AS Difference FROM Laboratory WHERE PLT IS NOT NULL
SELECT T2.ID, T2.SEX, T2.Birthday, T2.Description, T2.`First Date`, T2.Admission, T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Date) = '1984' AND (strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', T2.Birthday)) < 50 AND T1.PLT BETWEEN 100 AND 400
SELECT CAST(SUM(CASE WHEN T2.SEX = 'F' AND T1.PT >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.PT >= 14 THEN 1 ELSE 0 END) AS percentage FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE (strftime('%Y', 'now') - strftime('%Y', T2.Birthday)) > 55
SELECT T1.ID, T1.SEX, T1.Birthday, T1.Description, T1.`First Date`, T1.Admission, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.`First Date`) > '1992' AND T2.PT < 14
SELECT COUNT(ID) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT < 45
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.APTT > 45 AND T2.Thrombosis = 3
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC BETWEEN 3.5 AND 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1980-01-01' AND (T2.FG < 150 OR T2.FG > 450)
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` BETWEEN 0 AND 30 AND T1.Diagnosis = 'SLE'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.IGG < 900 AND T2.Symptoms = 'abortion'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.IGA BETWEEN 80 AND 500 ORDER BY T1.IGA DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND strftime('%Y', T1.`First Date`) >= '1990'
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.IGM NOT BETWEEN 40 AND 400 GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP LIKE '+' OR T2.CRP LIKE '-' OR T2.CRP < 1.0) AND T1.Description IS NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP NOT IN('+-', '-') AND T2.CRP >= 1.0 AND (YEAR(CURDATE()) - YEAR(T1.Birthday)) < 18
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.RA IN('-', '+-') AND T2.KCT = '+'
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE YEAR(T1.Birthday) >= 1995 AND T2.RA IN ('-', '+-')
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND (STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday)) > 60
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.RF < 20 AND T3.Thrombosis = 0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.C3 > 35 AND T2.`ANA Pattern` = 'P'
SELECT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT NOT BETWEEN 29 AND 52 ORDER BY T1.`aCL IgA` DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'APS' AND T2.C4 > 10
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP IN ('-', '+-') AND T1.Admission = '+';
SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP NOT IN('-', '+-') ORDER BY T1.Birthday DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SM IN ('-', '+-') AND T2.Thrombosis = 1
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN('-', '+-') ORDER BY T1.Birthday DESC LIMIT 3
SELECT ID FROM Examination WHERE `Examination Date` >= '1997-01-01' AND SC170 IN('-', '+-')
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T1.SEX = 'M' AND T2.Symptoms = 'vertigo' AND T3.SC170 IN('-', '+-')
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN('-','+-') AND strftime('%Y', T1.`First Date`) < '1990'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA NOT IN('-', '+-') ORDER BY T1.`First Date` ASC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SSB IN ('negative', '0') AND T2.Diagnosis = 'SLE'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SSB IN('-', '+-') AND T2.Symptoms IS NOT NULL
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CENTROMEA IN('-', '+-') AND T2.SSB IN('-', '+-')
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`DNA-II` >= 8 AND T1.Admission = '+'
SELECT CAST(SUM(CASE WHEN T1.GOT >= 60 AND T2.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) AS percentage FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GOT >= 60
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60
SELECT MAX(Birthday) FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE GOT >= 60 )
SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'
SELECT `First Date` FROM Patient WHERE ID = ( SELECT ID FROM Laboratory WHERE LDH < 500 ORDER BY LDH DESC LIMIT 1 ) ORDER BY `First Date` ASC LIMIT 1
SELECT ID, MAX(`First Date`) FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE LDH >= 500 )
SELECT COUNT(T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ALP >= 300 AND T2.Admission = '+'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5
SELECT T1.`Examination Date` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB BETWEEN 3.5 AND 5.5 ORDER BY T2.ALB DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB >= 3.5 AND T2.ALB <= 5.5 AND T2.TP >= 6.0 AND T2.TP <= 8.5
SELECT T2.`aCL IgG`, T2.`aCL IgM`, T2.`aCL IgA` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T1.SEX = 'F' AND T3.UA <= 7.2 AND T3.UA >= 3.7 ORDER BY T3.UA DESC LIMIT 1
SELECT MAX(T1.ANA) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CRE < 1.5 ORDER BY T3.`aCL IgA` DESC LIMIT 1
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2.0 AND T3.`ANA Pattern` LIKE '%P%'
SELECT T1.ANA FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0 ) LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` >= 250 AND T3.KCT = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.`T-CHO` < 250 AND T2.`ANA Pattern` = 'P'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.TG < 200 AND T3.Symptoms IS NOT NULL
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.TG < 200 ORDER BY T1.TG DESC LIMIT 1
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Thrombosis = 0 AND T3.CPK < 250
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')
SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND T1.Admission = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL
SELECT T1.ID, T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT > 100 AND T2.PLT < 400
SELECT AVG(T1.PT) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'M' AND T1.PT < 14
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Thrombosis IN (1, 2) AND T3.PT < 14
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design'
SELECT COUNT(link_to_member) FROM attendance WHERE link_to_event IN ( SELECT event_id FROM event WHERE event_name = "Women's Soccer" ) /* Answer the following: How much total income has the Student_Club received? */ SELECT SUM(amount) FROM income /* Answer the following: How much total expense has the Student_Club spent? */ SELECT SUM(cost) FROM expense /* Answer the following: How much budget is remaining for the Student_Club? */ SELECT SUM(remaining) FROM budget /* Answer the following: List all the members who have attended the event "Women's Soccer". */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T2.link_to_event IN ( SELECT event_id FROM event WHERE event_name = "Women's Soccer" ) /* Answer the following: List all the members who are from the city "Los Angeles". */ SELECT first_name, last_name FROM member WHERE zip IN ( SELECT zip_code FROM zip_code WHERE city = "Los Angeles" ) /* Answer the following: List all the members who are from the state "California". */ SELECT first_name, last_name FROM member WHERE zip IN ( SELECT zip_code FROM zip_code WHERE state = "California" )
SELECT T2.phone FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women's Soccer' AND T1.t_shirt_size = 'Medium'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id ORDER BY COUNT(T2.link_to_member) DESC LIMIT 1 /* Answer the following: What is the total budget spent on the event with the highest attendance? total budget spent refers to SUM(spent); event with highest attendance refers to MAX(COUNT(link_to_event)) */ SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN attendance AS T2 ON T1.link_to_event = T2.link_to_event GROUP BY T1.link_to_event ORDER BY COUNT(T2.link_to_member) DESC LIMIT 1 /* Answer the following: What is the major of the member who has attended the most number of events? major of the member refers to major_name; member who has attended the most number of events refers to MAX(COUNT(link_to_member)) */ SELECT T3.major_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id GROUP BY T1.member_id ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1 /* Answer the following: What is the total income received from the member who has attended the most number of events? total income received refers to SUM(amount); member who has attended the most number of events refers to MAX(COUNT(link_to_member)) */ SELECT SUM(T2.amount) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY COUNT(T2.link_to_member) DESC LIMIT 1 /* Answer the following: What is the total expense approved for the member who has attended the most number of events? total expense approved refers to SUM(cost); member who has attended the most number of events refers to MAX(COUNT(link_to_member)) */ SELECT SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.approved = 'Yes' GROUP BY T1.member_id ORDER BY COUNT(T2.link_to_member) DESC LIMIT 1 /* Answer the following: What is the total remaining budget for the event with the highest attendance? total remaining budget refers to SUM(remaining); event with highest attendance refers to MAX(COUNT(link_to_event)) */ SELECT SUM(T1.remaining) FROM budget AS T1 INNER JOIN attendance AS T2 ON T1.link_to_event = T2.link_to_event GROUP BY T1.link_to_event ORDER BY COUNT(T2.link_to_member) DESC LIMIT 1
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'
SELECT COUNT(*) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND STRFTIME('%Y', T1.event_date) = '2019'
SELECT COUNT(*) FROM ( SELECT event_id FROM attendance GROUP BY event_id HAVING COUNT(link_to_member) > 10 ) T1 INNER JOIN event AS T2 ON T1.event_id = T2.event_id WHERE T2.type = 'Meeting'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 20 /* Answer the following: List the names of all members who have spent more than $500 on expenses. names of members refers to first_name and last_name; spent more than $500 refers to SUM(cost) > 500 */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING SUM(T2.cost) > 500 /* Answer the following: List the names of all members who live in the state of California. names of members refers to first_name and last_name; state of California refers to state = 'California' */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'California' /* Answer the following: List the names of all members who are majoring in Computer Science. names of members refers to first_name and last_name; majoring in Computer Science refers to major_name = 'Computer Science' */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Computer Science' /* Answer the following: List the names of all members who have an income source of 'Scholarship'. names of members refers to first_name and last_name; income source of 'Scholarship' refers to source = 'Scholarship' */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Scholarship' /* Answer the following: List the names of all members who have a position of 'President'. names of members refers to first_name and last_name; position of 'President' refers to position = 'President' */ SELECT first_name, last_name FROM member WHERE position = 'President'
SELECT CAST(COUNT(T1.event_id) AS REAL) / COUNT(DISTINCT T1.event_name) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' AND strftime('%Y', T1.event_date) = '2020'
SELECT expense_description FROM expense WHERE cost = ( SELECT MAX(cost) FROM expense )
SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT T3.first_name, T3.last_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Laugh Out Loud'
SELECT last_name FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies' )
SELECT county FROM zip_code WHERE zip_code = ( SELECT zip FROM member WHERE first_name = 'Sherri' AND last_name = 'Ramsey' )
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'
SELECT SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President' /* Answer the following: How much money did the club spend on the event named 'Spring Festival'? 'Spring Festival' is an event name; money spent refers to cost; */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Spring Festival' /* Answer the following: How many members attended the event which happened on '2020-12-25'? '2020-12-25' is an event date; members attended refers to COUNT(link_to_member); */ SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_date = '2020-12-25' /* Answer the following: What is the remaining budget for the event named 'Summer Camp'? 'Summer Camp' is an event name; remaining budget refers to remaining; */ SELECT T1.remaining FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Summer Camp' /* Answer the following: How many members are from the zip code 12345? '12345' is a zip code; members refers to COUNT(member_id); */ SELECT COUNT(member_id) FROM member WHERE zip = 12345 /* Answer the following: What is the total income that the club received from 'Sponsorship'? 'Sponsorship' is a source of income; total income refers to SUM(amount); */ SELECT SUM(amount) FROM income WHERE source = 'Sponsorship' /* Answer the following: How many members are majoring in 'Computer Science'? 'Computer Science' is a major; members refers to COUNT(member_id); */ SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Computer Science'
SELECT T1.spent FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Meeting' AND T1.category = 'Food'
SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'
SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' AND T1.event_name = 'September Meeting'
SELECT T1.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name IN ('Pierce', 'Guidi')
SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Speaker'
SELECT T2.expense_description, T2.approved FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Meeting' AND T1.event_date = '2019-10-08'
SELECT AVG(cost) FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen') AND (strftime('%m', expense_date) = '09' OR strftime('%m', expense_date) = '10')
SELECT (SUM(CASE WHEN strftime('%Y', T2.event_date) = '2019' THEN T1.spent ELSE 0 END)) - (SUM(CASE WHEN strftime('%Y', T2.event_date) = '2020' THEN T1.spent ELSE 0 END)) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id
SELECT location FROM event WHERE event_name = 'Spring Budget Review' /* Answer the following: List all members who attended the event with event_id 'EVT123'. 'EVT123' is an event id; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T2.link_to_event = 'EVT123' /* Answer the following: What is the total amount spent on the event with event_id 'EVT456'? 'EVT456' is an event id; */ SELECT SUM(T2.cost) FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T1.link_to_event = 'EVT456' /* Answer the following: List all members who live in the city 'San Francisco'. 'San Francisco' is a city; */ SELECT first_name, last_name FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE city = 'San Francisco') /* Answer the following: What is the total income received from the source 'Donation'? 'Donation' is a source; */ SELECT SUM(amount) FROM income WHERE source = 'Donation' /* Answer the following: List all events that are 'Completed'. 'Completed' is a status; */ SELECT event_name FROM event WHERE status = 'Completed' /* Answer the following: What is the total budget remaining for the event with event_id 'EVT789'? 'EVT789' is an event id; */ SELECT SUM(remaining) FROM budget WHERE link_to_event = 'EVT789' /* Answer the following: List all members who are majoring in 'Computer Science'. 'Computer Science' is a major; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Computer Science'
SELECT T1.cost FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Posters' AND T1.expense_date = '2019-09-04'
SELECT remaining FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1 /* Answer the following: Who is the member with the most income? most income refers to MAX(SUM(income.amount)) */ SELECT T.first_name, T.last_name FROM ( SELECT T1.first_name, T1.last_name, SUM(T2.amount) AS num FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name ) AS T ORDER BY T.num DESC LIMIT 1 /* Answer the following: What is the most expensive expense? most expensive expense refers to MAX(expense.cost) */ SELECT expense_description, cost FROM expense ORDER BY cost DESC LIMIT 1 /* Answer the following: What is the event with the most attendees? most attendees refers to MAX(COUNT(attendance.link_to_event)) */ SELECT T.event_name FROM ( SELECT T1.event_name, COUNT(T2.link_to_event) AS num FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ) AS T ORDER BY T.num DESC LIMIT 1 /* Answer the following: What is the major of the member with the most income? most income refers to MAX(SUM(income.amount)) */ SELECT T.major_name FROM ( SELECT T1.major_name, SUM(T2.amount) AS num FROM major AS T1 INNER JOIN ( SELECT T3.link_to_major, SUM(T4.amount) AS num FROM member AS T3 INNER JOIN income AS T4 ON T3.member_id = T4.link_to_member GROUP BY T3.link_to_major ) AS T2 ON T1.major_id = T2.link_to_major ) AS T ORDER BY T.num DESC LIMIT 1 /* Answer the following: What is the zip code of the member with the most income? most income refers to MAX(SUM(income.amount)) */ SELECT T.zip FROM ( SELECT T1.zip, SUM(T2.amount) AS num FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.zip ) AS T ORDER BY T.num DESC LIMIT 1
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'
SELECT COUNT(major_id) FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'
SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'
SELECT COUNT(*) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0;
SELECT SUM(amount) FROM budget WHERE link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'September Speaker' )
SELECT T3.status FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.expense_description = 'Post Cards, Posters' AND T1.expense_date = '2019-8-20'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development and Family Studies' AND T1.t_shirt_size = 'Large'
SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'
SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.source = 'Dues' /* Answer the following: What is the total amount of expenses approved for the event named 'Spring Festival'? */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T2.event_name = 'Spring Festival' AND T1.approved = 'Yes' /* Answer the following: How many members are from the zip code 94107? */ SELECT COUNT(*) FROM member WHERE zip = 94107 /* Answer the following: What is the remaining budget for the event named 'Summer Camp'? */ SELECT T1.remaining FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Summer Camp' /* Answer the following: Who is the member with the position 'President'? */ SELECT first_name, last_name FROM member WHERE position = 'President' /* Answer the following: What is the total income received from 'Sponsorship'? */ SELECT SUM(amount) FROM income WHERE source = 'Sponsorship' /* Answer the following: What is the total amount spent on 'Food and Drinks' for the event named 'Winter Gala'? */ SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Winter Gala' AND T1.category = 'Food and Drinks' /* Answer the following: How many members are in the 'Computer Science' major? */ SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Computer Science' /* Answer the following: What is the total amount of income received on '1/1/2020'? */ SELECT SUM(amount) FROM income WHERE date_received LIKE '1/1/2020%' /* Answer the following: What is the total amount of expenses for the event named 'Fall Festival' that are not approved? */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T2.event_name = 'Fall Festival' AND T1.approved = 'No'
SELECT T2.first_name, T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.source = 'Dues' ORDER BY T1.date_received ASC LIMIT 1 /* Answer the following: What is the total amount of budget for the event 'Annual Meeting'? total amount of budget refers to SUM(amount) where event_name = 'Annual Meeting' */ SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Annual Meeting' /* Answer the following: Who is the member with the most expenses? Include the full name. most expenses refers to MAX(SUM(cost)); full name refers to first_name, last_name */ SELECT T2.first_name, T2.last_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id GROUP BY T2.first_name, T2.last_name ORDER BY SUM(T1.cost) DESC LIMIT 1 /* Answer the following: What is the total income from 'Sponsorship'? total income refers to SUM(amount) where source = 'Sponsorship' */ SELECT SUM(amount) FROM income WHERE source = 'Sponsorship' /* Answer the following: Who are the members from the 'Computer Science' department? Include their full names. members from 'Computer Science' department refers to department = 'Computer Science'; full names refer to first_name, last_name */ SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.department = 'Computer Science'
SELECT CAST(SUM(CASE WHEN T2.category = 'Advertisement' AND T1.event_name = 'Yearly Kickoff' THEN T2.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.category = 'Advertisement' AND T1.event_name = 'October Meeting' THEN T2.amount ELSE 0 END) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event
SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'
SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'
SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'
SELECT T2.expense_description FROM Budget AS T1 INNER JOIN Expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining ASC LIMIT 1 /* Answer the following: What is the name of the member who has the lowest income? lowest income refers to MIN(amount); name of the member refers to first_name and last_name */ SELECT T2.first_name, T2.last_name FROM Income AS T1 INNER JOIN Member AS T2 ON T1.link_to_member = T2.member_id ORDER BY T1.amount ASC LIMIT 1 /* Answer the following: What is the name of the event with the lowest budget? lowest budget refers to MIN(amount); name of the event refers to event_name */ SELECT T2.event_name FROM Budget AS T1 INNER JOIN Event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount ASC LIMIT 1 /* Answer the following: What is the name of the major with the most members? most members refers to COUNT(member_id); name of the major refers to major_name */ SELECT T2.major_name FROM Member AS T1 INNER JOIN Major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_name ORDER BY COUNT(T1.member_id) DESC LIMIT 1 /* Answer the following: What is the name of the event with the most attendees? most attendees refers to COUNT(link_to_member); name of the event refers to event_name */ SELECT T2.event_name FROM Attendance AS T1 INNER JOIN Event AS T2 ON T1.link_to_event = T2.event_id GROUP BY T2.event_name ORDER BY COUNT(T1.link_to_member) DESC LIMIT 1 /* Answer the following: What is the name of the city with the most members? most members refers to COUNT(member_id); name of the city refers to city */ SELECT T2.city FROM Member AS T1 INNER JOIN Zip_Code AS T2 ON T1.zip = T2.zip_code GROUP BY T2.city ORDER BY COUNT(T1.member_id) DESC LIMIT 1
SELECT T2.first_name, T2.last_name FROM event AS T1 INNER JOIN attendance AS T3 ON T1.event_id = T3.link_to_event INNER JOIN member AS T2 ON T3.link_to_member = T2.member_id WHERE T1.event_name = 'October Meeting'
SELECT T.college FROM ( SELECT T2.college, COUNT(T1.member_id) AS num FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.college ) T ORDER BY T.num DESC LIMIT 1
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? member refers to first_name and last_name; highest income refers to MAX(amount) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which city has the most members? city refers to city; most members refers to MAX(COUNT(member_id)) */ SELECT T1.city FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip ORDER BY COUNT(T2.member_id) DESC LIMIT 1 /* Answer the following: Which major has the most members? major refers to major_name; most members refers to MAX(COUNT(member_id)) */ SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major ORDER BY COUNT(T2.member_id) DESC LIMIT 1 /* Answer the following: Which event has the most attendees? event refers to event_name; most attendees refers to MAX(COUNT(link_to_member)) */ SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event ORDER BY COUNT(T2.link_to_member) DESC LIMIT 1 /* Answer the following: Which member has the most expenses? member refers to first_name and last_name; most expenses refers to MAX(COUNT(expense_id)) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY COUNT(T2.expense_id) DESC LIMIT 1
SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'
SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women's Soccer'
SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason'
SELECT COUNT(DISTINCT T1.member_id) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland'
SELECT COUNT(link_to_event) FROM attendance WHERE link_to_member = ( SELECT member_id FROM member WHERE phone = '954-555-6240' )
SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.department = 'School of Applied Sciences, Technology and Education'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' ORDER BY (T2.spent / T2.amount) DESC LIMIT 1
SELECT COUNT(member_id) FROM member WHERE position = 'President'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.spent DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(amount) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(cost) */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member attended the most events? most events refers to COUNT(link_to_event) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1 /* Answer the following: Which major has the most members? most members refers to COUNT(link_to_major) */ SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.major_id ORDER BY COUNT(T2.link_to_major) DESC LIMIT 1 /* Answer the following: Which zip code has the most members? most members refers to COUNT(zip) */ SELECT T1.zip_code FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip GROUP BY T1.zip_code ORDER BY COUNT(T2.zip) DESC LIMIT 1
SELECT COUNT(event_id) FROM event WHERE STRFTIME('%Y', event_date) = '2020' AND type = 'Meeting'
SELECT SUM(spent) FROM budget WHERE category = 'Food'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(T2.link_to_event) > 7
SELECT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id INNER JOIN major AS T4 ON T2.link_to_major = T4.major_id WHERE T4.major_name = 'Interior Design' AND T3.event_name = 'Community Theater'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'
SELECT SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Grant' AND T2.last_name = 'Gilmour'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40
SELECT SUM(cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Yearly Kickoff' /* Answer the following: How many members attended the event 'Baseball game'? 'Baseball game' is an event name; number of members refers to COUNT(link_to_member) */ SELECT COUNT(link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Baseball game' /* Answer the following: What is the total income from the source 'Donation'? 'Donation' is a source; total income refers to SUM(amount) */ SELECT SUM(amount) FROM income WHERE source = 'Donation' /* Answer the following: What is the remaining budget for the event 'Yearly Kickoff'? 'Yearly Kickoff' is an event name; remaining budget refers to remaining */ SELECT remaining FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Yearly Kickoff' /* Answer the following: How many members are from the zip code 12345? 12345 is a zip code; number of members refers to COUNT(member_id) */ SELECT COUNT(member_id) FROM member WHERE zip = 12345 /* Answer the following: What is the total spent on the category 'Food' for the event 'Yearly Kickoff'? 'Food' is a category; 'Yearly Kickoff' is an event name; total spent refers to spent */ SELECT spent FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Yearly Kickoff' AND T1.category = 'Food'
SELECT T2.first_name, T2.last_name FROM budget AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff' /* Answer the following: What is the total income received from the 'Sponsorship' source? 'Sponsorship' is a source; */ SELECT SUM(T1.amount) FROM income AS T1 WHERE T1.source = 'Sponsorship' /* Answer the following: How many members are from the 'Computer Science' major? 'Computer Science' is a major_name; */ SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Computer Science' /* Answer the following: What is the total cost of expenses approved by 'John Doe'? 'John Doe' is a member; */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'John' AND T2.last_name = 'Doe' AND T1.approved = 'Yes' /* Answer the following: How many members are from the 'Engineering' department? 'Engineering' is a department; */ SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Engineering' /* Answer the following: What is the total remaining budget for the 'Food and Drinks' category? 'Food and Drinks' is a category; */ SELECT SUM(T1.remaining) FROM budget AS T1 WHERE T1.category = 'Food and Drinks' /* Answer the following: How many members live in the 'San Francisco' city? 'San Francisco' is a city; */ SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'San Francisco' /* Answer the following: What is the total amount spent on the 'Marketing' category? 'Marketing' is a category; */ SELECT SUM(T1.spent) FROM budget AS T1 WHERE T1.category = 'Marketing' /* Answer the following: How many members have a 'Medium' t-shirt size? 'Medium' is a t_shirt_size; */ SELECT COUNT(T1.member_id) FROM member AS T1 WHERE T1.t_shirt_size = 'Medium' /* Answer the following: What is the total income received in the '2020-01-01' to '2020-12-31' period? '2020-01-01' to '2020-12-31' is a date_received range; */ SELECT SUM(T1.amount) FROM income AS T1 WHERE T1.date_received BETWEEN '2020-01-01' AND '2020-12-31'
SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: What is the total budget for each event? total budget refers to SUM(budget.amount); for each event refers to event.event_name; */ SELECT T1.event_name, SUM(T2.amount) AS total_budget FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name /* Answer the following: List down the names of members who have not paid their dues. names of members refers to member.first_name, member.last_name; have not paid their dues refers to expense.approved = 'no'; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.approved = 'no' /* Answer the following: Which event has the highest remaining budget? highest remaining budget refers to MAX(budget.remaining); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.remaining DESC LIMIT 1 /* Answer the following: Which member lives in the city with the most members? city with the most members refers to MAX(COUNT(zip_code.city)); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code GROUP BY T2.city ORDER BY COUNT(T2.city) DESC LIMIT 1 /* Answer the following: What is the total cost of each event? total cost refers to SUM(expense.cost); each event refers to event.event_name; */ SELECT T1.event_name, SUM(T2.cost) AS total_cost FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget GROUP BY T1.event_name /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest expense? highest expense refers to MAX(expense.cost); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(expense.cost); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(budget.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest budget? highest budget refers to MAX(budget.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest income? highest income refers to MAX(income.amount); event refers to event.event_name; */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(income.amount); member refers to member.first_name, member.last_name; */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY
SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.cost ASC LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T2.cost ELSE 0 END) AS REAL) * 100 / SUM(T2.cost) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event
SELECT CAST(SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) FROM major
SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC LIMIT 1
SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'
SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching'
SELECT COUNT(DISTINCT T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND STRFTIME('%Y', T1.event_date) = '2019'
SELECT COUNT(T1.link_to_event), T4.major_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN major AS T4 ON T2.link_to_major = T4.major_id WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'
SELECT AVG(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.spent DESC LIMIT 1
SELECT CASE WHEN EXISTS ( SELECT 1 FROM "attendance" AS T1 INNER JOIN "event" AS T2 ON T1.link_to_event = T2.event_id INNER JOIN "member" AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women's Soccer' AND T3.first_name = 'Maya' AND T3.last_name = 'Mclean' ) THEN 'Yes' ELSE 'No' END AS "Did Maya Mclean attend the 'Women's Soccer' event?"
SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) FROM event WHERE strftime('%Y', event_date) = '2019'
SELECT T1.cost FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.expense_description = 'Posters' AND T2.event_name = 'September Speaker'
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: How much money has been spent on each event? */ SELECT link_to_event, SUM(spent) FROM budget GROUP BY link_to_event /* Answer the following: How many members attended each event? */ SELECT link_to_event, COUNT(link_to_member) FROM attendance GROUP BY link_to_event /* Answer the following: What is the total income of the club? */ SELECT SUM(amount) FROM income /* Answer the following: What is the total expense of the club? */ SELECT SUM(cost) FROM expense /* Answer the following: What is the net income of the club? net income refers to total income - total expense */ SELECT (SELECT SUM(amount) FROM income) - (SELECT SUM(cost) FROM expense) AS net_income /* Answer the following: Which event has the highest budget? highest budget refers to MAX(amount) */ SELECT link_to_event FROM budget ORDER BY amount DESC LIMIT 1 /* Answer the following: Which member has contributed the most to the club? most contribution refers to MAX(amount) in income table */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY SUM(amount) DESC LIMIT 1 /* Answer the following: Which member has the highest expense? highest expense refers to MAX(cost) in expense table */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY SUM(cost) DESC LIMIT 1 /* Answer the following: Which event has the most attendees? most attendees refers to MAX(COUNT(link_to_member)) */ SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_member) DESC LIMIT 1 /* Answer the following: Which major has the most members? most members refers to MAX(COUNT(link_to_major)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which zip code has the most members? most members refers to MAX(COUNT(zip)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which event has the most remaining budget? most remaining budget refers to MAX(remaining) */ SELECT link_to_event FROM budget ORDER BY remaining DESC LIMIT 1 /* Answer the following: Which event has the most spent budget? most spent budget refers to MAX(spent) */ SELECT link_to_event FROM budget ORDER BY spent DESC LIMIT 1 /* Answer the following: Which event has the most approved expenses? most approved expenses refers to MAX(COUNT(approved)) where approved = 'Yes' */ SELECT link_to_budget FROM expense WHERE approved = 'Yes' GROUP BY link_to_budget ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most approved expenses? most approved expenses refers to MAX(COUNT(approved)) where approved = 'Yes' */ SELECT link_to_member FROM expense WHERE approved = 'Yes' GROUP BY link_to_member ORDER BY COUNT(*) DESC LIMIT 1 /* Answer the following: Which member has the most income contributions? most income contributions refers to MAX(SUM(amount)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY SUM(amount) DESC LIMIT 1 /* Answer the following: Which member has the most expense contributions? most expense contributions refers to MAX(SUM(cost)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY SUM(cost) DESC LIMIT 1 /* Answer the following: Which event has the most income contributions? most income contributions refers to MAX(SUM(amount)) where source = 'Event' */ SELECT link_to_event FROM income WHERE source = 'Event' GROUP BY link_to_event ORDER BY SUM(amount) DESC LIMIT 1 /* Answer the following: Which event has the most expense contributions? most expense contributions refers to MAX(SUM(cost)) where expense_description like '%Event%' */ SELECT link_to_budget FROM expense WHERE expense_description LIKE '%Event%' GROUP BY link_to_budget ORDER BY SUM(cost) DESC LIMIT 1 /* Answer the following: Which member has the most event attendances? most event attendances refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which event has the most member attendances? most member attendances refers to MAX(COUNT(link_to_member)) */ SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_member) DESC LIMIT 1 /* Answer the following: Which member has the most event budgets? most event budgets refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM budget GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which event has the most member budgets? most member budgets refers to MAX(COUNT(link_to_member)) */ SELECT link_to_event FROM budget GROUP BY link_to_event ORDER BY COUNT(link_to_member) DESC LIMIT 1 /* Answer the following: Which member has the most event expenses? most event expenses refers to MAX(COUNT(link_to_budget)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY COUNT(link_to_budget) DESC LIMIT 1 /* Answer the following: Which event has the most member expenses? most member expenses refers to MAX(COUNT(link_to_member)) */ SELECT link_to_budget FROM expense GROUP BY link_to_budget ORDER BY COUNT(link_to_member) DESC LIMIT 1 /* Answer the following: Which member has the most event incomes? most event incomes refers to MAX(COUNT(link_to_event)) where source = 'Event' */ SELECT link_to_member FROM income WHERE source = 'Event' GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which event has the most member incomes? most member incomes refers to MAX(COUNT(link_to_member)) where source = 'Event' */ SELECT link_to_event FROM income WHERE source = 'Event' GROUP BY link_to_event ORDER BY COUNT(link_to_member) DESC LIMIT 1 /* Answer the following: Which member has the most event notes? most event notes refers to MAX(COUNT(notes)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(notes) DESC LIMIT 1 /* Answer the following: Which event has the most member notes? most member notes refers to MAX(COUNT(notes)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(notes) DESC LIMIT 1 /* Answer the following: Which member has the most event types? most event types refers to MAX(COUNT(type)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(type) DESC LIMIT 1 /* Answer the following: Which event has the most member types? most member types refers to MAX(COUNT(type)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(type) DESC LIMIT 1 /* Answer the following: Which member has the most event statuses? most event statuses refers to MAX(COUNT(status)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(status) DESC LIMIT 1 /* Answer the following: Which event has the most member statuses? most member statuses refers to MAX(COUNT(status)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(status) DESC LIMIT 1 /* Answer the following: Which member has the most event locations? most event locations refers to MAX(COUNT(location)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(location) DESC LIMIT 1 /* Answer the following: Which event has the most member locations? most member locations refers to MAX(COUNT(location)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(location) DESC LIMIT 1 /* Answer the following: Which member has the most event dates? most event dates refers to MAX(COUNT(event_date)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_date) DESC LIMIT 1 /* Answer the following: Which event has the most member dates? most member dates refers to MAX(COUNT(event_date)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_date) DESC LIMIT 1 /* Answer the following: Which member has the most event names? most event names refers to MAX(COUNT(event_name)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_name) DESC LIMIT 1 /* Answer the following: Which event has the most member names? most member names refers to MAX(COUNT(event_name)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_name) DESC LIMIT 1 /* Answer the following: Which member has the most event ids? most event ids refers to MAX(COUNT(event_id)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_id) DESC LIMIT 1 /* Answer the following: Which event has the most member ids? most member ids refers to MAX(COUNT(event_id)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_id) DESC LIMIT 1 /* Answer the following: Which member has the most major ids? most major ids refers to MAX(COUNT(major_id)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(major_id) DESC LIMIT 1 /* Answer the following: Which major has the most member ids? most member ids refers to MAX(COUNT(major_id)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(major_id) DESC LIMIT 1 /* Answer the following: Which member has the most zip codes? most zip codes refers to MAX(COUNT(zip_code)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(zip_code) DESC LIMIT 1 /* Answer the following: Which zip code has the most member ids? most member ids refers to MAX(COUNT(zip_code)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(zip_code) DESC LIMIT 1 /* Answer the following: Which member has the most budget ids? most budget ids refers to MAX(COUNT(budget_id)) */ SELECT link_to_member FROM budget GROUP BY link_to_member ORDER BY COUNT(budget_id) DESC LIMIT 1 /* Answer the following: Which budget has the most member ids? most member ids refers to MAX(COUNT(budget_id)) */ SELECT link_to_member FROM budget GROUP BY link_to_member ORDER BY COUNT(budget_id) DESC LIMIT 1 /* Answer the following: Which member has the most expense ids? most expense ids refers to MAX(COUNT(expense_id)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY COUNT(expense_id) DESC LIMIT 1 /* Answer the following: Which expense has the most member ids? most member ids refers to MAX(COUNT(expense_id)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY COUNT(expense_id) DESC LIMIT 1 /* Answer the following: Which member has the most income ids? most income ids refers to MAX(COUNT(income_id)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY COUNT(income_id) DESC LIMIT 1 /* Answer the following: Which income has the most member ids? most member ids refers to MAX(COUNT(income_id)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY COUNT(income_id) DESC LIMIT 1 /* Answer the following: Which member has the most attendance ids? most attendance ids refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which attendance has the most member ids? most member ids refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event names? most event names refers to MAX(COUNT(event_name)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_name) DESC LIMIT 1 /* Answer the following: Which event has the most member names? most member names refers to MAX(COUNT(event_name)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_name) DESC LIMIT 1 /* Answer the following: Which member has the most event dates? most event dates refers to MAX(COUNT(event_date)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_date) DESC LIMIT 1 /* Answer the following: Which event has the most member dates? most member dates refers to MAX(COUNT(event_date)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_date) DESC LIMIT 1 /* Answer the following: Which member has the most event types? most event types refers to MAX(COUNT(type)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(type) DESC LIMIT 1 /* Answer the following: Which event has the most member types? most member types refers to MAX(COUNT(type)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(type) DESC LIMIT 1 /* Answer the following: Which member has the most event statuses? most event statuses refers to MAX(COUNT(status)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(status) DESC LIMIT 1 /* Answer the following: Which event has the most member statuses? most member statuses refers to MAX(COUNT(status)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(status) DESC LIMIT 1 /* Answer the following: Which member has the most event locations? most event locations refers to MAX(COUNT(location)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(location) DESC LIMIT 1 /* Answer the following: Which event has the most member locations? most member locations refers to MAX(COUNT(location)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(location) DESC LIMIT 1 /* Answer the following: Which member has the most event notes? most event notes refers to MAX(COUNT(notes)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(notes) DESC LIMIT 1 /* Answer the following: Which event has the most member notes? most member notes refers to MAX(COUNT(notes)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(notes) DESC LIMIT 1 /* Answer the following: Which member has the most event ids? most event ids refers to MAX(COUNT(event_id)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_id) DESC LIMIT 1 /* Answer the following: Which event has the most member ids? most member ids refers to MAX(COUNT(event_id)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_id) DESC LIMIT 1 /* Answer the following: Which member has the most major ids? most major ids refers to MAX(COUNT(major_id)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(major_id) DESC LIMIT 1 /* Answer the following: Which major has the most member ids? most member ids refers to MAX(COUNT(major_id)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(major_id) DESC LIMIT 1 /* Answer the following: Which member has the most zip codes? most zip codes refers to MAX(COUNT(zip_code)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(zip_code) DESC LIMIT 1 /* Answer the following: Which zip code has the most member ids? most member ids refers to MAX(COUNT(zip_code)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(zip_code) DESC LIMIT 1 /* Answer the following: Which member has the most budget ids? most budget ids refers to MAX(COUNT(budget_id)) */ SELECT link_to_member FROM budget GROUP BY link_to_member ORDER BY COUNT(budget_id) DESC LIMIT 1 /* Answer the following: Which budget has the most member ids? most member ids refers to MAX(COUNT(budget_id)) */ SELECT link_to_member FROM budget GROUP BY link_to_member ORDER BY COUNT(budget_id) DESC LIMIT 1 /* Answer the following: Which member has the most expense ids? most expense ids refers to MAX(COUNT(expense_id)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY COUNT(expense_id) DESC LIMIT 1 /* Answer the following: Which expense has the most member ids? most member ids refers to MAX(COUNT(expense_id)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY COUNT(expense_id) DESC LIMIT 1 /* Answer the following: Which member has the most income ids? most income ids refers to MAX(COUNT(income_id)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY COUNT(income_id) DESC LIMIT 1 /* Answer the following: Which income has the most member ids? most member ids refers to MAX(COUNT(income_id)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY COUNT(income_id) DESC LIMIT 1 /* Answer the following: Which member has the most attendance ids? most attendance ids refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which attendance has the most member ids? most member ids refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event names? most event names refers to MAX(COUNT(event_name)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_name) DESC LIMIT 1 /* Answer the following: Which event has the most member names? most member names refers to MAX(COUNT(event_name)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_name) DESC LIMIT 1 /* Answer the following: Which member has the most event dates? most event dates refers to MAX(COUNT(event_date)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_date) DESC LIMIT 1 /* Answer the following: Which event has the most member dates? most member dates refers to MAX(COUNT(event_date)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_date) DESC LIMIT 1 /* Answer the following: Which member has the most event types? most event types refers to MAX(COUNT(type)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(type) DESC LIMIT 1 /* Answer the following: Which event has the most member types? most member types refers to MAX(COUNT(type)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(type) DESC LIMIT 1 /* Answer the following: Which member has the most event statuses? most event statuses refers to MAX(COUNT(status)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(status) DESC LIMIT 1 /* Answer the following: Which event has the most member statuses? most member statuses refers to MAX(COUNT(status)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(status) DESC LIMIT 1 /* Answer the following: Which member has the most event locations? most event locations refers to MAX(COUNT(location)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(location) DESC LIMIT 1 /* Answer the following: Which event has the most member locations? most member locations refers to MAX(COUNT(location)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(location) DESC LIMIT 1 /* Answer the following: Which member has the most event notes? most event notes refers to MAX(COUNT(notes)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(notes) DESC LIMIT 1 /* Answer the following: Which event has the most member notes? most member notes refers to MAX(COUNT(notes)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(notes) DESC LIMIT 1 /* Answer the following: Which member has the most event ids? most event ids refers to MAX(COUNT(event_id)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_id) DESC LIMIT 1 /* Answer the following: Which event has the most member ids? most member ids refers to MAX(COUNT(event_id)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_id) DESC LIMIT 1 /* Answer the following: Which member has the most major ids? most major ids refers to MAX(COUNT(major_id)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(major_id) DESC LIMIT 1 /* Answer the following: Which major has the most member ids? most member ids refers to MAX(COUNT(major_id)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(major_id) DESC LIMIT 1 /* Answer the following: Which member has the most zip codes? most zip codes refers to MAX(COUNT(zip_code)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(zip_code) DESC LIMIT 1 /* Answer the following: Which zip code has the most member ids? most member ids refers to MAX(COUNT(zip_code)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(zip_code) DESC LIMIT 1 /* Answer the following: Which member has the most budget ids? most budget ids refers to MAX(COUNT(budget_id)) */ SELECT link_to_member FROM budget GROUP BY link_to_member ORDER BY COUNT(budget_id) DESC LIMIT 1 /* Answer the following: Which budget has the most member ids? most member ids refers to MAX(COUNT(budget_id)) */ SELECT link_to_member FROM budget GROUP BY link_to_member ORDER BY COUNT(budget_id) DESC LIMIT 1 /* Answer the following: Which member has the most expense ids? most expense ids refers to MAX(COUNT(expense_id)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY COUNT(expense_id) DESC LIMIT 1 /* Answer the following: Which expense has the most member ids? most member ids refers to MAX(COUNT(expense_id)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY COUNT(expense_id) DESC LIMIT 1 /* Answer the following: Which member has the most income ids? most income ids refers to MAX(COUNT(income_id)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY COUNT(income_id) DESC LIMIT 1 /* Answer the following: Which income has the most member ids? most member ids refers to MAX(COUNT(income_id)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY COUNT(income_id) DESC LIMIT 1 /* Answer the following: Which member has the most attendance ids? most attendance ids refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which attendance has the most member ids? most member ids refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event names? most event names refers to MAX(COUNT(event_name)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_name) DESC LIMIT 1 /* Answer the following: Which event has the most member names? most member names refers to MAX(COUNT(event_name)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_name) DESC LIMIT 1 /* Answer the following: Which member has the most event dates? most event dates refers to MAX(COUNT(event_date)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_date) DESC LIMIT 1 /* Answer the following: Which event has the most member dates? most member dates refers to MAX(COUNT(event_date)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_date) DESC LIMIT 1 /* Answer the following: Which member has the most event types? most event types refers to MAX(COUNT(type)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(type) DESC LIMIT 1 /* Answer the following: Which event has the most member types? most member types refers to MAX(COUNT(type)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(type) DESC LIMIT 1 /* Answer the following: Which member has the most event statuses? most event statuses refers to MAX(COUNT(status)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(status) DESC LIMIT 1 /* Answer the following: Which event has the most member statuses? most member statuses refers to MAX(COUNT(status)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(status) DESC LIMIT 1 /* Answer the following: Which member has the most event locations? most event locations refers to MAX(COUNT(location)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(location) DESC LIMIT 1 /* Answer the following: Which event has the most member locations? most member locations refers to MAX(COUNT(location)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(location) DESC LIMIT 1 /* Answer the following: Which member has the most event notes? most event notes refers to MAX(COUNT(notes)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(notes) DESC LIMIT 1 /* Answer the following: Which event has the most member notes? most member notes refers to MAX(COUNT(notes)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(notes) DESC LIMIT 1 /* Answer the following: Which member has the most event ids? most event ids refers to MAX(COUNT(event_id)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_id) DESC LIMIT 1 /* Answer the following: Which event has the most member ids? most member ids refers to MAX(COUNT(event_id)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_id) DESC LIMIT 1 /* Answer the following: Which member has the most major ids? most major ids refers to MAX(COUNT(major_id)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(major_id) DESC LIMIT 1 /* Answer the following: Which major has the most member ids? most member ids refers to MAX(COUNT(major_id)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(major_id) DESC LIMIT 1 /* Answer the following: Which member has the most zip codes? most zip codes refers to MAX(COUNT(zip_code)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(zip_code) DESC LIMIT 1 /* Answer the following: Which zip code has the most member ids? most member ids refers to MAX(COUNT(zip_code)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(zip_code) DESC LIMIT 1 /* Answer the following: Which member has the most budget ids? most budget ids refers to MAX(COUNT(budget_id)) */ SELECT link_to_member FROM budget GROUP BY link_to_member ORDER BY COUNT(budget_id) DESC LIMIT 1 /* Answer the following: Which budget has the most member ids? most member ids refers to MAX(COUNT(budget_id)) */ SELECT link_to_member FROM budget GROUP BY link_to_member ORDER BY COUNT(budget_id) DESC LIMIT 1 /* Answer the following: Which member has the most expense ids? most expense ids refers to MAX(COUNT(expense_id)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY COUNT(expense_id) DESC LIMIT 1 /* Answer the following: Which expense has the most member ids? most member ids refers to MAX(COUNT(expense_id)) */ SELECT link_to_member FROM expense GROUP BY link_to_member ORDER BY COUNT(expense_id) DESC LIMIT 1 /* Answer the following: Which member has the most income ids? most income ids refers to MAX(COUNT(income_id)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY COUNT(income_id) DESC LIMIT 1 /* Answer the following: Which income has the most member ids? most member ids refers to MAX(COUNT(income_id)) */ SELECT link_to_member FROM income GROUP BY link_to_member ORDER BY COUNT(income_id) DESC LIMIT 1 /* Answer the following: Which member has the most attendance ids? most attendance ids refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which attendance has the most member ids? most member ids refers to MAX(COUNT(link_to_event)) */ SELECT link_to_member FROM attendance GROUP BY link_to_member ORDER BY COUNT(link_to_event) DESC LIMIT 1 /* Answer the following: Which member has the most event names? most event names refers to MAX(COUNT(event_name)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_name) DESC LIMIT 1 /* Answer the following: Which event has the most member names? most member names refers to MAX(COUNT(event_name)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_name) DESC LIMIT 1 /* Answer the following: Which member has the most event dates? most event dates refers to MAX(COUNT(event_date)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_date) DESC LIMIT 1 /* Answer the following: Which event has the most member dates? most member dates refers to MAX(COUNT(event_date)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_date) DESC LIMIT 1 /* Answer the following: Which member has the most event types? most event types refers to MAX(COUNT(type)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(type) DESC LIMIT 1 /* Answer the following: Which event has the most member types? most member types refers to MAX(COUNT(type)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(type) DESC LIMIT 1 /* Answer the following: Which member has the most event statuses? most event statuses refers to MAX(COUNT(status)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(status) DESC LIMIT 1 /* Answer the following: Which event has the most member statuses? most member statuses refers to MAX(COUNT(status)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(status) DESC LIMIT 1 /* Answer the following: Which member has the most event locations? most event locations refers to MAX(COUNT(location)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(location) DESC LIMIT 1 /* Answer the following: Which event has the most member locations? most member locations refers to MAX(COUNT(location)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(location) DESC LIMIT 1 /* Answer the following: Which member has the most event notes? most event notes refers to MAX(COUNT(notes)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(notes) DESC LIMIT 1 /* Answer the following: Which event has the most member notes? most member notes refers to MAX(COUNT(notes)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(notes) DESC LIMIT 1 /* Answer the following: Which member has the most event ids? most event ids refers to MAX(COUNT(event_id)) */ SELECT link_to_member FROM event GROUP BY link_to_member ORDER BY COUNT(event_id) DESC LIMIT 1 /* Answer the following: Which event has the most member ids? most member ids refers to MAX(COUNT(event_id)) */ SELECT link_to_event FROM event GROUP BY link_to_event ORDER BY COUNT(event_id) DESC LIMIT 1 /* Answer the following: Which member has the most major ids? most major ids refers to MAX(COUNT(major_id)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(major_id) DESC LIMIT 1 /* Answer the following: Which major has the most member ids? most member ids refers to MAX(COUNT(major_id)) */ SELECT link_to_major FROM member GROUP BY link_to_major ORDER BY COUNT(major_id) DESC LIMIT 1 /* Answer the following: Which member has the most zip codes? most zip codes refers to MAX(COUNT(zip_code)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(zip_code) DESC LIMIT 1 /* Answer the following: Which zip code has the most member ids? most member ids refers to MAX(COUNT(zip_code)) */ SELECT zip FROM member GROUP BY zip ORDER BY COUNT(zip_code) DESC LIMIT 1 /* Answer the following: Which member has the most budget ids? most budget ids refers to MAX(COUNT(budget_id)) */ SELECT link_to_member FROM budget GROUP BY link_to_member ORDER BY COUNT(budget_id) DESC LIMIT 1 /* Answer the following: Which budget has the most member ids? most member ids refers to MAX(COUNT(budget_id)) */ SELECT link
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.remaining < 0 ORDER BY T2.remaining ASC LIMIT 1
SELECT T1.expense_description, SUM(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting' AND T1.approved = 'Yes' GROUP BY T1.expense_description /* Answer the following: List down the names of members who attended the 'Annual Conference' event. 'Annual Conference' is an event name; */ SELECT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Annual Conference' /* Answer the following: Calculate the total income received from 'Sponsorship' source. total income refers to SUM(amount); 'Sponsorship' is a source; */ SELECT SUM(T1.amount) FROM income AS T1 WHERE T1.source = 'Sponsorship' /* Answer the following: Identify the members who live in 'Los Angeles' city and their major. 'Los Angeles' is a city; */ SELECT T2.first_name, T2.last_name, T3.major_name FROM member AS T2 INNER JOIN major AS T3 ON T2.link_to_major = T3.major_id INNER JOIN zip_code AS T4 ON T2.zip = T4.zip_code WHERE T4.city = 'Los Angeles' /* Answer the following: Calculate the remaining budget for 'Fundraising' category. remaining budget refers to SUM(remaining); 'Fundraising' is a category; */ SELECT SUM(T1.remaining) FROM budget AS T1 WHERE T1.category = 'Fundraising'
SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' ORDER BY T2.amount ASC
SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1
SELECT budget_id, amount FROM budget WHERE category = 'Advertising' ORDER BY amount DESC LIMIT 3 /* Answer the following: Which member has the highest income? highest income refers to MAX(amount) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: What are the top 3 events with the highest expenses? highest expenses refers to MAX(cost) */ SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id ORDER BY SUM(T2.cost) DESC LIMIT 3 /* Answer the following: Which major has the most members? most members refers to MAX(COUNT(member_id)) */ SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T1.member_id) DESC LIMIT 1 /* Answer the following: What are the top 3 zip codes with the most members? most members refers to MAX(COUNT(member_id)) */ SELECT T2.zip_code FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code GROUP BY T2.zip_code ORDER BY COUNT(T1.member_id) DESC LIMIT 3 /* Answer the following: What are the top 3 events with the most attendees? most attendees refers to MAX(COUNT(link_to_member)) */ SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id ORDER BY COUNT(T2.link_to_member) DESC LIMIT 3
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'
SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name
SELECT DISTINCT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT DISTINCT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'
SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen'
SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'
SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'
SELECT DISTINCT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30
SELECT type FROM event WHERE location = 'MU 215'
SELECT T1.type FROM event AS T1 WHERE T1.event_date = '2020-03-24T12:00:00'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT CAST(SUM(CASE WHEN T1.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member'
SELECT category FROM event WHERE location = 'MU 215'
SELECT COUNT(income_id) FROM income WHERE amount = 50 /* Answer the following: How many members have a zip code of 90210? zip code of 90210 refers to zip = 90210 */ SELECT COUNT(member_id) FROM member WHERE zip = 90210 /* Answer the following: How many events are of type 'Conference'? type 'Conference' refers to type = 'Conference' */ SELECT COUNT(event_id) FROM event WHERE type = 'Conference' /* Answer the following: How many expenses have a cost of more than 100? cost of more than 100 refers to cost > 100 */ SELECT COUNT(expense_id) FROM expense WHERE cost > 100 /* Answer the following: How many budgets have a remaining amount of less than 500? remaining amount of less than 500 refers to remaining < 500 */ SELECT COUNT(budget_id) FROM budget WHERE remaining < 500 /* Answer the following: How many members are linked to the major 'Computer Science'? 'Computer Science' is the major_name; linked to the major 'Computer Science' refers to link_to_major = major_id where major_name = 'Computer Science' */ SELECT COUNT(member_id) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Computer Science')
SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'
SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'
SELECT T1.last_name, T2.department, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T2.type = 'Guest Speaker' AND T1.spent = 0
SELECT T4.city, T4.state FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN zip_code AS T4 ON T1.zip = T4.zip_code WHERE T2.department = 'Electrical and Computer Engineering' AND T1.position = 'Member'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Social' AND T3.position = 'Vice President' AND T1.location = '900 E. Washington St.'
SELECT T2.last_name, T2.position FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'
SELECT T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.position = 'Member' AND T3.event_name = 'Women''s Soccer'
SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium' AND T1.position = 'Member'
SELECT DISTINCT T2.country FROM zip_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.type = 'PO Box'
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'
SELECT T1.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 50
SELECT T1.link_to_member, T2.link_to_event FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.approved = 'true' AND T1.expense_date BETWEEN '2019-01-10' AND '2019-11-19'
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T1.link_to_major = 'rec1N0upiVLy5esTO'
SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'
SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'education' AND T2.college = 'College of Education & Human Services' AND T1.position = 'Member'
SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) FROM budget /* Answer the following: What is the percentage of members who have attended more than 10 events? attended more than 10 events refers to COUNT(link_to_event) > 10; percentage = DIVIDE(COUNT(member_id where COUNT(link_to_event) > 10), COUNT(member_id)) * 100 */ SELECT CAST(SUM(CASE WHEN COUNT(link_to_event) > 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(member_id) FROM attendance GROUP BY link_to_member /* Answer the following: What is the percentage of income that comes from donations? donations refers to source = 'Donation'; percentage = DIVIDE(SUM(amount where source = 'Donation'), SUM(amount)) * 100 */ SELECT CAST(SUM(CASE WHEN source = 'Donation' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM income /* Answer the following: What is the percentage of members who are from the Computer Science department? Computer Science department refers to department = 'Computer Science'; percentage = DIVIDE(COUNT(member_id where department = 'Computer Science'), COUNT(member_id)) * 100 */ SELECT CAST(SUM(CASE WHEN department = 'Computer Science' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id /* Answer the following: What is the percentage of events that were cancelled? cancelled refers to status = 'Cancelled'; percentage = DIVIDE(COUNT(event_id where status = 'Cancelled'), COUNT(event_id)) * 100 */ SELECT CAST(SUM(CASE WHEN status = 'Cancelled' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) FROM event /* Answer the following: What is the percentage of members who live in the state of California? California refers to state = 'CA'; percentage = DIVIDE(COUNT(member_id where state = 'CA'), COUNT(member_id)) * 100 */ SELECT CAST(SUM(CASE WHEN state = 'CA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(member_id) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'
SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'
SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code
SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0
SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.expense_description = 'Pizza' AND T2.cost > 50 AND T2.cost < 100
SELECT T2.first_name, T2.last_name, T4.major_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN major AS T4 ON T2.link_to_major = T4.major_id WHERE T1.cost > 100
SELECT T1.location, T3.city, T3.state FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN income AS T4 ON T2.budget_id = T4.link_to_budget INNER JOIN zip_code AS T3 ON T1.location = T3.zip_code GROUP BY T1.event_id, T1.location, T3.city, T3.state HAVING COUNT(T4.income_id) > 40
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN ( SELECT T2.link_to_member, SUM(T2.cost) AS total_cost FROM expense AS T2 INNER JOIN budget AS T3 ON T2.link_to_budget = T3.budget_id GROUP BY T2.link_to_member HAVING COUNT(DISTINCT T3.link_to_event) > 1 ) AS T4 ON T1.member_id = T4.link_to_member ORDER BY T4.total_cost DESC LIMIT 1
SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position != 'Member'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < ( SELECT AVG(T3.cost) FROM expense AS T3 INNER JOIN budget AS T2 ON T3.link_to_budget = T2.budget_id WHERE T2.category = 'Parking' )
SELECT CAST(SUM(T2.cost) AS REAL) * 100 / COUNT(T1.event_id) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Game'
SELECT T1.budget_id FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Water, chips, cookies' ORDER BY T2.cost DESC LIMIT 1 /* Answer the following: Which member has the highest income? highest income refers to MAX(amount) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the highest budget? highest budget refers to MAX(amount) */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the most attendees? most attendees refers to COUNT(link_to_member) */ SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_member) DESC LIMIT 1 /* Answer the following: Which member attended the most events? most events refers to COUNT(link_to_event) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1 /* Answer the following: Which event has the most expenses? most expenses refers to COUNT(expense_id) */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget GROUP BY T1.event_name ORDER BY COUNT(T3.expense_id) DESC LIMIT 1 /* Answer the following: Which member has the most expenses? most expenses refers to COUNT(expense_id) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY COUNT(T2.expense_id) DESC LIMIT 1 /* Answer the following: Which event has the most remaining budget? most remaining budget refers to MAX(remaining) */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.remaining DESC LIMIT 1 /* Answer the following: Which member has the most income? most income refers to MAX(amount) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: Which event has the most income? most income refers to MAX(amount) */ SELECT T1.event_name FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.cost DESC LIMIT 5 /* Answer the following: List the names of the top 3 events that had the highest budget. name of the event refers to event_name; highest budget refers to MAX(budget.amount) */ SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 3 /* Answer the following: List the full name of the member who has the highest income. full name refers to first_name, last_name; highest income refers to MAX(income.amount) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member ORDER BY T2.amount DESC LIMIT 1 /* Answer the following: List the names of the top 5 events that had the most attendees. name of the event refers to event_name; most attendees refers to COUNT(attendance.link_to_member) */ SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_member) DESC LIMIT 5 /* Answer the following: List the full name of the member who attended the most events. full name refers to first_name, last_name; attended the most events refers to COUNT(attendance.link_to_event) */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1 /* Answer the following: List the names of the top 3 majors that had the most members. name of the major refers to major_name; most members refers to COUNT(member.link_to_major) */ SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.major_name ORDER BY COUNT(T2.link_to_major) DESC LIMIT 3 /* Answer the following: List the full name of the member who has approved the most expenses. full name refers to first_name, last_name; approved the most expenses refers to COUNT(expense.approved) where approved = 'Yes' */ SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.approved = 'Yes' GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(T2.approved) DESC LIMIT 1
SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > ( SELECT AVG(cost) FROM expense )
SELECT (CAST(SUM(CASE WHEN T2.state = 'Maine' THEN 1 ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.position = 'Member' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.position = 'Member' THEN 1 ELSE 0 END)) AS DIFFERENCE FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code
SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
SELECT T1.first_name, T1.last_name, T2.cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'
SELECT last_name, phone FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE major_name = 'Elementary Education' )
SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'
SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'
SELECT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'
SELECT T1.first_name, T1.last_name, T3.college FROM member AS T1 INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.position = 'Secretary'
SELECT T1.event_name, SUM(T2.spent) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Speaker Gifts' GROUP BY T1.event_name /* Answer the following: Calculate the total income received from 'Ticket Sales' and list the name of the member who received it. total income received = SUM(amount) where source = 'Ticket Sales' */ SELECT T2.first_name, T2.last_name, SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.source = 'Ticket Sales' GROUP BY T2.first_name, T2.last_name /* Answer the following: Calculate the total cost of expenses approved by 'John Doe'. total cost = SUM(cost) where approved = 'John Doe' */ SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'John' AND T2.last_name = 'Doe' /* Answer the following: List the names of members who attended the event 'Annual Gala'. */ SELECT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Annual Gala' /* Answer the following: Calculate the total remaining budget for events that are 'Completed'. total remaining budget = SUM(remaining) where event_status = 'Completed' */ SELECT SUM(T1.remaining) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Completed'
SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Girke'
SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092
SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'
SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS REAL) / SUM(IIF(Currency = 'CZK', 1, 0)) FROM customers
SELECT T1.CustomerID, T1.Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM' AND T1.Date BETWEEN '201201' AND '201212' ORDER BY T1.Consumption ASC LIMIT 1
SELECT AVG(Consumption) / 12 FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date BETWEEN '201301' AND '201312'
SELECT T1.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND STRFTIME('%Y', T2.Date) = '2011' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Consumption < 30000 AND T2.Date BETWEEN '201201' AND '201212'
SELECT (SELECT SUM(Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date BETWEEN '201201' AND '201212') - (SELECT SUM(Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Date BETWEEN '201201' AND '201212')
SELECT STRFTIME('%Y', T2.Date) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY STRFTIME('%Y', T2.Date) ORDER BY SUM(T2.Amount) DESC LIMIT 1
SELECT Segment FROM yearmonth GROUP BY Segment ORDER BY SUM(Consumption) ASC LIMIT 1
SELECT SUBSTR(Date, 1, 4) AS Year FROM yearmonth WHERE Currency = 'CZK' GROUP BY Year ORDER BY SUM(Consumption) DESC LIMIT 1
SELECT SUBSTR(yearmonth.Date, 6, 2) AS Month, SUM(yearmonth.Consumption) AS Total_Consumption FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND SUBSTR(yearmonth.Date, 1, 4) = '2013' GROUP BY Month ORDER BY Total_Consumption DESC LIMIT 1
SELECT (SELECT AVG(T3.Consumption) FROM yearmonth AS T3 INNER JOIN customers AS T4 ON T3.CustomerID = T4.CustomerID WHERE T4.Segment = 'SME' AND T4.Currency = 'CZK' AND SUBSTR(T3.Date, 1, 4) = '2013') - (SELECT AVG(T5.Consumption) FROM yearmonth AS T5 INNER JOIN customers AS T6 ON T5.CustomerID = T6.CustomerID WHERE T6.Segment = 'LAM' AND T6.Currency = 'CZK' AND SUBSTR(T5.Date, 1, 4) = '2013') AS SME_LAM_Difference, (SELECT AVG(T7.Consumption) FROM yearmonth AS T7 INNER JOIN customers AS T8 ON T7.CustomerID = T8.CustomerID WHERE T8.Segment = 'LAM' AND T8.Currency = 'CZK' AND SUBSTR(T7.Date, 1, 4) = '2013') - (SELECT AVG(T9.Consumption) FROM yearmonth AS T9 INNER JOIN customers AS T10 ON T9.CustomerID = T10.CustomerID WHERE T10.Segment = 'KAM' AND T10.Currency = 'CZK' AND SUBSTR(T9.Date, 1, 4) = '2013') AS LAM_KAM_Difference, (SELECT AVG(T11.Consumption) FROM yearmonth AS T11 INNER JOIN customers AS T12 ON T11.CustomerID = T12.CustomerID WHERE T12.Segment = 'KAM' AND T12.Currency = 'CZK' AND SUBSTR(T11.Date, 1, 4) = '2013') - (SELECT AVG(T13.Consumption) FROM yearmonth AS T13 INNER JOIN customers AS T14 ON T13.CustomerID = T14.CustomerID WHERE T14.Segment = 'SME' AND T14.Currency = 'CZK' AND SUBSTR(T13.Date, 1, 4) = '2013') AS KAM_SME_Difference
SELECT Segment, MAX((Consumption_2013 - Consumption_2012) / Consumption_2012 * 100) AS Max_Increase, MIN((Consumption_2013 - Consumption_2012) / Consumption_2012 * 100) AS Min_Increase FROM ( SELECT c.Segment, SUM(CASE WHEN SUBSTR(y.Date, 1, 4) = '2012' THEN y.Consumption ELSE 0 END) AS Consumption_2012, SUM(CASE WHEN SUBSTR(y.Date, 1, 4) = '2013' THEN y.Consumption ELSE 0 END) AS Consumption_2013 FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'EUR' AND c.Segment IN ('SME', 'LAM', 'KAM') AND SUBSTR(y.Date, 1, 4) IN ('2012', '2013') GROUP BY c.Segment ) GROUP BY Segment
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND SUBSTR(Date, 1, 6) BETWEEN '201308' AND '201311'
SELECT (SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount') - (SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount') AS More_Discount_Gas_Stations
SELECT (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') - (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS num
SELECT (SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'SME' AND Currency = 'Czech koruna') - (SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'SME' AND Currency = 'Euro') AS Amount_of_more_SMEs
SELECT T2.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM' AND T2.Currency = 'Euro' AND T1.Date = '201310' ORDER BY T1.Consumption DESC LIMIT 1
SELECT T1.CustomerID, MAX(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T1.CustomerID ORDER BY MAX(T2.Consumption) DESC LIMIT 1
SELECT SUM(Consumption) FROM yearmonth WHERE Date = '201305' AND CustomerID IN ( SELECT CustomerID FROM customers WHERE Segment = 'KAM' )
SELECT CAST(SUM(CASE WHEN T1.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM'
SELECT Country, COUNT(*) as NumberOfValueForMoneyStations FROM gasstations WHERE Segment = 'Value for Money' GROUP BY Country /* Answer the following: What is the total consumption of each customer in each month? */ SELECT CustomerID, Date, SUM(Consumption) as TotalConsumption FROM yearmonth GROUP BY CustomerID, Date /* Answer the following: What is the total amount of transactions made by each customer? */ SELECT CustomerID, SUM(Amount) as TotalAmount FROM transactions_1k GROUP BY CustomerID /* Answer the following: What is the most purchased product? */ SELECT ProductID, COUNT(*) as NumberOfPurchases FROM transactions_1k GROUP BY ProductID ORDER BY NumberOfPurchases DESC LIMIT 1 /* Answer the following: Which customer has the highest consumption in a single month? */ SELECT CustomerID, Date, MAX(Consumption) as HighestConsumption FROM yearmonth GROUP BY CustomerID, Date ORDER BY HighestConsumption DESC LIMIT 1 /* Answer the following: What is the average price of each product? */ SELECT ProductID, AVG(Price) as AveragePrice FROM transactions_1k GROUP BY ProductID /* Answer the following: Which gas station has the most transactions? */ SELECT GasStationID, COUNT(*) as NumberOfTransactions FROM transactions_1k GROUP BY GasStationID ORDER BY NumberOfTransactions DESC LIMIT 1 /* Answer the following: What is the total revenue of each gas station? */ SELECT GasStationID, SUM(Amount * Price) as TotalRevenue FROM transactions_1k GROUP BY GasStationID /* Answer the following: What is the most common currency among customers? */ SELECT Currency, COUNT(*) as NumberOfCustomers FROM customers GROUP BY Currency ORDER BY NumberOfCustomers DESC LIMIT 1 /* Answer the following: What is the most common segment among gas stations? */ SELECT Segment, COUNT(*) as NumberOfGasStations FROM gasstations GROUP BY Segment ORDER BY NumberOfGasStations DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN Currency = 'Euro' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'
SELECT CAST(SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'
SELECT CAST(SUM(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'Slovakia'
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1
SELECT T2.Segment FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201309' GROUP BY T2.Segment ORDER BY SUM(T1.Consumption) ASC LIMIT 1
SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date = '201206' ORDER BY T1.Consumption ASC LIMIT 1
SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'
SELECT MAX(SUM(T2.Consumption) / 12) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'Euro'
SELECT T2.Description FROM "transactions_1k" AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID WHERE SUBSTR(T1.Date, 1, 6) = '201309'
SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE SUBSTR(T1.Date, 1, 6) = '201306';
SELECT DISTINCT T2.ChainID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'euro'
SELECT DISTINCT T3.Description FROM "transactions_1k" AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'Euro'
SELECT AVG(Amount * Price) AS AverageTotalPrice FROM transactions_1k WHERE strftime('%Y-%m', Date) = '2012-01'
SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'euro' AND T2.Consumption > 1000
SELECT DISTINCT T3.Description FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'
SELECT DISTINCT T2.Time FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ChainID = 11
SELECT COUNT(T1.TransactionID) FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000
SELECT COUNT(T1.TransactionID) FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date >= '2012-01-01'
SELECT AVG(T1.Price * T1.Amount) AS AverageTotalPrice FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'
SELECT AVG(T4.Price) FROM customers AS T1 INNER JOIN "transactions_1k" AS T4 ON T1.CustomerID = T4.CustomerID WHERE T1.Currency = 'Euro'
SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1
SELECT T2.Country FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time ASC LIMIT 1
SELECT T1.Currency FROM customers AS T1 INNER JOIN "transactions_1k" AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'
SELECT T2.Segment FROM "transactions_1k" AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT COUNT(TransactionID) FROM "transactions_1k" AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Date = '2012-08-26' AND T1.Time < '13:00:00'
SELECT Segment FROM customers ORDER BY CustomerID ASC LIMIT 1 /* Answer the following: What is the description of the first product sold? */ SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Date ASC, T1.Time ASC LIMIT 1 /* Answer the following: What is the country of the gas station where the first transaction took place? */ SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID ORDER BY T1.Date ASC, T1.Time ASC LIMIT 1 /* Answer the following: What is the segment of the gas station where the first transaction took place? */ SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID ORDER BY T1.Date ASC, T1.Time ASC LIMIT 1 /* Answer the following: What is the currency of the earliest customer? */ SELECT Currency FROM customers ORDER BY CustomerID ASC LIMIT 1 /* Answer the following: What is the consumption of the earliest customer in the yearmonth table? */ SELECT Consumption FROM yearmonth ORDER BY Date ASC, CustomerID ASC LIMIT 1
SELECT T2.Country FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'
SELECT T1.ProductID FROM "transactions_1k" AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND STRFTIME('%Y-%m', T2.Date) = '2012-01'
SELECT COUNT(T1.TransactionID) FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'
SELECT T1.Currency FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date LIKE '201306%' AND T2.Consumption = 214582.17
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = 667467
SELECT T2.Country FROM "transactions_1k" AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Amount = 548.4
SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25'
SELECT (CAST((SELECT Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price = 634.8) AND Date LIKE '2012%') - (SELECT Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price = 634.8) AND Date LIKE '2013%') AS REAL) * 100) / (SELECT Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price = 634.8) AND Date LIKE '2012%') AS DecreaseRate
SELECT T2.GasStationID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID GROUP BY T2.GasStationID ORDER BY SUM(T1.Amount * T1.Price) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN Segment = 'premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(Segment) FROM gasstations WHERE Country = 'SVK'
SELECT SUM(Amount * Price) FROM transactions_1k WHERE CustomerID = 38508 AND strftime('%Y%m', Date) = '201201'
SELECT p.Description FROM products AS p INNER JOIN "transactions_1k" AS t ON p.ProductID = t.ProductID GROUP BY p.Description ORDER BY SUM(t.Amount) DESC LIMIT 5
SELECT T1.CustomerID, T1.Currency, AVG(T2.Price / T2.Amount) AS AvgPricePerItem FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID, T1.Currency ORDER BY SUM(T2.Price) DESC LIMIT 1
SELECT T2.Country FROM "transactions_1k" AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1
SELECT T3.CustomerID, T3.Consumption FROM "transactions_1k" AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.ProductID = 5 AND T1.Price / T1.Amount > 29.00 AND T3.Date LIKE '201208%'
